[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "rOpenSci Packages: Development, Maintenance, and Peer Review",
    "section": "",
    "text": "rOpenSci Dev Guide\n\n This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License. Refer to its Zenodo DOI to cite it.\n@software{ropensci_2024_10797633,\n  author       = {rOpenSci and\n                  Anderson, Brooke and\n                  Chamberlain, Scott and\n                  DeCicco, Laura and\n                  Gustavsen, Julia and\n                  Krystalli, Anna and\n                  Lepore, Mauro and\n                  Mullen, Lincoln and\n                  Ram, Karthik and\n                  Ross, Noam and\n                  Salmon, Maëlle and\n                  Vidoni, Melina and\n                  Riederer, Emily and\n                  Sparks, Adam and\n                  Hollister, Jeff},\n  title        = {rOpenSci Packages: Development, Maintenance, and\n                   Peer Review\n                  },\n  month        = mar,\n  year         = 2024,\n  publisher    = {Zenodo},\n  version      = {0.9.0},\n  doi          = {10.5281/zenodo.10797633},\n  url          = {https://doi.org/10.5281/zenodo.10797633},\n}\n\nYou can also read the PDF version of this book.",
    "crumbs": [
      "rOpenSci Dev Guide"
    ]
  },
  {
    "objectID": "preface.html",
    "href": "preface.html",
    "title": "Preface",
    "section": "",
    "text": "Welcome! This book is a guide for authors, maintainers, reviewers and editors of rOpenSci.\nThe first section of the book contains our guidelines for creating and testing R packages.\nThe second section is dedicated to rOpenSci’s software peer review process: what it is, our policies, and specific guides for authors, editors and reviewers throughout the process. For statistical software review, refer to the project webpage and resources.\nThe third and last section features our best practice for nurturing your package once it has been onboarded: how to collaborate with other developers, how to document releases, how to promote your package and how to leverage GitHub as a development platform. The third section also features a chapter for anyone wishing to start contributing to rOpenSci packages.\nWe hope that you’ll find the guide useful and clear, and welcome your suggestions in the issue tracker of the book. Happy R packaging!\nThe rOpenSci editorial team.\nThis book is a living document. You can view updates to our best practices and policies via the release notes.\nYou can cite this book using its Zenodo metadata and DOI.\nIf you want to contribute to this book (suggestions, corrections) please refer to the GitHub repository in particular the contributing guidelines. Thanks!\nWe are thankful for all authors, reviewers and guest editors for helping us improve the system and this guide over the years. Thanks also to the following persons who made contributions to this guide and its previous incarnations: Katrin Leinweber,, John Baumgartner,, François Michonneau,, Christophe Dervieux,, Lorenzo Busetto,, Ben Marwick,, Nicholas Horton,, Chris Kennedy,, Mark Padgham,, Jeroen Ooms,, Sean Hughes,, Jan Gorecki,, Jemma Stachelek,, Dean Attali,, Julia Gustavsen,, Nicholas Tierney,, Rich FitzJohn,, Tiffany Timbers,, Hilmar Lapp,, Miles McBain,, Bryce Mecum,, Jonathan Carroll,, Carl Boettiger,, Florian Privé,, Stefanie Butland,, Daniel Possenriede,, Hadley Wickham,, Mauro Lepore,, Matthew Fidler,, Luke McGuinness,, Aaron Wolen,, Indrajeet Patil,, Kevin Wright,, Will Landau,, Hugo Gruson,, Hao Ye,, Sébastien Rochette,, Edward Wallace,, Alexander Fischer,, Maxime Jaunatre,, Thomas Zwagerman. Please tell us if we forgot to acknowledge your contribution!",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "pkg_building.html",
    "href": "pkg_building.html",
    "title": "1  Packaging Guide",
    "section": "",
    "text": "1.1 Package name and metadata",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Packaging Guide</span>"
    ]
  },
  {
    "objectID": "pkg_building.html#package-name-and-metadata",
    "href": "pkg_building.html#package-name-and-metadata",
    "title": "1  Packaging Guide",
    "section": "",
    "text": "1.1.1 Naming your package\n\nWe strongly recommend short, descriptive names in lower case. If your package deals with one or more commercial services, please make sure the name does not violate branding guidelines. You can check if your package name is available, informative and not offensive by using the pak::pkg_name_check() function; also use a search engine as you’d thus see if it’s offensive in a language other than English. In particular, do not choose a package name that’s already used on CRAN or Bioconductor.\nThere is a trade-off between the advantages of a unique package name and a less original package name.\n\nA more unique package name might be easier to track (for you and us to assess package use for instance, fewer false positives when typing its name in GitHub code search) and search (for users to ask “how to use package blah” in a search engine).\nOn the other hand a too unique package name might make the package less discoverable (that is to say, to find it by searching “how to do this-thing in R”). It might be an argument for naming your package something very close to its topic such as geojson).\n\nFind other interesting aspects of naming your package in this blog post by Nick Tierney, and in case you change your mind, find out how to rename your package in this other blog post of Nick’s.\n\n\n\n1.1.2 Creating metadata for your package\nWe recommend you to use the codemetar package for creating and updating a JSON CodeMeta metadata file for your package via codemetar::write_codemeta(). It will automatically include all useful information, including GitHub topics. CodeMeta uses Schema.org terms so as it gains popularity the JSON metadata of your package might be used by third-party services, maybe even search engines.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Packaging Guide</span>"
    ]
  },
  {
    "objectID": "pkg_building.html#platforms",
    "href": "pkg_building.html#platforms",
    "title": "1  Packaging Guide",
    "section": "1.2 Platforms",
    "text": "1.2 Platforms\n\nPackages should run on all major platforms (Windows, macOS, Linux). Exceptions may be granted packages that interact with system-specific functions, or wrappers for utilities that only operate on limited platforms, but authors should make every effort for cross-platform compatibility, including system-specific compilation, or containerization of external utilities.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Packaging Guide</span>"
    ]
  },
  {
    "objectID": "pkg_building.html#package-api",
    "href": "pkg_building.html#package-api",
    "title": "1  Packaging Guide",
    "section": "1.3 Package API",
    "text": "1.3 Package API\n\n1.3.1 Function and argument naming\n\nFunctions and arguments naming should be chosen to work together to form a common, logical programming API that is easy to read, and auto-complete.\n\nConsider an object_verb() naming scheme for functions in your package that take a common data type or interact with a common API. object refers to the data/API and verb the primary action. This scheme helps avoid namespace conflicts with packages that may have similar verbs, and makes code readable and easy to auto-complete. For instance, in stringi, functions starting with stri_ manipulate strings (stri_join(), stri_sort(), and in googlesheets functions starting with gs_ are calls to the Google Sheets API (gs_auth(), gs_user(), gs_download()).\n\nFor functions that manipulate an object/data and return an object/data of the same type, make the object/data the first argument of the function so as to enhance compatibility with the pipe operators (base R’s |&gt;, magrittr’s %&gt;%).\nWe strongly recommend snake_case over all other styles unless you are porting over a package that is already in wide use.\nAvoid function name conflicts with base packages or other popular ones (e.g. ggplot2, dplyr, magrittr, data.table)\nArgument naming and order should be consistent across functions that use similar inputs.\nPackage functions importing data should not import data to the global environment, but instead must return objects. Assignments to the global environment are to be avoided in general.\n\n\n\n1.3.2 Console messages\n\nUse either the cli package, or base R’s tools (message() and warning()) to communicate with the user in your functions.\nHighlights of the cli package include: automatic wrapping, respect of the NO_COLOR convention, many semantic elements, and extensive documentation. Read more in a blog post.\nPlease do not use print() or cat() unless it’s for a print.*() or str.*() methods, as these methods of printing messages are harder for users to suppress.\nProvide a way for users to opt out of verbosity, preferably at the package level: make message creation dependent on an environment variable or option (like “usethis.quiet” in the usethis package), rather than on a function parameter. The control of messages could be on several levels (“none”, “inform”, “debug”) rather than logical (no messages at all / all messages). Control of verbosity is useful for end users but also in tests. More interesting comments can be found in an issue of the tidyverse design guide.\nYou can provide translations for your package’s messages. The potools R package can help you with that task.\n\n\n\n1.3.3 Interactive/Graphical Interfaces\nIf providing a graphical user interface (GUI) (such as a Shiny app), to facilitate workflow, include a mechanism to automatically reproduce steps taken in the GUI. This could include auto-generation of code to reproduce the same outcomes, the output of intermediate values produced in the interactive tool, or simply clear and well-documented mapping between GUI actions and scripted functions. (See also “Testing” below.)\nThe tabulizer package e.g. has an interactive workflow to extract tables, but can also only extract coordinates so one can re-run things as a script. Besides, two examples of shiny apps that do code generation are https://gdancik.shinyapps.io/shinyGEO/, and https://github.com/wallaceEcoMod/wallace/.\n\n\n1.3.4 Input checking\nWe recommend your package use a consistent method of your choice for checking inputs – either base R, an R package, or custom helpers.\n\n\n1.3.5 Packages wrapping web resources (API clients)\nIf your package accesses a web API or another web resource,\n\nMake sure requests send an user agent, that is, a way to identify what (your package) or who sent the request. The users should be able to override the package’s default user agent. Ideally, the user agent should be different on continuous integration services, and in development (based on, for instance, the GitHub usernames of the developers).\nYou might choose different (better) defaults than the API, in which case you should document them.\nYour package should help with pagination, by allowing the users to not worry about it at all since your package does all necessary requests.\nYour package should help with rate limiting according to the API rules.\nYour package should reproduce API errors, and possibly explain them in informative error messages.\nYour package could export high-level functions and low-level functions, the latter allowing users to call API endpoints directly with more control (like gh::gh()).\n\nFor more information refer to the blog post Why You Should (or Shouldn’t) Build an API Client.\n\n\n1.3.6 Packages wrapping external software\n\nDocument clearly how to install the package, including all required external packages or libraries, including where applicable explicit steps on common operating systems.\nProvide a situation report (sitrep) function checking whether the software has been installed, with hints in case something is missing. Example in greta.\nIf possible, provide a function helping with installation. Example in hugodown.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Packaging Guide</span>"
    ]
  },
  {
    "objectID": "pkg_building.html#code-style",
    "href": "pkg_building.html#code-style",
    "title": "1  Packaging Guide",
    "section": "1.4 Code Style and best practices",
    "text": "1.4 Code Style and best practices\n\nFor more information on how to style your code, name functions, and R scripts inside the R/ folder, we recommend reading the code chapter in The R Packages book. We recommend Air or the styler package for automating part of the code styling. We suggest reading the Tidyverse style guide.\nYou can choose to use = over &lt;- as long you are consistent with one choice within your package. We recommend avoiding the use of -&gt; for assignment within a package. If you do use &lt;- throughout your package, and you also use R6 in that package, you’ll be forced to use = for assignment within your R6Class construction - this is not considered an inconsistency because you can’t use &lt;- in this case.\nYou can use the lintr package to identify some possible areas of improvement. Example workflow.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Packaging Guide</span>"
    ]
  },
  {
    "objectID": "pkg_building.html#citation-file",
    "href": "pkg_building.html#citation-file",
    "title": "1  Packaging Guide",
    "section": "1.5 CITATION file",
    "text": "1.5 CITATION file\n\nIf your package does not yet have a CITATION file, you can create one with usethis::use_citation(), and populate it with values generated by the citation() function.\nCRAN requires CITATION files to be declared as bibentry items, and not in the previously-accepted form of citEntry().\nIf you archive each release of your GitHub repo on Zenodo, add the Zenodo top-level DOI to the CITATION file.\nIf one day after review at rOpenSci you publish a software publication about your package, add it to the CITATION file.\nLess related to your package itself but to what supports it: if your package wraps a particular resource such as data source or, say, statistical algorithm, remind users of how to cite that resource via e.g. citHeader(). Maybe even add the reference for the resource.\n\nAs an example see the dynamite CITATION file which refers to the R manual as well as other associated publications.\ncitHeader(\"To cite dynamite in publications use:\")\n\nbibentry(\n  key = \"dynamitepaper\",\n  bibtype  = \"Misc\",\n  doi = \"10.48550/ARXIV.2302.01607\",\n  url = \"https://arxiv.org/abs/2302.01607\",\n  author = c(person(\"Santtu\", \"Tikka\"), person(\"Jouni\", \"Helske\")),\n  title = \"dynamite: An R Package for Dynamic Multivariate Panel Models\",\n  publisher = \"arXiv\",\n  year = \"2023\"\n)\n\nbibentry(\n  key = \"dmpmpaper\",\n  bibtype  = \"Misc\",\n  title    = \"Estimating Causal Effects from Panel Data with Dynamic \n    Multivariate Panel Models\",\n  author = c(person(\"Santtu\", \"Tikka\"), person(\"Jouni\", \"Helske\")),\n  publisher = \"SocArxiv\",\n  year     = \"2022\",\n  url      = \"https://osf.io/preprints/socarxiv/mdwu5/\"\n)\n\nbibentry(\n  key = \"dynamite\",\n  bibtype  = \"Manual\",\n  title    = \"Bayesian Modeling and Causal Inference for Multivariate\n    Longitudinal Data\",\n  author = c(person(\"Santtu\", \"Tikka\"), person(\"Jouni\", \"Helske\")),\n  note  = \"R package version 1.0.0\",\n  year     = \"2022\",\n  url      = \"https://github.com/ropensci/dynamite\"\n)\n\nYou could also create and store a CITATION.cff thanks to the cffr package. It also provides a GitHub Action workflow to keep the CITATION.cff file up-to-date.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Packaging Guide</span>"
    ]
  },
  {
    "objectID": "pkg_building.html#readme",
    "href": "pkg_building.html#readme",
    "title": "1  Packaging Guide",
    "section": "1.6 README",
    "text": "1.6 README\n\nAll packages should have a README file, named README.md, in the root of the repository. The README should include, from top to bottom:\n\nThe package name.\nBadges for continuous integration and test coverage, the badge for rOpenSci peer-review once it has started (see below), a repostatus.org badge, and any other badges (e.g. R-universe).\nShort description of goals of package (what does it do? why should a potential user care?), with descriptive links to all vignettes unless the package is small and there’s only one vignette repeating the README. Please also ensure the vignettes are rendered and readable, see the “documentation website” section).\nInstallation instructions using e.g. the remotes package, pak package, or R-universe.\nAny additional setup required (authentication tokens, etc).\nBrief demonstration usage.\nIf applicable, how the package compares to other similar packages and/or how it relates to other packages.\nCitation information i.e. Direct users to the preferred citation in the README by adding boilerplate text “here’s how to cite my package”. See e.g. ecmwfr README.\n\n\nIf you use another repo status badge such as a lifecycle badge, please also add a repostatus.org badge. Example of a repo README with two repo status badges.\n\nOnce you have submitted a package and it has passed editor checks, add a peer-review badge via\n\n[![rOpenSci software peer-review](https://badges.ropensci.org/&lt;issue_id&gt;_status.svg)](https://github.com/ropensci/software-review/issues/&lt;issue_id&gt;)\nwhere issue_id is the number of the issue in the software-review repository. For instance, the badge for rtimicropem review uses the number 126 since it’s the review issue number. The badge will first indicated “under review” and then “peer-reviewed” once your package has been onboarded (issue labelled “approved” and closed), and will link to the review issue.\n\nIf your README has many badges consider ordering them in an HTML table to make it easier for newcomers to gather information at a glance. See examples in drake repo and in qualtRics repo. Possible sections are\n\nDevelopment (CI statuses cf CI chapter, Slack channel for discussion, repostatus)\nRelease/Published (CRAN version and release date badges from METACRAN, CRAN checks API badge, Zenodo badge)\nStats/Usage (downloads e.g. download badges from r-hub/cranlogs) The table should be more wide than it is long in order not to mask the rest of the README.\n\nIf your package connects to a data source or online service, or wraps other software, consider that your package README may be the first point of entry for users. It should provide enough information for users to understand the nature of the data, service, or software, and provide links to other relevant data and documentation. For instance, a README should not merely read, “Provides access to GooberDB,” but also include, “…, an online repository of Goober sightings in South America. More information about GooberDB, and documentation of database structure and metadata can be found at link”.\nWe recommend not creating README.md directly, but from a README.Rmd file (an R Markdown file) if you have any demonstration code. The advantage of the .Rmd file is you can combine text with code that can be easily updated whenever your package is updated.\nConsider using usethis::use_readme_rmd() to get a template for a README.Rmd file and to automatically set up a pre-commit hook to ensure that README.md is always newer than README.Rmd.\nExtensive examples should be kept for a vignette. If you want to make the vignettes more accessible before installing the package, we suggest creating a website for your package.\nAdd a code of conduct and contribution guidelines.\nSee the gistr README for a good example README to follow for a small package, and bowerbird README for a good example README for a larger package.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Packaging Guide</span>"
    ]
  },
  {
    "objectID": "pkg_building.html#documentation",
    "href": "pkg_building.html#documentation",
    "title": "1  Packaging Guide",
    "section": "1.7 Documentation",
    "text": "1.7 Documentation\n\n1.7.1 General\n\nAll exported package functions should be fully documented with examples.\nIf there is potential overlap or confusion with other packages providing similar functionality or having a similar name, add a note in the README, main vignette and potentially the Description field of DESCRIPTION. Examples in rtweet README, rebird README, and the non-rOpensci package slurmR.\nThe package should contain top-level documentation for ?foobar, (or ?`foobar-package` if there is a naming conflict). Optionally, you can use both ?foobar and ?`foobar-package` for the package level manual file, using @aliases roxygen tag. usethis::use_package_doc() adds the template for the top-level documentation.\nThe package should contain at least one HTML vignette providing a substantial coverage of package functions, illustrating realistic use cases and how functions are intended to interact. If the package is small, the vignette and the README may have very similar content.\nAs is the case for a README, top-level documentation or vignettes may be the first point of entry for users. If your package connects to a data source or online service, or wraps other software, it should provide enough information for users to understand the nature of the data, service, or software, and provide links to other relevant data and documentation. For instance, a vignette intro or documentation should not merely read, “Provides access to GooberDB,” but also include, “…, an online repository of Goober sightings in South America. More information about GooberDB, and documentation of database structure and metadata can be found at link”. Any vignette should outline prerequisite knowledge to be able to understand the vignette upfront.\n\nThe general vignette should present a series of examples progressing in complexity from basic to advanced usage.\n\nFunctionality likely to be used by only more advanced users or developers might be better put in a separate vignette (e.g. programming/NSE with dplyr).\nThe README, the top-level package docs, vignettes, websites, etc., should all have enough information at the beginning to get a high-level overview of the package and the services/data it connects to, and provide navigation to other relevant pieces of documentation. This is to follow the principle of multiple points of entry i.e. to take into account the fact that any piece of documentation may be the first encounter the user has with the package and/or the tool/data it wraps.\nThe vignette(s) should include citations to software and papers where appropriate.\nIf your package provides access to a data source, we require that DESCRIPTION contains both (1) A brief identification and/or description of the organisation responsible for issuing data; and (2) The URL linking to a public-facing page providing, describing, or enabling data access (which may often differ from URL leading directly to data source).\nOnly use package startup messages when necessary (function masking for instance). Avoid package startup messages like “This is foobar 2.4-0” or citation guidance because they can be annoying to the user. Rely on documentation for such guidance.\nYou can choose to have a README section about use cases of your package (other packages, blog posts, etc.), example.\n\n\n\n1.7.2 roxygen2 use\n\nWe request all submissions to use roxygen2 for documentation. roxygen2 is an R package that compiles .Rd files to your man folder in your package from tags written above each function. roxygen2 has support for Markdown syntax. One key advantage of using roxygen2 is that your NAMESPACE will always be automatically generated and up to date.\nMore information on using roxygen2 documentation is available in the R packages book and in roxygen2 website itself.\nIf you were writing Rd directly without roxygen2, the Rd2roxygen package contains functions to convert Rd to roxygen documentation.\nAll functions should document the type of object returned under the @return heading.\nThe default value for each parameter should be clearly documented. For example, instead of writing A logical value determining if ..., you should write A logical value (default `TRUE`) determining if .... It is also good practice to indicate the default values directly in your function definition:\n\n\nf &lt;- function(a = TRUE) {\n  # function code\n}\n\n\nDocumentation should support user navigation by including useful cross-links between related functions and documenting related functions together in groups or in common help pages. In particular, the @family tags, that automatically creates “See also” links and can help group functions together on pkgdown sites, is recommended for this purpose. See the “manual” section of The R Packages book and the “function grouping” section of the present chapter for more details.\nYou can re-use documentation pieces (e.g. details about authentication, related packages) across the vignettes/README/man pages. Refer to roxygen2 vignette on documentation reuse.\nFor including examples, you can use the classic @examples tag (plural “examples”) but also the @example &lt;path&gt; tag (singular “example”) for storing the example code in a separate R script (ideally under man/), and the @exampleIf tag for running examples conditionally and avoiding R CMD check failures. Refer to roxygen2 documentation about examples.\nAdd #' @noRd to internal functions. You might be interested in the devtag experimental package for getting local manual pages when using #' @noRd.\nStarting from roxygen2 version 7.0.0, R6 classes are officially supported. See the roxygen2 docs for details on how to document R6 classes.\nThere is no support for providing manual pages in different languages yet, but some interesting progress in the rhelpi18n R package.\n\n\n\n1.7.3 Example datasets\nTo document your package’s interface, you might need to use example datasets. You can either use base R datasets (in the datasets package) such as penguins, or re-distribute and document data, with proper attributions. Be careful to choose data that comply with the rOpenSci’s code of conduct and generally is not hurtful or alienating to anyone.\n\n\n1.7.4 URLs in documentation\nThis subsection is particularly relevant to authors wishing to submit their package to CRAN. CRAN will check URLs in your documentation and does not allow redirect status codes such as 301. You can use the urlchecker package to reproduce these checks and, in particular, replace URLs with the URLs they redirect to. Others have used the option to escape some URLs (change &lt;https://ropensci.org/&gt; to https://ropensci.org/, or \\url{https://ropensci.org/} to https://ropensci.org/.), but if you do so, you will need to implement some sort of URL checking yourself to prevent them from getting broken without your noticing. Furthermore, links would not be clickable from local docs.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Packaging Guide</span>"
    ]
  },
  {
    "objectID": "pkg_building.html#website",
    "href": "pkg_building.html#website",
    "title": "1  Packaging Guide",
    "section": "1.8 Documentation website",
    "text": "1.8 Documentation website\nWe recommend creating a documentation website for your package using pkgdown. The R packages book features a chapter on pkgdown, and of course pkgdown has its own documentation website.\nThere are a few elements we’d like to underline here.\n\n1.8.1 Automatic deployment of the documentation website\nYou only need to worry about automatic deployment of your website until approval and transfer of your package repo to the ropensci organization; indeed, after that a pkgdown website will be built for your package after each push to the GitHub repo. You can find the status of these builds at https://dev.ropensci.org/job/package_name, e.g. for magick; and the website at https://docs.ropensci.org/package_name, e.g. for magick. The website build will use your pkgdown config file if you have one, except for the styling that will use the rotemplate package. The resulting website will have a local search bar. Please report bugs, questions and feature requests about the central builds at https://github.com/ropensci/docs/ and about the template at https://github.com/ropensci/rotemplate/.\nIf your package vignettes need credentials (API keys, tokens, etc.) to knit, you might want to precompute them since credentials cannot be used on the docs server.\nBefore submission and before transfer, you could use the approach documented by pkgdown or the tic package for automatic deployment of the package’s website. This would save you the hassle of running (and remembering to run) pkgdown::build_site() yourself every time the site needs to be updated. First refer to our chapter on continuous integration if you’re not familiar with continuous integration. In any case, do not forget to update all occurrences of the website URL after transfer to the ropensci organization.\n\n\n1.8.2 Language\nIf your package’s documentation is written in a language other than English (but supported by the rOpenSci software peer-review system), you can declare that language for your pkgdown website to be localized.\nIt is not yet possible to get a multilingual pkgdown website out of the box.\n\n\n1.8.3 Grouping functions in the reference\nWhen your package has many functions, use grouping in the reference, which you can do more or less automatically.\nIf you use roxygen2 above version 6.1.1, you should use the @family tag in your functions documentation to indicate grouping. This will give you links between functions in the local documentation of the installed package (“See also” section) and allow you to use the pkgdown has_concept function in the config file of your website. Non-rOpenSci example courtesy of optiRum: family tag, pkgdown config file and resulting reference section. To customize the text of the cross-reference title created by roxygen2 (Other {family}:), refer to roxygen2 docs regarding how to provide a rd_family_title list in man/roxygen/meta.R.\nLess automatically, see the example of drake website and associated config file.\n\n\n1.8.4 Branding of authors\nYou can make the names of (some) authors clickable by adding their URL, and you can even replace their names with a logo (think rOpenSci… or your organisation/company!). See pkgdown documentation.\n\n\n1.8.5 Tweaking the navbar\nYou can make your website content easier to browse by tweaking the navbar, refer to pkgdown documentation. In particular, note that if you name the main vignette of your package “pkg-name.Rmd”, it’ll be accessible from the navbar as a Get started link instead of via Articles &gt; Vignette Title.\n\n\n1.8.6 Math rendering\nPlease refer to pkgdown documentation. Our template is compatible with this configuration.\n\n\n1.8.7 Package logo\nTo use your package logo on the pkgdown homepage, refer to usethis::use_logo(). If your package doesn’t have any logo, the rOpenSci docs builder will use the rOpenSci logo instead.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Packaging Guide</span>"
    ]
  },
  {
    "objectID": "pkg_building.html#authorship",
    "href": "pkg_building.html#authorship",
    "title": "1  Packaging Guide",
    "section": "1.9 Authorship",
    "text": "1.9 Authorship\nThe DESCRIPTION file of a package should list package authors and contributors to a package, using the Authors@R syntax to indicate their roles (author/creator/contributor etc.), and using the comment field to indicate the ORCID ID of each author who is a person and the ROR ID of each author that is an organization, if they have one. See this section of “Writing R Extensions” for details.\nIf you feel that your reviewers have made a substantial contribution to the development of your package, you may list them in the Authors@R field with a Reviewer contributor type (\"rev\"), like so:\n    person(\"Bea\", \"Hernández\", role = \"rev\",\n    comment = \"Bea reviewed the package (v. X.X.XX) for rOpenSci, see &lt;https://github.com/ropensci/software-review/issues/116&gt;\"),\nOnly include reviewers after asking for their consent. Read more in this blog post “Thanking Your Reviewers: Gratitude through Semantic Metadata”. Please do not list editors as contributors. Your participation in and contribution to rOpenSci is thanks enough!\n\n1.9.1 Authorship of included code\nMany packages include code from other software. Whether entire files or single functions are included from other packages, rOpenSci packages should follow the CRAN Repository Policy:\n\nThe ownership of copyright and intellectual property rights of all components of the package must be clear and unambiguous (including from the authors specification in the DESCRIPTION file). Where code is copied (or derived) from the work of others (including from R itself), care must be taken that any copyright/license statements are preserved and authorship is not misrepresented.\nPreferably, an ‘Authors@R’ field would be used with ‘ctb’ roles for the authors of such code. Alternatively, the ‘Author’ field should list these authors as contributors.\nWhere copyrights are held by an entity other than the package authors, this should preferably be indicated via ‘cph’ roles in the ‘Authors@R’ field, or using a ‘Copyright’ field (if necessary referring to an inst/COPYRIGHTS file).\nTrademarks must be respected.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Packaging Guide</span>"
    ]
  },
  {
    "objectID": "pkg_building.html#licence",
    "href": "pkg_building.html#licence",
    "title": "1  Packaging Guide",
    "section": "1.10 Licence",
    "text": "1.10 Licence\nThe package needs to have a CRAN or OSI accepted license. The R packages book includes a helpful section on licenses.\nIf your package bundles code from other sources, you also need to acknowledge authors of the original code in your DESCIPTION file, generally with a copyright-holder role: role = \"cph\". For how to update your DESCRIPTION file, see the R packages book.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Packaging Guide</span>"
    ]
  },
  {
    "objectID": "pkg_building.html#testing",
    "href": "pkg_building.html#testing",
    "title": "1  Packaging Guide",
    "section": "1.11 Testing",
    "text": "1.11 Testing\n\nAll packages should pass R CMD check/devtools::check() on all major platforms.\nAll packages should have a test suite that covers major functionality of the package. The tests should also cover the behavior of the package in case of errors.\nIt is good practice to write unit tests for all functions, and all package code in general, ensuring key functionality is covered. Test coverage below 75% will likely require additional tests or explanation before being sent for review.\nWe recommend using testthat for writing tests. An alternative is tinytest.\nStrive to write tests as you write each new function. This serves the obvious need to have proper testing for the package, but allows you to think about various ways in which a function can fail, and to defensively code against those. More information.\nTests should be easy to understand, and as self-contained as possible. When using testthat, avoid using code outside of test_that() blocks (such as pre-processing steps). We recommend reading the high-level principles for testing in the R Packages book.\nPackages with Shiny apps should use a unit-testing framework such as shinytest2 or shinytest to test that interactive interfaces behave as expected.\nFor testing your functions creating plots, we suggest using vdiffr, an extension of the testthat package that relies on testthat snapshot tests.\nIf your package interacts with web resources (web APIs and other sources of data on the web) you might find the HTTP testing in R book by Scott Chamberlain and Maëlle Salmon relevant. Packages helping with HTTP testing (corresponding HTTP clients):\n\nhttptest2 (httr2);\nhttptest (httr);\nvcr (httr, crul);\nwebfakes (httr, httr2, crul, curl).\n\ntestthat has a function skip_on_cran() that you can use to not run tests on CRAN. We recommend using this on all functions that are API calls since they are quite likely to fail on CRAN. These tests should still run on continuous integration. Note that from testthat 3.1.2 skip_if_offline() automatically calls skip_on_cran(). More info on CRAN preparedness for API wrappers.\nIf your package interacts with a database you might find dittodb useful.\nOnce you’ve set up continuous integration (CI), use your package’s code coverage report (cf this section of our book) to identify untested lines, and to add further tests.\nEven if you use continuous integration, we recommend that you run tests locally prior to submitting your package (you might need to set Sys.setenv(NOT_CRAN=\"true\")).",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Packaging Guide</span>"
    ]
  },
  {
    "objectID": "pkg_building.html#examples",
    "href": "pkg_building.html#examples",
    "title": "1  Packaging Guide",
    "section": "1.12 Examples",
    "text": "1.12 Examples\n\nInclude extensive examples in the documentation. In addition to demonstrating how to use the package, these can act as an easy way to test package functionality before there are proper tests. However, keep in mind we require tests in contributed packages.\nYou can run examples with devtools::run_examples(). Note that when you run R CMD CHECK or equivalent (e.g., devtools::check()) your examples that are not wrapped in \\dontrun{} or \\donttest{} are run. Refer to the summary table in roxygen2 docs.\nTo safeguard examples (e.g. requiring authentication) to be run on CRAN you need to use \\dontrun{}. However, for a first submission, CRAN won’t let you have all examples escaped. In this case, you might add some small toy examples, or wrap the example code in try(). Also refer to the @exampleIf tag present, at the time of writing, in the roxygen2 development version.\nIn addition to running examples locally on your own computer, we strongly advise that you run examples on one of the continuous integration systems. Again, examples that are not wrapped in \\dontrun{} or \\donttest{} will be run, but for those that are you can configure your continuous integration builds to run them via R CMD check arguments --run-dontrun and/or --run-donttest.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Packaging Guide</span>"
    ]
  },
  {
    "objectID": "pkg_building.html#pkgdependencies",
    "href": "pkg_building.html#pkgdependencies",
    "title": "1  Packaging Guide",
    "section": "1.13 Package dependencies",
    "text": "1.13 Package dependencies\n\nIt is very generally better to have fewer dependencies.\nConsider the trade-offs involved in relying on a package as a dependency. On one hand, using dependencies reduces coding effort, and can build on useful functionality developed by others, especially if the dependency performs complex tasks, is high-performance, and/or is well vetted and tested. On the other hand, having many dependencies places a burden on the maintainer to keep up with changes in those packages, at risk to your package’s long-term sustainability. It also increases installation time and size, primarily a consideration on your and others’ development cycle, and in automated build systems. “Heavy” packages - those with many dependencies themselves, and those with large amounts of compiled code - increase this cost.\nApproaches to reducing dependencies include:\n\nSmall, simple functions from a dependency package may be better copied into your own package if the dependency is used only for a few functions in an otherwise large or heavy dependency. (See Authorship section above for how to acknowledge original authors of copied code.) On the other hand, complex functions with many edge cases (e.g. parsers) require considerable testing and vetting.\n\nA common example of this is in returning tidyverse-style “tibbles” from package functions that provide data. One can avoid the modestly heavy tibble package dependency by returning a tibble created by modifying a data frame like so:\nclass(df) &lt;- c(\"tbl_df\", \"tbl\", \"data.frame\") \n(Note that this approach should be very carefully used and tested, especially as it may break expected behaviour of re-classed objects.)\n\nEnsure that you are using the package where the function is defined, rather than one where it is re-exported. For instance many functions in devtools can be found in smaller specialty packages such as sessioninfo. The %&gt;% function should be imported from magrittr, where it is defined, rather than the heavier dplyr, which re-exports it.\nSome dependencies are preferred because they provide easier to interpret function names and syntax than base R solutions. If this is the primary reason for using a function in a heavy dependency, consider wrapping the base R approach in a nicely-named internal function in your package. See e.g. the rlang R script providing functions with a syntax similar to purrr functions.\nIf dependencies have overlapping functionality, see if you can rely on only one.\nMore dependency-management tips can be found in the chapter “Dependencies: Mindset and Background” of the R packages book and in a post by Scott Chamberlain.\n\nUse Imports instead of Depends for packages providing functions from other packages. Make sure to list packages used for testing (testthat), and documentation (knitr, roxygen2) in your Suggests section of package dependencies (if you use usethis for adding testing infrastructure via usethis::use_testthat() or a vignette via usethis::use_vignette(), the necessary packages will be added to DESCRIPTION). If you use any package in the examples or tests of your package, make sure to list it in Suggests, if not already listed in Imports.\nCheck the development status of any dependencies you add. Especially for packages hosted on GitHub, it is very useful to check that they are actively maintained, and that they have not been archived.\nIf your (not Bioconductor) package depends on Bioconductor packages, make sure the installation instructions in the README and vignette are clear enough even for an user who is not familiar with the Bioconductor release cycle.\n\nShould the user use BiocManager (recommended)? Document this.\nIs the automatic installation of Bioconductor packages by install.packages() enough? In that case, mention that the user needs to run setRepositories() if they haven’t set the necessary Bioconductor repositories yet.\nIf your package depends on Bioconductor after a certain version, mention it in DESCRIPTION and the installation instructions.\n\nSpecifying minimum dependencies (e.g. glue (&gt;= 1.3.0) instead of just glue) should be a conscious choice. If you know for a fact that your package will break below a certain dependency version, specify it explicitly. But if you don’t, then no need to specify a minimum dependency. In that case when a user reports a bug which is explicitly related to an older version of a dependency then address it then. An example of bad practice would be for a developer to consider the versions of their current state of dependencies to be the minimal version. That would needlessly force everyone to upgrade (causing issues with other packages) when there is no good reason behind that version choice.\nFor most cases where you must expose functions from dependencies to the user, you should import and re-export those individual functions rather than listing them in the Depends fields. For instance, if functions in your package produce raster objects, you might re-export only printing and plotting functions from the raster package.\nIf your package uses a system dependency, you should\n\nIndicate it in DESCRIPTION;\nCheck that it is listed by sysreqsdb to allow automatic tools to install it, and submit a contribution if not;\nCheck for it in a configure script (example) and give a helpful error message if it cannot be found (example). configure scripts can be challenging as they often require hacky solutions to make diverse system dependencies work across systems. Use examples (more here) as a starting point but note that it is common to encounter bugs and edge cases and often violate CRAN policies. Do not hesitate to ask for help on our forum.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Packaging Guide</span>"
    ]
  },
  {
    "objectID": "pkg_building.html#recommended-scaffolding",
    "href": "pkg_building.html#recommended-scaffolding",
    "title": "1  Packaging Guide",
    "section": "1.14 Recommended scaffolding",
    "text": "1.14 Recommended scaffolding\n\nFor HTTP requests we recommend using httr2, httr, curl, or crul over RCurl. If you like low-level clients for HTTP, curl is best, whereas httr2, httr and crul are better for higher-level access.\nFor parsing JSON, use jsonlite instead of rjson or RJSONIO.\nFor parsing, creating, and manipulating XML, we strongly recommend xml2 for most cases. You can refer to Daniel Nüst’s notes about migration from XML to xml2.\nFor spatial data, the sp package should be considered deprecated in favor of sf, and the packages rgdal, maptools and rgeos were retired in 2023. We recommend use of the spatial suites developed by the r-spatial and rspatial communities. See this GitHub issue for relevant discussions.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Packaging Guide</span>"
    ]
  },
  {
    "objectID": "pkg_building.html#version-control",
    "href": "pkg_building.html#version-control",
    "title": "1  Packaging Guide",
    "section": "1.15 Version Control",
    "text": "1.15 Version Control\n\nYour package source files have to be under version control, more specifically tracked with Git. You might find the gert package relevant, as well as some of usethis Git/GitHub related functionality; you can however use git as you want.\nThe default branch name should not be master, as this can be offensive to some people. Refer to the statement of the Git project and the Software Freedom Conservancy for more context. It is general practice to name a default branch main, although other names may also be used. See the tidyverse blog post “Renaming the default branch” to learn about usethis functionality to help with renaming default branches.\nMake sure to list “scrap” such as .DS_Store files in .gitignore. You might find the usethis::git_vaccinate() function, and the gitignore package relevant.\nA later section of this book contains some git workflow tips.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Packaging Guide</span>"
    ]
  },
  {
    "objectID": "pkg_building.html#crangotchas",
    "href": "pkg_building.html#crangotchas",
    "title": "1  Packaging Guide",
    "section": "1.16 Miscellaneous CRAN gotchas",
    "text": "1.16 Miscellaneous CRAN gotchas\nThis is a collection of CRAN gotchas that are worth avoiding at the outset.\n\nMake sure your package title is in Title Case.\nDo not put a period on the end of your title.\nDo not put ‘in R’ or ‘with R’ in your title as this is obvious from packages hosted on CRAN. If you would like this information to be displayed on your website nonetheless, check the pkgdown documentation to learn how to override this.\nAvoid starting the description with the package name or “This package …”.\nMake sure you include links to websites if you wrap a web API, scrape data from a site, etc. in the Description field of your DESCRIPTION file. URLs should be enclosed in angle brackets, e.g. &lt;https://www.r-project.org&gt;.\nIn both the Title and Description fields, the names of packages or other external software must be quoted using single quotes (e.g., ‘Rcpp’ Integration for the ‘Armadillo’ Templated Linear Algebra Library).\nAvoid long running tests and examples. Consider testthat::skip_on_cran in tests to skip things that take a long time but still test them locally and on continuous integration.\nInclude top-level files such as paper.md, continuous integration configuration files, in your .Rbuildignore file.\n\nFor further gotchas, refer to the collaborative list maintained by ThinkR, “Prepare for CRAN”.\n\n1.16.1 CRAN checks\nOnce your package is on CRAN, it will be regularly checked on different platforms. Failures of such checks, when not false positives, can lead to the CRAN team’s reaching out. You can monitor the state of the CRAN checks via\n\nthe foghorn package.\nthe CRAN checks badges.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Packaging Guide</span>"
    ]
  },
  {
    "objectID": "pkg_building.html#bioconductor-gotchas",
    "href": "pkg_building.html#bioconductor-gotchas",
    "title": "1  Packaging Guide",
    "section": "1.17 Bioconductor gotchas",
    "text": "1.17 Bioconductor gotchas\nIf you intend your package to be submitted to, or if your package is on, Bioconductor, refer to Bioconductor packaging guidelines and the updated developer book.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Packaging Guide</span>"
    ]
  },
  {
    "objectID": "pkg_building.html#further-guidance",
    "href": "pkg_building.html#further-guidance",
    "title": "1  Packaging Guide",
    "section": "1.18 Further guidance",
    "text": "1.18 Further guidance\n\nIf you are submitting a package to rOpenSci via the software-review repo, you can direct further questions to the rOpenSci team in the issue tracker, or in our discussion forum.\nRead the authors guide.\nRead, incorporate, and act on advice from the Collaboration Guide chapter.\n\n\n1.18.1 Learning about package development\n\n1.18.1.1 Books\n\nHadley Wickham and Jenny Bryan’s R packages book is an excellent, readable resource on package development which is available for free online (and can be bought in print).\nWriting R Extensions is the canonical, usually most up-to-date, reference for creating R packages.\nMastering Software Development in R by Roger D. Peng, Sean Kross, and Brooke Anderson.\nAdvanced R by Hadley Wickham\nTidyverse style guide\nTidyverse design guide (WIP) and the accompanying newsletter.\n\n\n\n1.18.1.2 Tutorials\n\nYour first R package in 1 hour by Shannon Pileggi.\nthis workflow description by Emil Hvitfeldt.\nThis pictorial by Matthew J Denny.\n\n\n\n1.18.1.3 Blogs\n\nR-hub blog.\nSome posts of the rOpenSci blog e.g. “How to precompute package vignettes or pkgdown articles”.\nPackage Development Corner section of rOpenSci newsletter.\nSome posts of the tidyverse blog e.g. “Upgrading to testthat edition 3”.\n\n\n\n1.18.1.4 MOOCs\nThere is a Coursera specialization corresponding to the book by Roger Peng, Sean Kross and Brooke Anderson, with a course specifically about R packages.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Packaging Guide</span>"
    ]
  },
  {
    "objectID": "pkg_ci.html",
    "href": "pkg_ci.html",
    "title": "2  Continuous Integration Best Practices",
    "section": "",
    "text": "2.1 What is continuous integration (CI)?\nContinuous integration automatically runs tests on software. In the case of rOpenSci, CI practically means that a set of tests will be automatically run via GitHub, every time you make a commit or pull request to GitHub.\nCI automates the running of general package checks such as R CMD check, see testing. It is possible to set up CI before your tests are written, then CI will run the tests as you commit them to the repository.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Continuous Integration Best Practices</span>"
    ]
  },
  {
    "objectID": "pkg_ci.html#why-use-continuous-integration-ci",
    "href": "pkg_ci.html#why-use-continuous-integration-ci",
    "title": "2  Continuous Integration Best Practices",
    "section": "2.2 Why use continuous integration (CI)?",
    "text": "2.2 Why use continuous integration (CI)?\nAll rOpenSci packages must use one form of continuous integration. This ensures that all commits, pull requests and new branches are run through R CMD check. The results of all tests are displayed on the pull request page on GitHub, providing another layer of information about problems and protection against breaking your package before merging changes. rOpenSci packages’ continuous integration must also be linked to a code coverage service, indicating how many lines are covered by unit tests.\nBoth test status and code coverage should be reported via badges in your package README.\nR packages should have CI for all operating systems (Linux, Mac OSX, Windows) when they contain:\n\nCompiled code\nJava dependencies\nDependencies on other languages\nPackages with system calls\nText munging such as getting people’s names (in order to find encoding issues).\nAnything with file system / path calls\n\nIn case of any doubt regarding the applicability of these criteria to your package, it’s better to add CI for all operating systems. Most CI services’ standard setups for R packages allow this with not much hassle.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Continuous Integration Best Practices</span>"
    ]
  },
  {
    "objectID": "pkg_ci.html#whichci",
    "href": "pkg_ci.html#whichci",
    "title": "2  Continuous Integration Best Practices",
    "section": "2.3 Which continuous integration service(s)?",
    "text": "2.3 Which continuous integration service(s)?\nThere are a number of continuous integration services, including standalone services (CircleCI, AppVeyor), and others integrated into code hosting or related services (GitHub Actions, GitLab, AWS Code Pipeline). Different services support different operating system configurations.\nGitHub Actions is a convenient option for many R developers who already use GitHub as it is integrated into the platform and supports all needed operating Systems. There are actions supported for the R ecosystem, as well as first-class support in the {usethis} package. All packages submitted to rOpenSci for peer review are checked by our own pkgcheck system, described further in the Guide for Authors. These checks are also provided as a GitHub Action in the ropensci-review-tools/pkgcheck-action repository. Package authors are encouraged to use that action to confirm prior to submission that a package passes all of our checks. See our blog post for more information.\nusethis supports CI setup for other systems, though these functions are soft-deprecated. rOpenSci also supports the circle package, which aids in setting up CircleCI pipelines, and the tic package for building more complicated CI pipelines.\n\n2.3.0.1 Testing using different versions of R\nWe require that rOpenSci packages are tested against the latest, previous and development versions of R to ensure both backwards and forwards compatibility with base R.\nDetails of how to run tests/checks using different versions of R locally can be found in the R-hub vignette on running Local Linux checks with Docker.\nYou can fine tune the deployment of tests with each version by using a testing matrix.\nIf you develop a package depending on or intended for Bioconductor, you might find biocthis relevant.\n\n\n2.3.0.2 Minimizing build times on CI\nYou can use these tips to minimize build time on CI:\n\nCache installation of packages. The default r-lib/actions workflows do this.\n\n\n\n2.3.0.3 System dependencies\nYou might find Hugo Gruson’s post System Dependencies in R Packages & Automatic Testing useful.\n\n\n2.3.1 Travis CI (Linux and Mac OSX)\nWe recommend moving away from Travis.\n\n\n2.3.2 AppVeyor CI (Windows)\nFor continuous integration on Windows, see R + AppVeyor. Set it up using usethis::use_appveyor().\nHere are tips to minimize AppVeyor build time:\n\nCache installation of packages. Example in a config file. It’ll already be in the config file if you set AppVeyor CI up using usethis::use_appveyor().\nEnable rolling builds.\n\nWe no longer transfer AppVeyor projects to rOpenSci AppVeyor account so after transfer of your repo to rOpenSci’s “ropensci” GitHub organization the badge will be [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/github/ropensci/pkgname?branch=master&svg=true)](https://ci.appveyor.com/project/individualaccount/pkgname).\n\n\n2.3.3 Circle CI (Linux and Mac OSX)\nCircle CI is used, for example, by rOpenSci package bomrang as a continuous integration service.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Continuous Integration Best Practices</span>"
    ]
  },
  {
    "objectID": "pkg_ci.html#coverage",
    "href": "pkg_ci.html#coverage",
    "title": "2  Continuous Integration Best Practices",
    "section": "2.4 Test coverage",
    "text": "2.4 Test coverage\nContinuous integration should also include reporting of test coverage via a testing service such as Codecov or Coveralls.\nWe recommend using Codecov. To activate Codecov for your repo, run usethis::use_github_action(\"test-coverage\") to create a file .github/workflows/test-coverage.yaml. You also need to give Codecov access to your GitHub repository, see Codecov quick start guide for how to set up access. Then add a Codecov status badge to the top of your README.md, see Codecov status badges.\nCurrently, Codecov has access to all rOpenSci GitHub repositories by default. If your repository is transferred to the rOpenSci GitHub organization, Codecov access should transfer automatically. You will need to update the URL of the badge to point to the rOpenSci-hosted repository.\nFor more details, see the README for the covr package for instructions, as well as usethis::use_coverage() and usethis::use_github_action().\nIf you run coverage on several CI services the results will be merged.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Continuous Integration Best Practices</span>"
    ]
  },
  {
    "objectID": "pkg_ci.html#even-more-ci-open-cpu",
    "href": "pkg_ci.html#even-more-ci-open-cpu",
    "title": "2  Continuous Integration Best Practices",
    "section": "2.5 Even more CI: OpenCPU",
    "text": "2.5 Even more CI: OpenCPU\nAfter transfer to rOpenSci’s “ropensci” GitHub organization, each push to the repo will be built on OpenCPU and the person committing will receive a notification email. This is an additional CI service for package authors that allows for R functions in packages to be called remotely via https://ropensci.ocpu.io/ using the opencpu API. For more details about this service, consult the OpenCPU help page that also indicates where to ask questions.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Continuous Integration Best Practices</span>"
    ]
  },
  {
    "objectID": "pkg_ci.html#rodocsci",
    "href": "pkg_ci.html#rodocsci",
    "title": "2  Continuous Integration Best Practices",
    "section": "2.6 Even more CI: rOpenSci docs",
    "text": "2.6 Even more CI: rOpenSci docs\nAfter transfer to rOpenSci’s “ropensci” GitHub organization, a pkgdown website will be built for your package:\n\nFor each new commit to the default branch (checked approx once per hour).\nWhen any of the strong dependencies in the same universe updates the version number.\nOnce per month.\n\nYou can find the status of these builds at https://ropensci.r-universe.dev/ui#packages and in the commit status. The website build will use your pkgdown config file if you have one, except for the styling that will use the rotemplate package.\nIf your documentation includes code that relies on, for instance, credentials, here’s how to ensure pkgdown docs are rendered in the best possible way.\n\nFor function examples, use the examplesIf roxygen2 tag with the IN_PKGDOWN variable e.g. #' @examplesIf identical(Sys.getenv(\"IN_PKGDOWN\"), \"true\")\nFor vignettes, either pre-build if special tools/data/credentials are required which are unavailable on generic build servers (see https://ropensci.org/blog/2019/12/08/precompute-vignettes/), or use the IN_PKGDOWN variable with knitr eval option e.g.\n\nknitr::opts_chunk$set(\n  collapse = TRUE,\n  comment = \"#&gt;\",\n  eval = Sys.getenv(\"IN_PKGDOWN\") == \"true\"\n)\nExamples:\n\nexamplesIf: https://github.com/ropensci/gtexr/blob/592ac781672f07eb67e935d4155570c5960d1fdb/R/get_service_info.R#L14 (see also Docs of the roxygen2 tag: https://roxygen2.r-lib.org/articles/rd.html?q=examplesIf#examples)\nVignette, knitr eval option: https://github.com/ropensci/gtexr/blob/592ac781672f07eb67e935d4155570c5960d1fdb/vignettes/gtexr.Rmd#L16\n\nPlease report bugs, questions and feature requests about the central builds and about the template at https://github.com/ropensci-org/rotemplate/.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Continuous Integration Best Practices</span>"
    ]
  },
  {
    "objectID": "pkg_security.html",
    "href": "pkg_security.html",
    "title": "3  Package Development Security Best Practices",
    "section": "",
    "text": "3.1 Miscellaneous\nWe recommend the article Ten quick tips for staying safe online by Danielle Smalls and Greg Wilson.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Package Development Security Best Practices</span>"
    ]
  },
  {
    "objectID": "pkg_security.html#git-hub-access-security",
    "href": "pkg_security.html#git-hub-access-security",
    "title": "3  Package Development Security Best Practices",
    "section": "3.2 GitHub access security",
    "text": "3.2 GitHub access security\n\nWe recommend you secure your GitHub account with two-factor (authentication) 2FA. It is compulsory for all rOpenSci GitHub organization members and outside collaborators so make sure to enable it before your package is approved.\nWe also recommend you regularly check who has access to your package repository, and that you prune any unused access (such as from former collaborators).",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Package Development Security Best Practices</span>"
    ]
  },
  {
    "objectID": "pkg_security.html#https",
    "href": "pkg_security.html#https",
    "title": "3  Package Development Security Best Practices",
    "section": "3.3 https",
    "text": "3.3 https\n\nIf the web service your package wraps has either https or http, opt for https.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Package Development Security Best Practices</span>"
    ]
  },
  {
    "objectID": "pkg_security.html#pkgsecrets",
    "href": "pkg_security.html#pkgsecrets",
    "title": "3  Package Development Security Best Practices",
    "section": "3.4 Secrets in packages",
    "text": "3.4 Secrets in packages\nThis section contains guidance for when you develop a package interacting with a web resource requiring credentials (API keys, tokens, etc.). Also refer to the httr vignette about sharing secrets.\n\n3.4.1 Secrets in packages and user protection\nSay your package needs an API key for making requests on behalf of users of your package.\n\nIn your package documentation, guide the user so the API key doesn’t end up in the .Rhistory/script of users of your package.\n\nEncourage the use of environment variables to store the API key (or even remove the possibility to pass it as an argument to the functions?). You could link to this intro to startup files and usethis::edit_r_environ().\nOr your package could depend on, or encourage the use of, keyring to help user store variables in the specific OS’ credential stores (more secure than .Renviron): i.e. you’d create a function for setting the key, and have another one for retrieving the key; or the user would write Sys.setenv(SUPERSECRETKEY = keyring::key_get(\"myservice\")) at the beginning of their script.\nDo not print the API key even in verbose mode in any message, warning, or error.\n\nIn the GitHub issue template, it should be stated not to share any credentials. If a user of your package accidentally shares credentials in an issue, make sure they’re aware of that so they can revoke the key (i.e. ask them explicitly in an answer whether they realized they shared their key).\n\n\n\n3.4.2 Secrets in packages and development\nYou’ll need to protect your secrets as you protect secrets of users, but there’s more to take into account and keep in mind.\n\n3.4.2.1 Secrets and recorded requests in tests\nIf you use vcr or httptest in tests for caching API responses, you need to make sure the recorded requests / fixtures do not contain secrets. Refer to vcr security guidance and httptest guidance “Redacting and Modifying Recorded Requests”, and inspect your recorded requests / fixtures before committing them the first time to be sure you got the setup right.\nvcr being an rOpenSci package, you can post any question you might have to rOpenSci forum.\n\n\n3.4.2.2 Share secrets with CI services\nNow, you might need to share secrets with continuous integration services.\nYou could store API keys as environment variables / secrets, referring to the docs of the CI service.\nFor more details and workflow advice, refer to the gargle article “Managing tokens securely” and the security chapter of the HTTP testing in R book.\nDocument the steps you made in CONTRIBUTING.md so you, or say a new maintainer, can remember how to do that next time.\n\n\n3.4.2.3 Secrets and collaborations\nWhat about pull requests from external contributors? On GitHub for instance, secrets are only available for GitHub Actions for pull requests started from the repository itself, not from fork. Tests using your secrets will fail unless you use some sort of mocked/cached response, so you might want to skip them depending on the context. For instance, in your CI account you could create an environment variable called THIS_IS_ME and then skip tests based on the presence of this variable. This obviously means the PR checks by the CI are not exhaustive, so you’ll need to check out the PR locally to run all tests.\nDocument the behavior of your package for external PRs in CONTRIBUTING.md for the sake of people making PRs and of people reviewing them (you in a few weeks, and other authors of the package).\n\n\n\n3.4.3 Secrets and CRAN\nOn CRAN, skip any tests (skip_on_cran()) and examples (dontrun) requiring credentials.\nPrecompute vignettes requiring credentials.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Package Development Security Best Practices</span>"
    ]
  },
  {
    "objectID": "pkg_security.html#furthersecreading",
    "href": "pkg_security.html#furthersecreading",
    "title": "3  Package Development Security Best Practices",
    "section": "3.5 Further reading",
    "text": "3.5 Further reading\nUseful security resources:\n\nrOpenSci community call “Security for R” (recording, slides, etc. see in particular the list of resources);\nthe security-related projects of unconf18;\ngargle article “Managing tokens securely”",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Package Development Security Best Practices</span>"
    ]
  },
  {
    "objectID": "softwarereview_intro.html",
    "href": "softwarereview_intro.html",
    "title": "4  Software Peer Review, Why? What?",
    "section": "",
    "text": "4.1 What is rOpenSci Software Peer Review?\nrOpenSci’s suite of packages is partly contributed by staff members and partly contributed by community members, which means the suite stems from a great diversity of skills and experience of developers. How to ensure quality for the whole set? That’s where software peer review comes into play: packages contributed by the community undergo a transparent, constructive, non adversarial and open review process. For that process relying mostly on volunteer work, associate editors manage the incoming flow and ensure progress of submissions; authors create, submit and improve their package; reviewers, two per submission, examine the software code and user experience. This blog post written by rOpenSci editors is a good introduction to rOpenSci software peer review Other blog posts about review itself and reviewed packages can be found via the “software-peer-review” tag on rOpenSci blog.\nYou can recognize rOpenSci packages that have been peer-reviewed via a green “peer-reviewed” badge in their README, linking to their reviews (cf this example); and via a blue comment icon near their description on rOpenSci packages page, also linking to the reviews.\nTechnically, we make the most of GitHub infrastructure: each package review process is an issue in the ropensci/software-review GitHub repository. For instance, read the review thread of the ropenaq package: the process is an ongoing conversation until acceptance of the package, with two external reviews as important milestones. Furthermore, we use GitHub features such as the use of issue templates (as submission templates), and labelling which we use to track progress of submissions (from editor checks to approval).",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Software Peer Review, Why? What?</span>"
    ]
  },
  {
    "objectID": "softwarereview_intro.html#whysubmit",
    "href": "softwarereview_intro.html#whysubmit",
    "title": "4  Software Peer Review, Why? What?",
    "section": "4.2 Why submit your package to rOpenSci?",
    "text": "4.2 Why submit your package to rOpenSci?\n\nFirst, and foremost, we hope you submit your package for review because you value the feedback. We aim to provide useful feedback to package authors and for our review process to be open, non-adversarial, and focused on improving software quality.\nOnce aboard, your package will continue to receive support from rOpenSci members. You’ll retain ownership and control of your package, but we can help with ongoing maintenance issues such as those associated with updates to R and dependencies and CRAN policies.\nrOpenSci will promote your package through our webpage, blog, and social media (like Mastodon and LinkedIn). Packages in our suite also get a documentation website that is automatically built and deployed after each push.\nrOpenSci packages can be cross-listed with other repositories such as CRAN and BioConductor.\nrOpenSci packages that are in scope for the Journal of Open-Source Software and add the necessary accompanying short paper, would, at the discretion of JOSS editors, benefit from a fast-tracked review process.\nIf you write one, rOpenSci will promote gitbooks related to your package: the source of such books can be transferred to the ropensci-books GitHub organisation for books to be listed at books.ropensci.org.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Software Peer Review, Why? What?</span>"
    ]
  },
  {
    "objectID": "softwarereview_intro.html#whyreview",
    "href": "softwarereview_intro.html#whyreview",
    "title": "4  Software Peer Review, Why? What?",
    "section": "4.3 Why review packages for rOpenSci?",
    "text": "4.3 Why review packages for rOpenSci?\n\nAs in any peer-review process, we hope you choose to review to give back to the rOpenSci and scientific communities. Our mission to expand access to scientific data and promote a culture of reproducible research is only possible through the volunteer efforts of community members like you.\nReview is a two-way conversation. By reviewing packages, you’ll have the chance to continue to learn development practices from authors and other reviewers.\nThe open nature of our review process allows you to network and meet colleagues and collaborators through the review process. Our community is friendly and filled with supportive members expert in R development and many other areas of science and scientific computing.\nTo volunteer to be one of our reviewers, fill out this short form providing your contact information and areas of expertise. We are always looking for more reviewers with both general package-writing experience and domain expertise in the fields where packages are used.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Software Peer Review, Why? What?</span>"
    ]
  },
  {
    "objectID": "softwarereview_intro.html#whyopen",
    "href": "softwarereview_intro.html#whyopen",
    "title": "4  Software Peer Review, Why? What?",
    "section": "4.4 Why are reviews open?",
    "text": "4.4 Why are reviews open?\nOur reviewing threads are public. Authors, reviewers, and editors all know each other’s identities. The broader community can view or even participate in the conversation as it happens. This provides an incentive to be thorough and provide non-adversarial, constructive reviews. Both authors and reviewers report that they enjoy and learn more from this open and direct exchange. It also has the benefit of building a community. Participants have the opportunity to meaningfully network with new peers, and new collaborations have emerged via ideas spawned during the review process.\nWe are aware that open systems can have drawbacks. For instance, in traditional academic review, double-blind peer review can increase representation of female authors, suggesting bias in non-blind reviews. It is also possible reviewers are less critical in open review. However, we posit that the openness of the review conversation provides a check on review quality and bias; it’s harder to inject unsupported or subjective comments in public and without the cover of anonymity. Ultimately, we believe that having direct and public communication between authors and reviewers improves the quality and fairness of reviews.\nFurthermore, authors and reviewers can contact the editors privately if they have any doubts or questions.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Software Peer Review, Why? What?</span>"
    ]
  },
  {
    "objectID": "softwarereview_intro.html#how-will-users-know-a-package-has-been-reviewed",
    "href": "softwarereview_intro.html#how-will-users-know-a-package-has-been-reviewed",
    "title": "4  Software Peer Review, Why? What?",
    "section": "4.5 How will users know a package has been reviewed?",
    "text": "4.5 How will users know a package has been reviewed?\n\nYour package README will feature a peer-review badge linking to the software review thread.\nYour package will get a docs.ropensci.org docs website that you can link from DESCRIPTION.\nIf desired, your package repo may be transferred to the rOpenSci organization.\nIf reviewers agree to be listed in DESCRIPTION, their metadata will mention the review.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Software Peer Review, Why? What?</span>"
    ]
  },
  {
    "objectID": "softwarereview_intro.html#editors-and-reviewers",
    "href": "softwarereview_intro.html#editors-and-reviewers",
    "title": "4  Software Peer Review, Why? What?",
    "section": "4.6 Editors and reviewers",
    "text": "4.6 Editors and reviewers\nrOpenSci’s Software Peer Review process is run by our team of dedicated editors and reviewers. Information on the current team, and the current status of software peer review, can be seen on our interactive dashboard.\n\n4.6.1 Editor-in-Chief\nWe rotate our Editor-in-Chief, generally every three months. Our current Editor-in-Chief is Laura DeCicco.\n\n\n4.6.2 Editorial team\nOur current team of editors for software peer-review includes:\n\nJouni Helske, University of Jyväskylä, Finland;\nToby Hocking, Northern Arizona University, USA;\nJeff Hollister, US Environmental Protection Agency;\nRebecca Killick, Lancaster University, U.K.;\nAnna Krystalli;\nMauro Lepore, 2 Degrees Investing Initiative;\nBeatriz Milz, University of Sao Paulo - Institute of Energy and Environment;\nMark Padgham;\nEmily Riederer, Capital One;\nFrancisco Rodriguez-Sanchez, Universidad de Sevilla, Spain;\nNoam Ross, rOpenSci and EcoHealth Alliance;\nMaëlle Salmon, rOpenSci;\nMargaret Siple, National Oceanic and Atmospheric Administration;\nAdam Sparks, Curtin University;\nEmi Tanaka, Australian National University.\n\n\n\n4.6.3 Reviewers and former editors\nWe are grateful to the following individuals who have offered up their time and expertise to review packages submitted to rOpenSci.\nEm Markowitz (NOAA) · Lorena Abad · Sam Albers · Toph Allen · Kaique dos S. Alves · Alison Appling · Zebulun Arendsee · Taylor Arnold · Al-Ahmadgaid B. Asaad · Dean Attali · Mara Averick · Suzan Baert · James Balamuta · Vikram Baliga · David Bapst · Joëlle Barido-Sottani · Allison Barner · Cale Basaraba · John Baumgartner · Marcus Beck · Gabriel Becker · Jason Becker · Salvador Jesus Fernandez Bejarano · Dom Bennett · Ken Benoit · Aaron Berdanier · Fred Boehm · Carl Boettiger · Will Bolton · Ben Bond-Lamberty · Anne-Sophie Bonnet-Lebrun · Alison Boyer · Abby Bratt · François Briatte · Eric Brown · Julien Brun · Jenny Bryan · Lukas Burk · Lorenzo Busetto · Kyle F Butts · Maria Paula Caldas · Mario Gavidia Calderón · Carlos Cámara-Menoyo · Brad Cannell · Paul CARTERON · Joaquin Cavieres · Kevin Cazelles · Cathy Chamberlin · Jennifer Chang · Pierre Chausse · Jorge Cimentada · Nicholas Clark · Chase Clark · Jon Clayden · Dena Jane Clink · Will Cornwell · Nic Crane · Enrico Crema · Verónica Cruz-Alonso · Ildiko Czeller · Tad Dallas · Kauê de Sousa · Laura DeCicco · Christophe Dervieux · Amanda Dobbyn · Jasmine Dumas · Christophe Dutang · Remko Duursma · Mark Edmondson · Paul Egeler · Evan Eskew · Harry Eslick · Denisse Fierro-Arcos · Alexander Fischer · Kim Fitter · Robert M Flight · Sydney Foks · Air Forbes · Stephen Formel · Zachary Stephen Longiaru Foster · Auriel Fournier · Kaija Gahm · Zach Gajewski · Carl Ganz · Duncan Garmonsway · Jan Laurens Geffert · Sharla Gelfand · Monica Gerber · Alex Gibberd · Duncan Gillespie · David Gohel · A. Cagri gokcek · Guadalupe Gonzalez · Rohit Goswami · Laura Graham · João Granja-Correia · Charles Gray · Matthias Grenié · Corinna Gries · Hugo Gruson · Ernest Guevarra · W Kyle Hamilton · Ivan Hanigan · Jeffrey Hanson · Liz Hare · Jon Harmon · Rayna Harris · Ted Hart · Nujcharee Haswell · Verena Haunschmid · Stephanie Hazlitt · Andrew Heiss · Max Held · Anna Hepworth · Bea Hernandez · Jim Hester · Peter Hickey · Tan Ho · Roel Hogervorst · Kelly Hondula · Allison Horst · Sean Hughes · James Hunter · Brandon Hurr · Ger Inberg · Christopher Jackson · Najko Jahn · Tamora D James · Veronica Jimenez-Jacinto · Mike Johnson · Will Jones · Max Joseph · Megha Joshi · Krunoslav Juraic · Soumya Kalra · Zhian N. Kamvar · Michael Kane · Andee Kaplan · Tinula Kariyawasam · Hazel Kavılı · Ella Kaye · Jonathan Keane · Christopher T. Kenny · Os Keyes · Eunseop Kim · Aaron A. King · Michael Koontz · Alexandros Kouretsis · Bianca Kramer · Will Landau · Sam Lapp · Erin LeDell · Thomas Leeper · Alex Leith · Sam Levin · Lisa Levinson · Stephanie Locke · Marion Louveaux · Robin Lovelace · Julia Stewart Lowndes · Adam Loy · Tim Lucas · Muralidhar, M.A. · Andrew MacDonald · Jesse Maegan · Mike Mahoney · Tristan Mahr · Yohann Mansiaux · Paula Andrea Martinez · Anthony Martinez · Joao Martins · Ben Marwick · Claire Mason · Tom Matthews · Miles McBain · Lucy D’Agostino McGowan · Amelia McNamara · Elaine McVey · Bryce Mecum · Nolwenn Le Meur · François Michonneau · Mario Miguel · David L Miller · Helen Miller · Jessica Minnier · Priscilla Minotti · Nichole Monhait · Kelsey Montgomery · Ronny A. Hernández Mora · Natalia Morandeira · George Moroz · Ross Mounce · Athanasia Monika Mowinckel · Lincoln Mullen · Matt Mulvahill · Maria Victoria Munafó · David Neuzerling · Dillon Niederhut · Joel Nitta · Rory Nolan · Kari Norman · Jakub Nowosad · Matt Nunes · Daniel Nüst · Lauren O’Brien · Joseph O’Brien · Paul Oldham · Samantha Oliver · Dan Olner · Jeroen Ooms · Victor Ordu · Luis Osorio · Philipp Ottolinger · Marina Papadopoulou · Edzer Pebesma · Thomas Lin Pedersen · Antonio J. Pérez-Luque · Marcelo S. Perlin · Rafael Pilliard-Hellwig · July Pilowsky · Rodrigo Pires · Lindsay Platt · Nicholas Potter · Joanne Potts · Josep Pueyo-Ros · Etienne Racine · Manuel Ramon · Nistara Randhawa · David Ranzolin · Quentin Read · Nicola Rennie · Neal Richardson · tyler rinker · Emily Robinson · David Robinson · Alec Robitaille · Sam Rogers · Julia Romanowska · Xavier Rotllan-Puig · Bob Rudis · Edgar Ruiz · Kent Russel · Michael Sachs · Sheila M. Saia · Chitra M Saraswati · Alicia Schep · Klaus Schliep · Clemens Schmid · Patrick Schratz · Collin Schwantes · Marco Sciaini · Eric Scott · Heidi Seibold · David Selby · Julia Silge · Peter Slaughter · Mike Smith · Tuija Sonkkila · Øystein Sørensen · Jemma Stachelek · Aymeric Stamm · Christine Stawitz · Irene Steves · Kelly Street · Matt Strimas-Mackey · Alex Stringer · Michael Sumner · Chung-Kai Sun · Sarah Supp · phanikumar s tata · Jason Taylor · Filipe Teixeira · Christian Testa · Andy Teucher · Jennifer Thompson · Joe Thorley · Nicholas Tierney · Tiffany Timbers · Daniel Timothy · Tan Tran · Tim Trice · Sunny Tseng · Anatolii Tsyplenkov · Utku Turk · Zoë Turner · Kyle Ueyama · Ted Underwood · Adithi R. Upadhya · Kevin Ushey · Josef Uyeda · Frans van Dunné · Mauricio Vargas · Remi Vergnon · Jake Wagner · Ben Ward · Elin Waring · Rachel Warnock · Leah Wasser · David Watkins · Lukas Weber · Marc Weber · Karissa Whiting · Stefan Widgren · Anna Willoughby · Saras Windecker · Luke Winslow · David Winter · Sebastian Wójcik · Witold Wolski · Kara Woo · Marvin N. Wright · Jacob Wujciak-Jens · Bruna Wundervald · Lauren Yamane · Emily Zabor · Taras Zakharko · Sherry Zhang · Hao Zhu · Chava Zibman · Naupaka Zimmerman · Jake Zwart · Felipe · santikka · brock · kasselhingee · Bri · Flury · Vincent · eholmes · Pachá · Rich · Claudia · Jasmine · Zack · Lluís · becarioprecario · gaurav\nWe are also grateful to the following individuals who have previously served as editors.\n\nBrooke Anderson;\nScott Chamberlain, Fred Hutch Cancer Center;\nJulia Gustavsen, Agroscope;\nPaula Moraga, King Abdullah University of Science and Technology (KAUST), Saudi Arabia;\nKarthik Ram, University of California, Berkeley, rOpenSci;\nMelina Vidoni.\n\nAnd the following who have served as guest editors.\n\nLaura DeCicco;\nAna Laura Diedrichs;\nJulia Gustavsen;\nHao Zhu.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Software Peer Review, Why? What?</span>"
    ]
  },
  {
    "objectID": "softwarereview_policies.html",
    "href": "softwarereview_policies.html",
    "title": "5  Software Peer Review policies",
    "section": "",
    "text": "5.1 Review process",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Software Peer Review policies</span>"
    ]
  },
  {
    "objectID": "softwarereview_policies.html#policiesreviewprocess",
    "href": "softwarereview_policies.html#policiesreviewprocess",
    "title": "5  Software Peer Review policies",
    "section": "",
    "text": "For a package to be considered for the rOpenSci suite, package authors must initiate a request on the ropensci/software-review repository.\nPackages are reviewed for quality, fit, documentation, clarity and the review process is quite similar to a manuscript review (see our packaging guide and reviewing guide for more details). Unlike a manuscript review, this process will be an ongoing conversation.\nOnce all major issues and questions, and those addressable with reasonable effort, are resolved, the editor assigned to a package will make a decision (accept, hold, or reject). Rejections are usually done early (before the review process begins, see the aims and scope section), but in rare cases a package may also be not onboarded after review & revision. It is ultimately editor’s decision on whether or not to reject the package based on how the reviews are addressed.\nCommunication between authors, reviewers and editors will first and foremost take place on GitHub, although you can choose to contact the editor by email or Slack for some issues. When submitting a package, please make sure your GitHub notification settings make it unlikely you will miss a comment.\nThe author can choose to have their submission put on hold (editor applies the holding label). The holding status will be revisited every 3 months, and after one year the issue will be closed.\nIf the author hasn’t requested a holding label, but is simply not responding, we should close the issue within one month after the last contact intent. This intent will include a comment tagging the author, but also an email using the email address listed in the DESCRIPTION of the package which is one of the rare cases where the editor will try to contact the author by email.\nIf a submission is closed and the author wishes to re-submit, they’ll have to start a new submission. If the package is still in scope, the author will have to respond to the initial reviews before the editor starts looking for new reviewers.\n\n\n5.1.1 Publishing in other Venues\n\nWe strongly suggest submitting your package for review before publishing on CRAN or submitting a software paper describing the package to a journal. Review feedback may result in major improvements and updates to your package, including renaming and breaking changes to functions. We do not consider previous publication on CRAN or in other venues sufficient reason to not adopt reviewer or editor recommendations.\nDo not submit your package for review while it or an associated manuscript is also under review at another venue, as this may result in conflicting requests for changes.\n\n\n\n5.1.2 Conflict of interest for reviewers/editors\nFollowing criteria are meant to be a guide for what constitutes a conflict of interest for an editor or reviewer. The potential editor or reviewer has a conflict of interest if:\n\nThe potential reviewer/editor are from the same institution or institutional component (e.g., department) as any author with a major role.\nThe potential reviewer/editor has been a collaborator or has had other professional relationships with at least one person on the package who has a major role within in the past three years.\nThe potential reviewer/editor serves, or has served, as a member of the advisory board for the project under review.\nThe potential reviewer/editor would receive a direct or indirect financial benefit if the package were accepted.\nThe potential reviewer/editor has significantly contributed to a competitor project.\nThere is also a lifetime COI for the family members, business partners, and thesis student/advisor or mentor.\n\nIn the case where none of the associate editors can serve as editor, an external guest editor will be recruited.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Software Peer Review policies</span>"
    ]
  },
  {
    "objectID": "softwarereview_policies.html#aims-and-scope",
    "href": "softwarereview_policies.html#aims-and-scope",
    "title": "5  Software Peer Review policies",
    "section": "5.2 Aims and Scope",
    "text": "5.2 Aims and Scope\nrOpenSci aims to support packages that enable reproducible research and manage the data lifecycle for scientists. Packages submitted to rOpenSci should fit into one or more of the categories outlined below. Statistical software may also be submitted for peer review, for which we have a separate set of guidelines and standards. The categories below are for general, and not statistical, software, while the remainder of this chapter applies to both kinds of software. If you are unsure whether your package fits into one of the general or statistical categories, please open an issue as a pre-submission inquiry (Examples).\nAs this is a living document, these categories may change through time and not all previously onboarded packages would be in-scope today. For instance, data visualization packages are no longer in scope. While we strive to be consistent, we evaluate packages on a case-by-case basis and may make exceptions.\nNote that not all rOpenSci projects and packages are in-scope or go through peer review. Projects developed by staff or at conferences may be experimental, exploratory, address core infrastructure priorities and thus not fall into these categories. Look for the peer-review badge - see below - to identify peer-reviewed packages in the rOpenSci repository.\n\n\n\nexample of a green peer-reviewed badge\n\n\n\n5.2.1 Package categories\n\ndata retrieval: Packages for accessing and downloading data from online sources with scientific applications. Our definition of scientific applications is broad, including data storage services, journals, and other remote servers, as many data sources may be of interest to researchers. However, retrieval packages should be focused on data sources / topics, rather than services. For example a general client for Amazon Web Services data storage would not be in-scope. (Examples: rotl, gutenbergr)\ndata extraction: Packages that aid in retrieving data from unstructured sources such as text, images and PDFs, as well as parsing scientific data types and outputs from scientific equipment. Statistical/ML libraries for modelling or prediction are typically not included in this category, nor are code parsers. Trained models that act as utilities (e.g., for optical character recognition), may qualify. (Examples: tabulizer for extracting tables from PDF documents, genbankr for parsing files from GenBank, treeio for phylogentic reading in phylogentic tree files, lightr for parsing files from spectroscopic instruments))\ndata munging: Packages for processing data from formats above. This area does not include broad data manipulation tools such as reshape2 or tidyr, or tools for extracting data from R code itself. Rather, it focuses on tools for handling data in specific scientific formats generated from scientific workflows or exported from scientific instruments. (Examples: plateR for reading in data structured as plate maps for scientific instruments, or phonfieldwork for processing annotated audio files for phonics research)\ndata deposition: Packages that support deposition of data into research repositories, including data formatting and metadata generation. (Example: EML)\ndata validation and testing: Tools that enable automated validation and checking of data quality and completeness as part of scientific workflows. (Example: assertr)\nworkflow automation: Tools that automate and link together workflows, such as build systems and tools to manage continuous integration. Does not include general tools for literate programming. (e.g., R markdown extensions not under the previous topics). (Example: drake)\nversion control: Tools that facilitate the use of version control in scientific workflows. Note that this does not include all tools that interact with online version control services (e.g., GitHub), unless they fit into another category. (Example: git2rdata)\ncitation management and bibliometrics: Tools that facilitate managing references, such as for writing manuscripts, creating CVs or otherwise attributing scientific contributions, or accessing, manipulating or otherwise working with bibliometric data. (Example: RefManageR)\nscientific software wrappers: Packages that wrap non-R utility programs used for scientific research. These programs must be specific to research fields, not general computing utilities. Wrappers must be non-trivial, in that there must be significant added value above simple system() calls or bindings, whether in parsing inputs and outputs, data handling, etc. Improved installation process, or extension of compatibility to more platforms, may constitute added value if installation is complex. This does not include wrappers of other R packages or C/C++ libraries that can be included in R packages. It also does not include packages that are clients for web APIs, which must fall into one of the other categories. We strongly encourage wrapping open-source and open-licensed utilities - exceptions will be evaluated case-by-case, considering whether open-source options exist. (Examples: babette, nlrx)\nfield and laboratory reproducibility tools: Packages that improve reproducibility of real-world workflows through standardization and automation of field and lab protocols, such as sample tracking and tagging, form and data sheet generation, interfacing with laboratory equipment or information systems, and executing experimental designs. (Example: baRcodeR)\ndatabase software bindings: Bindings and wrappers for generic database APIs (Example: rrlite)\n\nIn addition, we have some specialty topics with a slightly broader scope.\n\ngeospatial data: We accept packages focused on accessing geospatial data, manipulating geospatial data, and converting between geospatial data formats. (Examples: osmplotr, tidync).\ntranslation: As part of our work in multilingual publishing, we have a special interest in packages that facilitate the translation and publication of scientific and programming resources into multiple (human) languages so they are accessible to larger and more diverse audiences. These could include interfaces to automated translation programs, frameworks for managing documentation in multiple languages, or programs accessing specialized linguistic resources. This is a new and experimental scope, so please open a pre-submission inquiry if you are interested in submitting a package in this category.\nrOpenSci internal tools: packages created and/or used by the rOpenSci team to support software peer review and other related initiatives.\n\n\n\n5.2.2 Other scope considerations\nPackages should be general in the sense that they should solve a problem as broadly as possible while maintaining a coherent user interface and code base. For instance, if several data sources use an identical API, we prefer a package that provides access to all the data sources, rather than just one.\nPackages that include interactive tools to facilitate researcher workflows (e.g., shiny apps) must have a mechanism to make the interactive workflow reproducible, such as code generation or a scriptable API.\nFor packages that are not in the scope of rOpenSci, we encourage submitting them to CRAN, BioConductor, as well as other R package development initiatives (e.g., cloudyr), and software journals such as JOSS, JSS, or the R journal, depending on the current scopes of those journals.\nNote that the packages developed internally by rOpenSci, through our events or through collaborations are not all in-scope for our Software Peer Review process.\n\n\n5.2.3 Package overlap\nrOpenSci encourages competition among packages, forking and re-implementation as they improve options of users overall. However, as we want packages in the rOpenSci suite to be our top recommendations for the tasks they perform, we aim to avoid duplication of functionality of existing R packages in any repo without significant improvements. An R package that replicates the functionality of an existing R package may be considered for inclusion in the rOpenSci suite if it significantly improves on alternatives in any repository (RO, CRAN, BioC) by being:\n\nMore open in licensing or development practices\nBroader in functionality (e.g., providing access to more data sets, providing a greater suite of functions), but not only by duplicating additional packages\nBetter in usability and performance\nActively maintained while alternatives are poorly or no longer actively maintained\n\nThese factors should be considered as a whole to determine if the package is a significant improvement. A new package would not meet this standard only by following our package guidelines while others do not, unless this leads to a significant difference in the areas above.\nWe recommend that packages highlight differences from and improvements over overlapping packages in their README and/or vignettes.\nWe encourage developers whose packages are not accepted due to overlap to still consider submittal to other repositories or journals.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Software Peer Review policies</span>"
    ]
  },
  {
    "objectID": "softwarereview_policies.html#ownership-after-softwarereview",
    "href": "softwarereview_policies.html#ownership-after-softwarereview",
    "title": "5  Software Peer Review policies",
    "section": "5.3 Package ownership and maintenance",
    "text": "5.3 Package ownership and maintenance\n\n5.3.1 Role of the rOpenSci team\nAuthors of contributed packages essentially maintain the same ownership they had prior to their package joining the rOpenSci suite. Package authors will continue to maintain and develop their software after acceptance into rOpenSci. Unless explicitly added as collaborators, the rOpenSci team will not interfere much with day to day operations. However, this team may intervene with critical bug fixes, or address urgent issues if package authors do not respond in a timely manner (see the section about maintainer responsiveness).\n\n\n5.3.2 Maintainer responsiveness\nIf package maintainers do not respond in a timely manner to requests for package fixes from CRAN or from us, we will remind the maintainer a number of times, but after 3 months (or a shorter time frame, depending on how critical the fix is) we will make the changes ourselves.\nThe above is a bit vague, so the following are a few areas of consideration.\n\nExamples where we’d want to move quickly:\n\nPackage foo is imported by one or more packages on CRAN, and foo is broken, and thus would break its reverse dependencies.\nPackage bar may not have reverse dependencies on CRAN, but is widely used, thus quickly fixing problems is of greater importance.\n\nExamples where we can wait longer:\n\nPackage hello is not on CRAN, or on CRAN, but has no reverse dependencies.\nPackage world needs some fixes. The maintainer has responded but is simply very busy with a new job, or other reason, and will attend to soon.\n\n\nWe urge package maintainers to make sure they are receiving GitHub notifications, as well as making sure emails from rOpenSci staff and CRAN maintainers are not going to their spam box. Authors of onboarded packages will be invited to the rOpenSci Slack to chat with the rOpenSci team and the greater rOpenSci community. Anyone can also discuss with the rOpenSci community on the rOpenSci discussion forum.\nShould authors abandon the maintenance of an actively used package in our suite, we will consider petitioning CRAN to transfer package maintainer status to rOpenSci.\n\n\n5.3.3 Quality commitment\nrOpenSci strives to develop and promote high quality research software. To ensure that your software meets our criteria, we review all of our submissions as part of the Software Peer Review process, and even after acceptance will continue to step in with improvements and bug fixes.\nDespite our best efforts to support contributed software, errors are the responsibility of individual maintainers. Buggy, unmaintained software may be removed from our suite at any time.\n\n\n5.3.4 Package removal\nIn the unlikely scenario that a contributor of a package requests removal of their package from the suite, we retain the right to maintain a version of the package in our suite for archival purposes.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Software Peer Review policies</span>"
    ]
  },
  {
    "objectID": "softwarereview_policies.html#ethics-data-privacy-and-human-subjects-research",
    "href": "softwarereview_policies.html#ethics-data-privacy-and-human-subjects-research",
    "title": "5  Software Peer Review policies",
    "section": "5.4 Ethics, Data Privacy and Human Subjects Research",
    "text": "5.4 Ethics, Data Privacy and Human Subjects Research\nrOpenSci packages and other tools are used for a variety of purposes, but our focus is on tools for research. We expect that tools will enable ethical use by research practitioners, who are obligated to adhere to ethical codes such as Declaration of Helsinki and The Belmont Report. Researchers bear responsibility for their use of software, but software developers must consider the ethical use of their products, and developers themselves adhere to ethical codes for computer professionals such as those expressed by IEEE and ACM. rOpenSci contributors often play the role of both researcher and developer.\nWe ask that software developers place themselves in researchers’ role and consider the requirements of an ethical workflow using authors’ software. Given the variation and degree of flux of ethical approaches for Internet-based analyses, judgment calls rather than recipes are required. The Ethical Guidelines of The Association of Internet Researchers provides a robust framework and we encourage authors, editors, and reviewers to use this in evaluating their work. In general, adherence to legal or regulatory minimum requirements may not be sufficient, though these (e.g., GDPR), may be relevant. Package authors should direct users to relevant resources for the ethical use of the software.\nSome packages, due to the nature of data they handle, may be determined by editors to require enhanced scrutiny. For these, editors may require additional (or reduced) functionality, and robust documentation, defaults, and warnings to direct users to relevant ethical practices. The following topics may merit enhanced scrutiny:\n\nVulnerable populations: Authors of packages and workflows that deal with information related to vulnerable populations bear responsibility to protect them from likely harms.\nPersonally identifiable or sensitive data: The release of personally identifiable or sensitive data is potentially harmful. This includes “reasonably re-identifiable” data - which a motivated individual could trace back to the owner or creator even if the data are anonymized. This includes both cases where identifiers (e.g., name, date of birth) are available as part of data, and also if unique pseudonyms/screen names are linked with full-text posts, through which one can link back individuals through cross-reference with other data sets.\n\nWhile the best response to ethical concerns will be context-specific, these general guidelines should be followed by packages where the challenges above arise:\n\nPackages should adhere to data source’s terms of use, as expressed in website Terms and Conditions, “robots.txt” files, privacy policies, and other relevant restrictions, and link to them prominently in package documentation. Packages should provide or document functionality to adhere to such restrictions (e.g., scrape from only allowed endpoints, use appropriate rate limiting in code, examples, or vignettes). Note that while Terms and Conditions, Privacy Policies, etc., may not provide sufficient bounds on ethical usage, they can provide an outer bound.\nA key tool in addressing the risks posed in studying vulnerable populations or using personally identifiable data is informed consent. Package authors should support users’ acquisition of informed consent when relevant. This may include providing links to data source’s preferred method of acquiring consent, contact information of data providers (e.g. forum moderators), documentation of informed consent protocols, or getting pre-approval for general uses of a package.\nNote that consent is not implicitly granted just because data are accessible. Accessible data are not necessarily public, as different persons and contexts have different normative expectations of privacy (see work by Social Data Lab).\nPackages accessing personally identifiable information should take special care to follow [security best practices][Package Development Security Best Practices] (e.g., exclusive use of secure internet protocols, strong mechanisms for storing credentials, etc.).\nPackages that access or handle personally identifiable or sensitive data should enable, document, and demonstrate workflows for de-identification, secure storage, other best practices to minimize risk of harm.\n\nAs standards for data privacy and research continue to evolve, we welcome input from authors on considerations specific to their software and supplemental documentation such as approval from university ethics review boards. These may be attached to issue threads of package submissions or pre-submission inquiries, or conveyed directly to editors if needed. General suggestions may be filed as issues in this book’s repository.\n\n5.4.1 Resources\nThe following resources may be helpful for researchers, package authors, editors and reviewers in addressing ethical questions related to privacy and research software.\n\nThe Declaration of Helsinki and The Belmont Report provide fundamental principles for ethical practice by researchers.\nSeveral organizations provide guidance on how to translate these principles into the context of internet research. These include the Ethical Guidelines of The Association of Internet Researchers, the NESH Guide to Internet Research Ethics, and BPS’ Ethics Guidelines for Internet-Mediated Research. Anabo et al (2019) provide a helpful overview of these.\nThe Social Media Lab provides a high-level overview with data on normative expectations of privacy and use on social forums.\nBechmann A., Kim J.Y. (2019) Big Data: A Focus on Social Media Research Dilemmas. In: Iphofen R. (eds) Handbook of Research Ethics and Scientific Integrity. https://doi.org/10.1007/978-3-319-76040-7_18-1\nChu, K.-H., Colditz, J., Sidani, J., Zimmer, M., & Primack, B. (2021). Re-evaluating standards of human subjects protection for sensitive health data in social media networks. Social Networks, 67, 41–46. https://dx.doi.org/10.1016/j.socnet.2019.10.010\nLomborg, S., & Bechmann, A. (2014). Using APIs for Data Collection on Social Media. The Information Society, 30(4), 256–265. https://dx.doi.org/10.1080/01972243.2014.915276\nFlick, C. (2016). Informed consent and the Facebook emotional manipulation study. Research Ethics, 12(1), 14–28. https://doi.org/10.1177/1747016115599568\nSugiura, L., Wiles, R., & Pope, C. (2017). Ethical challenges in online research: Public/private perceptions. Research Ethics, 13(3–4), 184–199. https://doi.org/10.1177/1747016116650720\nTaylor, J., & Pagliari, C. (2018). Mining social media data: How are research sponsors and researchers addressing the ethical challenges? Research Ethics, 14(2), 1–39. https://doi.org/10.1177/1747016117738559\nZimmer, M. (2010). “But the data is already public”: on the ethics of research in Facebook. Ethics and Information Technology, 12(4), 313–325. https://dx.doi.org/10.1007/s10676-010-9227-5",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Software Peer Review policies</span>"
    ]
  },
  {
    "objectID": "softwarereview_policies.html#code-of-conduct",
    "href": "softwarereview_policies.html#code-of-conduct",
    "title": "5  Software Peer Review policies",
    "section": "5.5 Code of Conduct",
    "text": "5.5 Code of Conduct\nrOpenSci’s community is our best asset. Whether you’re a regular contributor or a newcomer, we care about making this a safe place for you and we’ve got your back. We have a Code of Conduct that applies to all people participating in the rOpenSci community, including rOpenSci staff and leadership and to all modes of interaction online or in person. The Code of Conduct is maintained on the rOpenSci website.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Software Peer Review policies</span>"
    ]
  },
  {
    "objectID": "softwarereview_author.html",
    "href": "softwarereview_author.html",
    "title": "6  Guide for Authors",
    "section": "",
    "text": "6.1 Planning a Submission (or a Pre-Submission Enquiry)",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Guide for Authors</span>"
    ]
  },
  {
    "objectID": "softwarereview_author.html#planning-a-submission-or-a-pre-submission-enquiry",
    "href": "softwarereview_author.html#planning-a-submission-or-a-pre-submission-enquiry",
    "title": "6  Guide for Authors",
    "section": "",
    "text": "6.1.1 Scope\n\nConsult our policies see if your package meets our criteria for fitting into our suite and does not overlap with other packages.\n\nIf you are unsure whether a package meets our criteria, feel free to open an issue as a pre-submission inquiry to ask if the package is appropriate.\nExample response regarding overlap. Also consider adding some points about similar packages to your package documentation.\n\n\n\n\n6.1.2 Lifecycle\n\nPlease do not submit several packages at a time: we request you wait until a package has been approved before you submit another one.\nDo you expect to maintain your package for at least 2 years, or to be able to identify a new maintainer?\nPlease consider the best time in your package’s development to submit. Your package should be sufficiently mature so that reviewers are able to review all essential aspects, but keep in mind that review may result in major changes.\n\nWe strongly suggest submitting your package for review before publishing on CRAN or submitting a software paper describing the package to a journal. Review feedback may result in major improvements and updates to your package, including renaming and breaking changes to functions.\nDo not submit your package for review while it or an associated manuscript is also under review at another venue, as this may result in conflicting requests for changes.\n\nPlease also consider the time and effort needed to respond to reviews: think about your availability or that of your collaborators in the next weeks and months following a submission. Note that reviewers are volunteers, and we ask that you respect their time and effort by responding in a timely and respectful manner.\nIf you use repostatus.org badges (which we recommend), submit when you’re ready to get an Active instead of WIP badge. Similarly, if you use lifecycle badges, submission should happen when the package is Stable.\nYour package will continue to evolve after review, the chapter on Package evolution provides guidance about the topic.\n\n\n\n6.1.3 Documentation\n\nFor any submission or pre-submission inquiry the README of your package should provide enough information about your package (goals, usage, similar packages) for the editors to assess its scope without having to install the package. Even better, set up a pkgdown website for allowing more detailed assessment of functionality online.\n\nAt the submission stage, all major functions should be stable enough to be fully documented and tested; the README should make a strong case for the package.\nYour README file should strive to explain your package’s functionality and aims, assuming readers have little to no domain knowledge. All technical tems, including references to other software, should be clarified.\n\nYour package will continue to evolve after review, the chapter on Package evolution provides guidance about the topic.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Guide for Authors</span>"
    ]
  },
  {
    "objectID": "softwarereview_author.html#preparing-for-submission",
    "href": "softwarereview_author.html#preparing-for-submission",
    "title": "6  Guide for Authors",
    "section": "6.2 Preparing for Submission",
    "text": "6.2 Preparing for Submission\n\n6.2.1 Asking for help\n\nFeel free to ask any questions about the process, or your specific package, in our Discussion Forum.\n\n\n\n6.2.2 Guidelines\n\nRead and follow our packaging style guide, reviewer’s guide to ensure your package meets our style and quality criteria.\n\n\n\n6.2.3 Automatic checks\n\nAll submissions are automatically checked by our pkgcheck system to ensure packages follow our guidelines. All authors are expected to have run the main pkgcheck function locally to confirm that the package is ready to be submitted. Alternatively, an even easier way to ensure a package is ready for submission is to use the pkgcheck GitHub Action to run pkgcheck as a GitHub Action, as described in our blog post.\nIf your package requires unusual system dependencies (see Packaging Guide) for our GitHub Action to pass, please submit a pull request adding them to our base Dockerfile. See this pkgcheck vignette for details of our checking environment, and how to modify it to help your package pass checks.\nIf there are any aspects of pkgcheck which your package is unable to pass, please explain reasons in your submission template.\n\n\n\n6.2.4 Accompanying manuscript (optional)\nIf you intend to submit an accompanying manuscript for your package, rOpenSci has a collaborative partnership with the Journal of Open-Source Software and Methods in Ecology and Evolution:\n\nFor a submission to Journal of Open-Source Software (JOSS), do not submit it to JOSS consideration until after the rOpenSci review process is over: if your package is deemed in scope by JOSS editors, only the accompanying short paper would be reviewed, (not the software that will have been extended reviewed by rOpenSci by that time). Not all rOpenSci packages will meet the criteria for JOSS.\nFor a submission to Methods in Ecology and Evolution (MEE), submit it to MEE only after the rOpenSci reviewers have submitted their reviews, either before or after the package has been accepted. The review collaboration with MEE was introduced in a blog post. The relevant article type for MEE is Application for more details.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Guide for Authors</span>"
    ]
  },
  {
    "objectID": "softwarereview_author.html#the-submission-process",
    "href": "softwarereview_author.html#the-submission-process",
    "title": "6  Guide for Authors",
    "section": "6.3 The Submission Process",
    "text": "6.3 The Submission Process\n\nSoftware is submitted for review by opening a new issue in the software review repository and filling out the template.\nThe template begins with a section which includes several HTML-styled variables (&lt;!---variable---&gt;). These are used by our ropensci-review-bot, and must be left in place, with values filled between the indicated start and end points, like this:\n\n\n&lt;!---variable---&gt;insert value here&lt;!---end-variable&gt;\n\n\nCommunication between authors, reviewers and editors will first and foremost take place on GitHub so that the review thread can serve as a full record of the review. You may choose to contact the editor by email or Slack if private consultation is needed (e.g., asking how to respond to a reviewer question). Do not contact reviewers off-thread without asking them in the GitHub thread whether they agree to it.\nWhen submitting a package please make sure your GitHub notification settings make it unlikely you will miss a comment.\nPackages are automatically checked on submission by our pkgcheck system, which will confirm whether or not a package is ready to be reviewed.\nSubmitted packages can be hosted in the main/default branch, or any other non-default branch. In the latter case, it is encouraged, but not required, to submit the package via a dedicated ropensci-software-review branch.\nFor submissions in non-default branches, the “Repository” URL in the submission template should be the full URL to the review branch, like https://github.com/my/repo/tree/ropensci-software-review.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Guide for Authors</span>"
    ]
  },
  {
    "objectID": "softwarereview_author.html#the-review-process",
    "href": "softwarereview_author.html#the-review-process",
    "title": "6  Guide for Authors",
    "section": "6.4 The Review Process",
    "text": "6.4 The Review Process\n\nAn editor will review your submission within 5 business days and respond with next steps. The editor may assign the package to reviewers, request that the package be updated to meet minimal criteria before review, or reject the package due to lack of fit or overlap.\nIf your package meets minimal criteria, the editor will assign 1-3 reviewers. They will be asked to provide reviews as comments on your issue within 3 weeks.\nWe ask that you respond to reviewers’ comments within 2 weeks of the last-submitted review, but you may make updates to your package or respond at any time. Your response should include a link to the updated NEWS.md of your package. Here is an author response example. Once the response is commited, submit it using the bot. We encourage ongoing conversations between authors and reviewers. See the reviewing guide for more details.\nAny time package changes are likely to alter the results of the automated pkgcheck checks, authors can request a re-check with the command, @ropensci-review-bot check package.\nPlease notify us immediately if you are no longer able to maintain your package or to respond to reviews. You will then be expected to either retract a submission, or to find alternative package maintainers. You can also discuss maintenance issues in the rOpenSci slack workspace.\nOnce your package is approved, we will provide further instructions about the transfer of your repository to the rOpenSci repository.\n\nOur code of conduct is mandatory for everyone involved in our review process.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Guide for Authors</span>"
    ]
  },
  {
    "objectID": "softwarereview_reviewer.html",
    "href": "softwarereview_reviewer.html",
    "title": "7  Guide for Reviewers",
    "section": "",
    "text": "7.1 Volunteering as a reviewer\nThank you for your desire to participate in rOpenSci software peer-review as a reviewer!\nPlease fill our volunteering form.\nIf you see a current submission that is particularly relevant to your interests please email info@ropensci.org, including the name of the package, the URL to the submission issue and the name of the assigned editor. However, keep in mind that reviewer invitations are kept at the editor’s discretion, and the editor might well have already emailed people. Please do not volunteer for all issues, and do not volunteer via the GitHub interface.\nFor other ways to contribute, refer to rOpenSci contributing guide.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Guide for Reviewers</span>"
    ]
  },
  {
    "objectID": "softwarereview_reviewer.html#preparereview",
    "href": "softwarereview_reviewer.html#preparereview",
    "title": "7  Guide for Reviewers",
    "section": "7.2 Preparing your review",
    "text": "7.2 Preparing your review\nReviews should be based on the latest GitHub version on the default branch, unless otherwise indicated by package authors. All submissions trigger a detailed report on package structure and functionality, generated by our pkgcheck package. If the package has changed substantially since the last checks, you may request a re-check with the command @ropensci-review-bot check package. Note that when installing the package to review it, you should make sure you have all dependencies available (for instance run pak::pak()).\n\n7.2.1 General guidelines\nTo review a package, please begin by copying our review template and using it as a high-level checklist. In addition to checking off the minimum criteria, we ask that you provide general comments addressing the following:\n\nDoes the package comply with the rOpenSci packaging guide?\nAre there improvements that could be made to the code style and to code patterns? For instance, do functions need to be broken down into smaller helper functions and is the role of each helper function clear?\nIs there code duplication in the package that should be reduced?\nAre there functions in base R or lightweight dependencies that provide the same interface as some helper functions in the package?\nAre there user interface improvements that could be made?\nAre there performance improvements that could be made?\nIs the documentation (installation instructions/vignettes/examples/demos) clear and sufficient? Does it use the principle of multiple points of entry i.e. takes into account the fact that any piece of documentation may be the first encounter the user has with the package and/or the tool/data it wraps?\nWere functions and arguments named to work together to form a common, logical programming API that is easy to read, and autocomplete?\nIf you have your own relevant data/problem, work through it with the package. You may find rough edges and use-cases the author didn’t think about.\n\nPlease be respectful and kind to the authors in your reviews. Our code of conduct is mandatory for everyone involved in our review process. We expect you to submit your review within 3 weeks, depending on the deadline set by the editor. Please contact the editor directly or in the submission thread to inform them about possible delays.\nWe encourage you to use automated tools to facilitate your review. These include:\n\nChecking the initial package report generated by our @ropensci-review-bot.\nChecking the package’s logs on its continuous integration services (GitHub Actions, Codecov, etc.)\nRunning devtools::check() and devtools::test() on the package to find any errors that may be missed on the author’s system.\nSeeing whether tests’ skipping is justified (e.g. skip_on_cran() tests that do real API requests vs. skipping all tests on one operating system).\nIf the package is not submitted via the default/main branch, remember to switch to the submitted review branch before starting your review. In this case, you will also have to search the package locally, as GitHub search is limited to the default branch. Further, documentation hosted on a pkgdown website is not necessarily up-to-date, and we recommend inspecting the package’s documentation locally by running pkgdown::build_site().\n\nReviewers may also re-generate package check results from @ropensci-review-bot at any time by issuing the single comment in a review issue: @ropensci-review-bot check package.\nSome items in our checklist were inspired by the Mozilla code review guide.\n\n\n7.2.2 Off-thread interactions\nIf you interact with the package authors and talk about the review outside a review thread (in chats, DMs, in-person, issues in the project repository), please make sure that your review captures and/or links to elements from these conversations that are relevant to the process.\n\n\n7.2.3 Experience from past reviewers\nFirst-time reviewers may find it helpful to read about some previous reviews. In general you can find submission threads of onboarded packages. Here are a few chosen examples of reviews (note that your reviews do not need to be as long as these examples):\n\nrtika review 1 and review 2\nNLMR review 1 and review 2\nbowerbird pre-review comment, review 1, review 2.\nrusda review (from before we had a review template)\n\nYou can read blog posts written by reviewers about their experiences via this link. In particular, in this blog post by Mara Averick read about the “naive user” role a reviewer can take to provide useful feedback even without being an expert in the package’s topic or implementation, by asking themselves “What did I think this thing would do? Does it do it? What are the things that scare me off?”. In another blog post Verena Haunschmid explains how she alternated between using the package and checking its code.\nAs both a former reviewer and package author, and now editor, Adam Sparks wrote “[write] a good critique of the package structure and best coding practices. If you know how to do something better, tell me. It’s easy to miss documentation opportunities as a developer, but as a reviewer, you have a different view. You’re a user that can give feedback. What’s not clear in the package? How can it be made more clear? If you’re using it for the first time, is it easy? Do you know another R package that maybe I should be using? Or is there one I’m using that perhaps I shouldn’t be? If you can contribute to the package, offer.”\n\n\n7.2.4 Helper package for reviewers\nIf working in RStudio, you can streamline your review workflow by using the pkgreviewr package created by associated editor Anna Krystalli. Say you accepted to review the refnet package, you’d write\nremotes::install_github(\"ropensci-org/pkgreviewr\")\nlibrary(pkgreviewr)\npkgreview_create(pkg_repo = \"embruna/refnet\", \n                 review_parent = \"~/Documents/workflows/rOpenSci/reviews/\")\nand\n\nthe GitHub repo of the refnet package will be cloned.\na review project will be created, containing a notebook for you to fill, and the review template.\nnote that if the package is not submitted via the default/main branch, you need to switch to the submitted branch before starting your review.\n\n\n\n7.2.5 Feedback on the process\nWe encourage you to ask questions and provide feedback on the review process on our forum.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Guide for Reviewers</span>"
    ]
  },
  {
    "objectID": "softwarereview_reviewer.html#submitreview",
    "href": "softwarereview_reviewer.html#submitreview",
    "title": "7  Guide for Reviewers",
    "section": "7.3 Submitting the Review",
    "text": "7.3 Submitting the Review\n\nWhen your review is complete, paste it as a comment into the package software-review issue.\nAdditional comments are welcome in the same issue. We hope that package reviews will work as an ongoing conversation with the authors as opposed to a single round of reviews typical of academic manuscripts.\nYou may also submit issues or pull requests directly to the package repo if you choose, but if you do, please comment about them and link to them in the software-review repo comment thread so we have a centralized record and text of your review.\nPlease include an estimate of how many hours you spent on your review afterwards.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Guide for Reviewers</span>"
    ]
  },
  {
    "objectID": "softwarereview_reviewer.html#followupreviewer",
    "href": "softwarereview_reviewer.html#followupreviewer",
    "title": "7  Guide for Reviewers",
    "section": "7.4 Review follow-up",
    "text": "7.4 Review follow-up\nAuthors should respond within 2 weeks with their changes to the package in response to your review. At this stage, we ask that you respond as to whether the changes sufficiently address any issues raised in your review. We encourage ongoing discussion between package authors and reviewers, and you may ask editors to clarify issues in the review thread as well.\nYou’ll use the approval template.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Guide for Reviewers</span>"
    ]
  },
  {
    "objectID": "softwarereview_editor.html",
    "href": "softwarereview_editor.html",
    "title": "8  Guide for Editors",
    "section": "",
    "text": "8.1 Editors’ responsibilities",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Guide for Editors</span>"
    ]
  },
  {
    "objectID": "softwarereview_editor.html#editors-responsibilities",
    "href": "softwarereview_editor.html#editors-responsibilities",
    "title": "8  Guide for Editors",
    "section": "",
    "text": "In addition to handling packages (about 4 a year), editors weigh in on group editorial decisions, such as whether a package is in-scope, and determining updates to our policies. We generally do this through Slack, which we expect editors to be able to check regularly.\nYou only need to keep track of your own submissions, but if you do notice an issue with a package that is being handled by another editor, feel free to raise that issue directly with the other editor, or post the concern to editors-only channel on Slack. Examples:\n\nYou know of an overlapping package, that hasn’t been mentioned in the process yet.\nYou see a question to which you have an expert answer that hasn’t been given after a few days (such as linking to a blog post which may answer a question).\nConcerns related to general review progress, including aspects such as the speed of the process, should be directed to the current Editor-in-Chief.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Guide for Editors</span>"
    ]
  },
  {
    "objectID": "softwarereview_editor.html#editorchecklist",
    "href": "softwarereview_editor.html#editorchecklist",
    "title": "8  Guide for Editors",
    "section": "8.2 Handling Editor’s Checklist",
    "text": "8.2 Handling Editor’s Checklist\n\n8.2.1 Upon submission:\n\nSubmission will automatically generate package check output from the ropensci-review-bot. The check results should be examined for any outstanding issues (most exceptions will need to be justified by the author in the particular context of their package). Checks can be re-run after any package change with the comment @ropensci-review-bot check package.\nFor statistical submissions (identifiable as “Submission Type: Stats” in issue template), add the “stats” label to the issue (if not already added).\nCheck that the issue template has been properly filled out. Most common oversights and omissions should be caught and noted by the bot, but a manual check always helps. Editors can edit templates directly for minor fixes, or may direct authors to fill any mandatory template fields that may be missing.\nThe checking system is rebuilt every Tuesday at 00:01 UTC, and can take a couple of hours. If automatic checks fail around that time, wait a few hours and try again.\nAfter automatic checks are posted, use the editor template to guide initial checks and record your response to the submission. You can also streamline your editor checks by using the pkgreviewr package created by associate editor Anna Krystalli. Please strive to finish the checks and start looking for reviewers within 5 working days.\nCheck against policies for fit and overlap. Initiate discussion via Slack #software-review channel if needed for edge cases that haven’t been caught by previous checks by the EiC. If rejected, see this section about how to respond.\nEnsure that the package gets tested on multiple platforms (having the package built on several operating systems via GitHub Actions for instance; see criteria in this section of the CI chapter for further details and options).\nWherever possible when asking for changes, direct authors to automatic tools such as usethis, Air and styler, and to online resources (sections of this guide, sections of the R packages book) to make your feedback easier to use. See this example of editor’s checks.\nIdeally, any remarks you make as editor should be addressed before assigning reviewers.\nIf initial checks show major gaps, request changes before assigning reviewers. If the author mentions changes might take time, apply the holding label by calling @ropensci-review-bot put on hold. You’ll get a reminder in the issue every 90 days to check in with the package author(s).\nIf the package raises a new issue for rOpenSci policy, start a conversation in Slack or open a discussion on the rOpenSci forum to discuss it with other editors (example of policy discussion).\n\n\n\n8.2.2 Look for and assign two reviewers:\n\n8.2.2.1 Tasks\n\nComment with @ropensci-review-bot seeking reviewers.\nUse the email template if needed for inviting reviewers\n\nWhen inviting reviewers, include something like “if I don’t hear from you in a week, I’ll assume you are unable to review,” so as to give a clear deadline when you’ll move on to looking for someone else.\n\nAssign reviewers with @ropensci-review-bot assign @username as reviewer. add can also be used instead of assign, and to reviewers (plural) instead of as reviewer (single). The following is thus also valid: @ropensci-review-bot add @username to reviewers. One command should be issued for each reviewer. If needed later, remove reviewers with @ropensci-review-bot remove @username from reviewers.\nIf you want to change the due date for a review use @ropensci-review-bot set due date for @username to YYYY-MM-DD.\n\n\n\n8.2.2.2 How to look for reviewers\n\n8.2.2.2.1 Where to look for reviewers?\nAs a (guest) editor, use\n\nthe potential suggestions made by the submitter(s), (although submitters may have a narrow view of the types of expertise needed. We suggest not using more than one of the suggested reviewers);\nthe Airtable database of reviewers and volunteers (see next subsection);\nand the authors of rOpenSci packages.\n\nWhen these sources of information are not enough,\n\nPing other editors in Slack for ideas,\nLook for users of the package or of the data source/upstream service the package connects to (via their opening issues in the repository, starring it, citing it in papers, talking about it on Twitter).\nYou can also search for authors of related packages on r-pkg.org.\nR-Ladies has a directory specifying skills and interests of people listed.\nYou may post a request for reviewers in the #general and/or #software-review channels on the rOpenSci Slack, or on social media.\n\n\n\n8.2.2.2.2 Tips for reviewer search in Airtable\nYou can use filters, sorting, and search to identify reviewers with particular experience:\n\n\n\nScreenshot of the Airtable filters interface with a filter on domain expertise that has to include chemistry and technical areas that have to include continuous integration\n\n\nPlease check the reviewer’s most recent review and avoid anyone who has reviewed anyone in the past six months. Also, please check if a first-time reviewer has indicated that they require_mentorship. If so, please use the mentorship portion of the email template and be prepared to provide additional guidance.\n\n\n8.2.2.2.3 Criteria for choosing a reviewer\nHere are criteria to keep in mind when choosing a reviewer. You might need to piece this information together by searching CRAN and the potential reviewer’s GitHub page and general online presence (personal website, Twitter).\n\nHas not reviewed a package for us within the last 6 months.\nSome package development experience.\nSome domain experience in the field of the package or data source\nNo conflicts of interest.\nTry to balance your sense of the potential reviewer’s experience against the complexity of the package.\nDiversity - with two reviewers both shouldn’t be cis white males.\nSome evidence that they are interested in openness or R community activities, although cold emailing is fine.\n\nEach submission should be reviewed by two package reviewers. Although it is fine for one of them to have less package development experience and more domain knowledge, the review should not be split in two. Both reviewers need to review the package comprehensively, though from their particular perspective. In general, at least one reviewer should have prior reviewing experience, and of course inviting one new reviewer expands our pool of reviewers.\n\n\n\n\n8.2.3 During review:\n\nCheck in with reviewers and authors occasionally. Offer clarification and help as needed.\nIn general aim for 3 weeks for review, 2 weeks for subsequent changes, and 1 week for reviewer approval of changes.\nUpon each review being submitted,\n\nWrite a comment thanking the reviewer in your own words.\nRecord the review via typing a new comment @ropensci-review-bot submit review &lt;review-url&gt; time &lt;time in hours&gt;. E.g. for the review https://github.com/ropensci/software-review/issues/329#issuecomment-809783937 the comment would be @ropensci-review-bot submit review https://github.com/ropensci/software-review/issues/329#issuecomment-809783937 time 4.\n\nUpon changes being made, change the review status tag to 5/awaiting-reviewer-response, and request that reviewers indicate approval with the reviewer approval template.\nIf the authors intend to submit an accompanying Applications manuscript at Methods in Ecology and Evolution, indicate to the authors can submit their manuscript after the review has been completed.\n\n\n8.2.3.1 Challenges during review\n\nIf the author stops responding, refer to the policies and/or ping the other editors in the Slack channel for discussion. Importantly, if a reviewer was assigned to a closed issue, contact them when closing the issue to explain the decision, and thank them once again for their work. Let the other editors know in the Slack channel to consider them for a package in the future with high chances of smooth software review (e.g. a package author who has already submitted packages to us).\nIf a reviewer is late with review or stops responding, send a reminder after 1 week, and again after 2 weeks. The first reminding can be a @tag on GitHub. After that use email or other direct communication. If after 3 weeks there is still no response, determine how best to move ahead without them:\n\nIf the reviewer has already submitted their primary review, and another reviewer is active and providing substantial feedback, the editor can proceed with the review process, and should take the role of the absent reviewer in determining if the authors’ changes are sufficient.\nIf the absent reviewer has not submitted their review, the editor should try to find a new reviewer, and proceed with the review process once two reviews are in. At this point, the editor should prioritize finding experienced reviewers who can commit to a quick turnaround. Be sure to ping other editors on Slack.\n\nAt their discretion, the editor may opt to act as the second reviewer themselves, but should only do so after multiple failed attempts to find a new reviewer, and if the editor has sufficient expertise to do so. We discourage editors from doing this with any frequency, as it increases workload and reduces the diversity of views brought into the community by reviewers.\nMake a comment thanking the original reviewer in any case, and remove them with @ropensci-review-bot remove @username from reviewers.\n\n\n\n\n\n\n8.2.4 After review:\n\n@ropensci-review-bot approve &lt;package-name&gt;\nIf the original repository wishes to keep the package in their own GitHub organization rather than transfer to ropensci, add a line with the repository URL to this repos list to ensure the package gets included in rOpenSci package registry.\nNominate a package to be featured in an rOpenSci blog post or tech note if you think it might be of high interest. Please note in the software review issue one or two things the author could highlight, and tag @ropensci/blog-editors for follow-up.\nIf authors maintain a gitbook that is at least partly about their package, contact an rOpenSci staff member so they might contact the authors about transfer to the ropensci-books GitHub organisation.\n\n\n8.2.4.1 Packages remaining in original GitHub organizations\nFor package authors who wish to retain their repositories in their original GitHub organizations, rather than transfer to github.com/ropensci, editors should:\n\nAsk package authors to make a pull request to the JSON file that lists all repositories that have not been transferred. Example commit.\nAsk package to replace the content of the current code of conduct of the repository with the content of the default code of conduct of the rOpenSci GitHub organization.\n\n\n\n\n8.2.5 Package promotion:\n\nDirect the author to the chapters of the guide about package releases, marketing and GitHub grooming.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Guide for Editors</span>"
    ]
  },
  {
    "objectID": "softwarereview_editor.html#eicchecklist",
    "href": "softwarereview_editor.html#eicchecklist",
    "title": "8  Guide for Editors",
    "section": "8.3 EiC Responsibilities",
    "text": "8.3 EiC Responsibilities\nRotating Editors-in-Chief (EiCs) generally serve for 3 months or a time agreed to by all members of the editorial board. The EiC is entitled to taking scope and overlap decisions as independently as possible (but can still request help and advice). Information on current status of all editorial team members is presented on our Editorial Dashboard. The EiC is responsible for the following tasks:\n\nOn assuming EiC rotation, reviewing the status of current open reviews as detailed on the Dashboard page, and issuing reminders to other editors or package authors as needed. See the following sub-section for more details\nWatching all new issues posted to the software-review repo, for which the EiC must either subscribe to repo notifications on GitHub, or watch the #software-peer-review-feed channel on Slack.\nTagging each new full submission with 0/editorial-team-prep\nCalling @ropensci-review-bot check srr on pre-submission enquiries for statistical software. See corresponding Stats Dev Guide chapter for details.\nFinding an editor (potentially including yourself) to handle each submission. Currently available editors are indicated on the Editorial Dashboard, and editorial workloads should be distributed as evenly as possible, through referring to the Dashboard charts of recent editorial load.\nAssigning editors by issuing the command:\n@ropensci-review-bot assign @username as editor\nThis will also add the tag 1/editor-checks to the issue.\nRegularly (for instance weekly) monitoring the pace of all open reviews by keeping an eye on the Dashboard page, and reminding other editors to move packages along as needed.\nResponding to issues posted to [the software-review-meta repo\nMaking decisions on scope and overlap for pre-submission inquiries, referrals from JOSS or other publication partners, and submissions. Discussions should be initiated in the rOpenSci Slack editors-only channel through summarising the (pre-)submitted/referred software, along with any concerns the EiC might have. If after the EiC feels they haven’t received enough answers after a day or two, they can ping all editors.\n\nAny editor should feel free to step in on these. See this section about how to respond to out-of-scope (pre-) submissions.\nAfter explaining an out-of-scope decision, write an issue comment @ropensci-review-bot out-of-scope.\n\n\n\n8.3.1 The rOpenSci Editorial Dashboard\nThe rOpenSci Editorial Dashboard is updated daily, primarily by extracting information on all software review issues on GitHub, along with additional information from Slack and our Airtable database. The dashboard provides an up-to-date overview of our editorial team, their recent responsibilities, and the current state of all software review issues. The EiC (or any editors who are interested) can gain an overview of the editorial team status, availability, and recent workloads on the editors page. This should be used to find and assign editors for new software review issues. An overview of all current software reviews is on the **Software Review* page. Entries on this page are colored by a measure of “urgency”, summarised in the table at the bottom of that page.\nSpecific tasks for reviews in the specific review stages include:\n\nLooking over submissions in “0/presubmission” and “1/editorial-team-prep”, to check whether any action needs to be taken (such as polling editors, making decisions, putting issues on hold, pinging for updates, or finding and assigning editors).\nLooking over submissions in “2/seeking-reviewer(s)” to ensure things are progressing quickly. If the reviewer search has been going for unusually long (red color), check whether the submission is on hold, read the thread to gather context, and contact the editor in private to ask for more information.\nLooking over submissions in “3/reviewer(s)-assigned”. If there are still missing reviews after an unusually long time (red color), check whether the submission is on hold, read the thread to gather context, and contact the editor in private to ask for more information.\nLooking over submissions in “4/review(s)-in-awaiting-changes”. If some are still lacking an author response after an unusually long time (red color), check whether the submission is on hold, read the thread, and contact the editor in private to ask for more information.\n\n\n\n8.3.2 Asking for more details\nIn some cases online documentation is sparse. Minimal README, no pkgdown website make assessment harder. In that case please ask for more details: even if the package is deemed out-of-scope, the package docs will have gotten better so we are fine asking for these efforts.\nExample text\nHello &lt;username&gt; and many thanks for your submission.\n\nWe are discussing whether the package is in scope and need a bit more information.\n\nWould you mind adding more details and context to the README?\nAfter reading it someone with little domain knowledge should have been informed about the aim, goals and functionality of the package.\n\n&lt;optional&gt;\nIf a package has overlapping functionality with other packages, we require it to demonstrate in the documentation [how it is best in class](https://devguide.ropensci.org/policies.html#overlap). Could you add a more detailed comparison to the packages you mention in the README so we can evaluate?\n&lt;/optional&gt;\n\n\n8.3.3 Inviting a guest editor\nAfter discussion with other editors the EiC might invite a guest editor to handle a submission (e.g. if the submission volume is large, if all editors have a conflict of interest, if specific expertise is needed, or as a trial prior to inviting a person to join the editorial board).\nWhen inviting a guest editor,\n\nAsk about conflicts of interest using the same phrasing as for reviewers,\nGive a link to the guide for editors.\n\nIf the person said yes (yay!),\n\nMake sure they enabled 2FA for their GitHub account,\nInvite them to the ropensci/editors team and to the ropensci organization,\nOnce they’ve accepted this repo invitation, assign the issue to them,\nEnsure they’re (already) invited to rOpenSci Slack workspace,\nAdd their name to the Airtable guest-editor table (so their names might appear in this book and in the software-review README).\n\nAfter the review process is finished (package approved, issue closed),\n\nThank the guest editor again,\nRemove them from the ropensci/editors team (but not from the ropensci organization).",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Guide for Editors</span>"
    ]
  },
  {
    "objectID": "softwarereview_editor.html#outofscoperesponse",
    "href": "softwarereview_editor.html#outofscoperesponse",
    "title": "8  Guide for Editors",
    "section": "8.4 Responding to out-of-scope submissions",
    "text": "8.4 Responding to out-of-scope submissions\nThank authors for their submission, explain the reasons for the decision, and direct them to other publication venues if relevant, and to the rOpenSci discussion forum. Use wording from Aims and scope in particular regarding the evolution of scope over time, and the overlap and differences between unconf/staff/software-review development.\nExamples of out-of-scope submissions and responses.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Guide for Editors</span>"
    ]
  },
  {
    "objectID": "softwarereview_editor.html#reviewersupport",
    "href": "softwarereview_editor.html#reviewersupport",
    "title": "8  Guide for Editors",
    "section": "8.5 Answering reviewers’ questions",
    "text": "8.5 Answering reviewers’ questions\nReviewers might ask for feedback on e.g. the tone of their review. Besides pointing them at general guidance in this guide, asking editors / opening an issue when such guidance is lacking, here are some review examples that might be useful.\n\ntough-but-constructive example: the part of this review suggesting a re-write of the vignette: ropensci/software-review#191 (comment).\nthe slopes package, which ended up being fundamentally redesigned in response to the reviews. All reviews/reviewers were at all times entirely constructive, which seems to have played a major role in motivating the authors to embark on such a major overhaul. Comments such as, “this package does not …” or “has not …” were invariably followed by constructive suggestions for what could be done (there are, for example, several in one of the first reviews).\ntic reviews politely expressed reservations: https://github.com/ropensci/software-review/issues/305#issuecomment-504762517 and https://github.com/ropensci/software-review/issues/305#issuecomment-508271766\nbowerbird useful “pre-review” that resulted in a package split before the actual reviews.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Guide for Editors</span>"
    ]
  },
  {
    "objectID": "softwarereview_editor.html#bookrelease",
    "href": "softwarereview_editor.html#bookrelease",
    "title": "8  Guide for Editors",
    "section": "8.6 Managing a dev guide release",
    "text": "8.6 Managing a dev guide release\nIf you are in charge of managing a release of the very book you are reading, use the book release guidance as an issue template to be posted in the dev guide issue tracker, and do not hesitate to ask questions to other editors.\n\n8.6.1 Dev guide governance\nFor very small amendments to the dev guide, no PR review is needed. For larger amendments, request review from at least a few editors (if none participated in the discussion related to the amendment, request a review from all of them on GitHub, and in the absence of any reaction merge after a week).\nTwo weeks before a dev guide release, once the PR from dev to master and the release blog post are ready for review, all editors should be pinged by GitHub (“review request” on the PR from dev to master) and Slack, but the release doesn’t need all of them to explicitly approve the release.\n\n\n8.6.2 Blog post about a release\nThe blog post about a release will be reviewed by editors, and one of @ropensci/blog-editors.\n\n8.6.2.1 Content\nRefer to the general rOpenSci blogging guidance, and the more specific guidance below.\nFirst example of such a post; second example.\nThe blog post should mention all important items from the changelog organized in (sub)sections: e.g. a section about big change A, another one about big change B, and one about smaller changes lumped together. Mention the most important changes first.\nFor each change made by an external contributor, thank them explicitly using the information from the changelog. E.g. [Matt Fidler](https://github.com/mattfidler/) amended our section on Console messages [ropensci/dev_guide#178](https://github.com/ropensci/dev_guide/pull/178)..\nAt the end of the post, mention upcoming changes by linking to open issues in the issue tracker, and invite readers to contribute to the dev guide by opening issues and participating in open discussions. Conclusion template:\nIn this post we summarized the changes incorporated into our book [\"rOpenSci Packages: Development, Maintenance, and Peer Review\"](https://devguide.ropensci.org/) over the last X months. \nWe are grateful for all contributions that made this release possible. \nWe are already working on updates for our next version, such as ISSUE1, ISSUE2. \nCheck out the [the issue tracker](https://github.com/ropensci/dev_guide/issues/) if you'd like to contribute.\n\n\n8.6.2.2 Authorship\nThe editor writing the post is the first author, other editors are listed in alphabetical order.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Guide for Editors</span>"
    ]
  },
  {
    "objectID": "softwarereview_editor_management.html",
    "href": "softwarereview_editor_management.html",
    "title": "9  Editorial management",
    "section": "",
    "text": "9.1 Recruiting new editors\nRecruiting new editors and maintaining a sufficient and well-balanced editorial board is a responsibility of the Software Review Lead, with support and advice from the editorial board.\nSteps:",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Editorial management</span>"
    ]
  },
  {
    "objectID": "softwarereview_editor_management.html#recruiting-new-editors",
    "href": "softwarereview_editor_management.html#recruiting-new-editors",
    "title": "9  Editorial management",
    "section": "",
    "text": "Start a private channel for discussion (so that it does not have a history in the editors channel that future editors will join, which could be awkward).\nPing editors to be sure they get a notification as this is an important topic.\nWait for a majority of editors to chime in before inviting someone. Leave them one week to respond.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Editorial management</span>"
    ]
  },
  {
    "objectID": "softwarereview_editor_management.html#inviting-a-new-editor",
    "href": "softwarereview_editor_management.html#inviting-a-new-editor",
    "title": "9  Editorial management",
    "section": "9.2 Inviting a new editor",
    "text": "9.2 Inviting a new editor\n\nCandidates might start by being guest editors. When inviting them as guest editor, invite them as you would invite a guest editor for other reasons.\nIf a candidate is guest editor first, assess how the process went after the submission is tackled. Asked other editors for their advice again.\nSend an email.\n\nWe would like to invite you to join the rOpenSci editorial board as a full member. [SPECIFIC REASONS FOR INVITATION (MENTION CONTRIBUTIONS TO ROPENSCI)]. \nWe think you would make a wonderful addition to the team.\n\n[IF GUEST EDITOR:You are familiar with the editor's role as you've been a guest editor].  We aim for editors to handle four packages per year ([IF GUEST EDITOR including the one you just finished!]).  \nWe ask that editors make an informal commitment of serving for two years, and re-evaluate their participation after that.  \nOn a short-term basis, any editor can decline to handle a package or say, \"I'm pretty busy, I can't handle a new package for a few weeks.\"\n\nIn addition to handling packages, editors weigh in on group editorial decisions, such as whether a package is in-scope, and determining updates to our policies. \nWe generally do this through Slack, which we expect editors to be able to check regularly. \nWe have editorial board calls annually.  \nWe also rotate Editor-in-Chief responsibilities (first-pass scope decisions and assigning editors) amongst the board about quarterly. \nYou'll have the opportunity to enter this rotation once you have been on the board for some time, usually at least six months. \nSome of us also take on bigger projects to improve the peer-review process, though this is entirely optional. \n\nWe hope that you'll join the board!  \nIt's an exciting time for peer-review at rOpenSci.\n\nPlease give this some thought, ask us any questions you have, and let us know whether you can join us.\n\nBest,\n[EDITOR], on behalf of the rOpenSci Editorial Board",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Editorial management</span>"
    ]
  },
  {
    "objectID": "softwarereview_editor_management.html#onboarding-a-new-editor",
    "href": "softwarereview_editor_management.html#onboarding-a-new-editor",
    "title": "9  Editorial management",
    "section": "9.3 Onboarding a new editor",
    "text": "9.3 Onboarding a new editor\n\nInform rOpenSci community manager so that\n\neditors are added to the rOpenSci website.\nan introduction blog post can be put together.\n\nIf they haven’t already done so as guest editors, request that the new editor turn on two-factor authentication (2FA) for GitHub.\nInvite editors to the rOpenSci GitHub organization as member, as a member of the editors team and the data-pkg-editors or stats-board sub-team, as appropriate. This will give them appropriate permissions and allow them to get team-specific notifications.\nEditors need access to the AirTable database of software review (linked in the description of the editors-only channel on Slack).\nEditors need access to the private editors channel in rOpenSci Slack workspace (and to the Slack workspace in general if they didn’t previously, in that case ask rOpenSci community manager).\nPost a welcome message in the channel, pinging all editors.\nIn the Slack workspace they need to be added to the editors team so that @editors will ping them too.\nWe add editors’ names to\n\ndev_guide authors list\ndev_guide chapter introducing software review (at two locations in this file, as editors and a bit below to remove them from the reviewers list)\nsoftware-review README (in two places in this file as well) Both the dev_guide and software-review README are automatically knit via continuous integration.\n\nAdd editors to https://github.com/orgs/ropensci/teams/editors/members",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Editorial management</span>"
    ]
  },
  {
    "objectID": "softwarereview_editor_management.html#offboarding-an-editor",
    "href": "softwarereview_editor_management.html#offboarding-an-editor",
    "title": "9  Editorial management",
    "section": "9.4 Offboarding an editor",
    "text": "9.4 Offboarding an editor\n\nThank them for their work!\nRemove them from the editors-only channel and the editors Slack team.\nRemove them from https://github.com/orgs/ropensci/teams/editors/members and sub-team.\nInform rOpenSci community manager or some other staff member so that they might be moved to the alumni team members on the website.\nRemove their access to the Airtable workspace.\nRemove them from\n\ndev_guide chapter introducing software review (at two locations in this file, as editors and a bit below to remove them from the reviewers list)\nsoftware-review README (in two places in this file as well)\n\n\nBoth the dev_guide and software-review README are automatically knit via continuous integration.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Editorial management</span>"
    ]
  },
  {
    "objectID": "softwarereview_editor_management.html#vacation",
    "href": "softwarereview_editor_management.html#vacation",
    "title": "9  Editorial management",
    "section": "9.5 Putting the system on pause",
    "text": "9.5 Putting the system on pause\nIf you want to put the system on a break for instance over the holidays, before leaving:\n\nAdd a vacation message to the about field of issue templates. Example PR.\nAdd a vacation message to the bot’s standard welcome response. Example PR.\n\nUpon resuming activities:\n\nRemove the vacation message from issue templates. Example PR.\nRemove the vacation message from the bot’s standard welcome response. Example commit.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Editorial management</span>"
    ]
  },
  {
    "objectID": "maintenance_cheatsheet.html",
    "href": "maintenance_cheatsheet.html",
    "title": "10  rOpenSci package maintenance cheatsheet",
    "section": "",
    "text": "10.1 Help needed?\nIf you need punctual help (say, a PR review; or some CI troubleshooting), or help looking for co-maintainers or a new maintainer, or if you need us to retire your package, ping us in GitHub via @ropensci/admin or email info@ropensci.org. You can also use our Slack package maintenance channel.\nNever hesitate to ask for help.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>rOpenSci package maintenance cheatsheet</span>"
    ]
  },
  {
    "objectID": "maintenance_cheatsheet.html#git-hub-repository-access",
    "href": "maintenance_cheatsheet.html#git-hub-repository-access",
    "title": "10  rOpenSci package maintenance cheatsheet",
    "section": "10.2 GitHub repository access",
    "text": "10.2 GitHub repository access\nYou should have administrative access to your package’s GitHub repository. If that is no longer the case (say, the automated process failed; or you lost access after having to temporarily deactivate two-factor authentication), please contact us via info@ropensci.org.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>rOpenSci package maintenance cheatsheet</span>"
    ]
  },
  {
    "objectID": "maintenance_cheatsheet.html#other-git-hub-topics",
    "href": "maintenance_cheatsheet.html#other-git-hub-topics",
    "title": "10  rOpenSci package maintenance cheatsheet",
    "section": "10.3 Other GitHub topics",
    "text": "10.3 Other GitHub topics\nIf you have any GitHub questions or requests (adding a collaborator to the GitHub organization for instance) you can use a public channel of the rOpenSci Slack workspace or ping @ropensci/admin on GitHub.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>rOpenSci package maintenance cheatsheet</span>"
    ]
  },
  {
    "objectID": "maintenance_cheatsheet.html#pkgdown-documentation",
    "href": "maintenance_cheatsheet.html#pkgdown-documentation",
    "title": "10  rOpenSci package maintenance cheatsheet",
    "section": "10.4 pkgdown documentation",
    "text": "10.4 pkgdown documentation\nSee rOpenSci docs.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>rOpenSci package maintenance cheatsheet</span>"
    ]
  },
  {
    "objectID": "maintenance_cheatsheet.html#access-to-ropensci-slack-workspace",
    "href": "maintenance_cheatsheet.html#access-to-ropensci-slack-workspace",
    "title": "10  rOpenSci package maintenance cheatsheet",
    "section": "10.5 Access to rOpenSci slack workspace",
    "text": "10.5 Access to rOpenSci slack workspace\nPackage maintainers and developers should get access to rOpenSci Slack. If you did not get the invitation or did not accept it in time, or if you want a new regular contributor to receive an invitation please email info@ropensci.org, indicating to which email address you wish to receive the invitation.\nYou might find the #package-maintenance channel relevant for Q&A as well as friendly commiseration when needed.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>rOpenSci package maintenance cheatsheet</span>"
    ]
  },
  {
    "objectID": "maintenance_cheatsheet.html#package-blog-posts",
    "href": "maintenance_cheatsheet.html#package-blog-posts",
    "title": "10  rOpenSci package maintenance cheatsheet",
    "section": "10.6 Package blog posts",
    "text": "10.6 Package blog posts\nRefer to our blog guide.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>rOpenSci package maintenance cheatsheet</span>"
    ]
  },
  {
    "objectID": "maintenance_cheatsheet.html#package-issues-promotion",
    "href": "maintenance_cheatsheet.html#package-issues-promotion",
    "title": "10  rOpenSci package maintenance cheatsheet",
    "section": "10.7 Package issues promotion",
    "text": "10.7 Package issues promotion\nLabel issues with “help wanted” to get them broadcasted to the community.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>rOpenSci package maintenance cheatsheet</span>"
    ]
  },
  {
    "objectID": "maintenance_cheatsheet.html#package-use-cases-promotion",
    "href": "maintenance_cheatsheet.html#package-use-cases-promotion",
    "title": "10  rOpenSci package maintenance cheatsheet",
    "section": "10.8 Package use cases promotion",
    "text": "10.8 Package use cases promotion\nYou can report use cases of your package or encourage users to report them via our forum to get them published on our website and in our newsletter.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>rOpenSci package maintenance cheatsheet</span>"
    ]
  },
  {
    "objectID": "maintenance_collaboration.html",
    "href": "maintenance_collaboration.html",
    "title": "11  Collaboration Guide",
    "section": "",
    "text": "11.1 Make your repo contribution and collaboration friendly",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Collaboration Guide</span>"
    ]
  },
  {
    "objectID": "maintenance_collaboration.html#friendlyfiles",
    "href": "maintenance_collaboration.html#friendlyfiles",
    "title": "11  Collaboration Guide",
    "section": "",
    "text": "11.1.1 Code of conduct\nOnce your package is listed into the rOpenSci registry, the rOpenSci Code of Conduct will apply to your project. Please add this text to the README\nPlease note that this package is released with a [Contributor\nCode of Conduct](https://ropensci.org/code-of-conduct/). \nBy\ncontributing to this project, you agree to abide by its terms.\nAnd\n\nIf your package was transferred to the rOpenSci GitHub organization, please delete the current code of conduct of the repository if there was one as the default code of conduct of the GitHub organization will appear.\nIf your package was not transferred to the rOpenSci GitHub organization, please replace the content of the current code of conduct of the repository with the content of the default code of conduct of the rOpenSci GitHub organization.\n\n\n\n11.1.2 Contributing guide\nYou can use issue, pull request and contributing guidelines. Having a contributing file as .github/CONTRIBUTING.md or docs/CONTRIBUTING.md is compulsory. An easy way to insert a template for a contributing guide is the use_tidy_contributing() function from the usethis package, which inserts this template as .github/CONTRIBUTING.md. A more extensive example is this template by Peter Desmet, or the comprehensive GitHub wiki pages for the mlr3 package. These and other templates will generally need to be modified for use with an rOpenSci package, particularly by referring and linking to our Code of Conduct, as described elsewhere in this book. Modifying a generic contributing guide to add a personal touch also tends to make it look less generic and more sincere. Personal preferences in a contributing guide include:\n\nStyle preferences? You might however prefer to make style a configuration (of Air, styler, lintr) or to fix code style yourself especially if you don’t use a popular code style like the tidyverse coding style.\nInfrastructure like roxygen2?\nWorkflow preferences? Issue before a PR?\nA scope statement, like in the skimr package?\nSandbox account creation? Mocking in tests? Linking to external docs?\n\nrOpenSci further encourages contributing guides to include a lifecycle statement clarifying visions and expectations for the future development of your package, like in this example. Statistical packages are required to have a lifecycle statement, as specified in General Statistical Stanards G1.2. That links provides a template for a simple lifecycle statement. CONTRIBUTING.md files can also describe how you acknowledge contributions (see this section).\nWe encourage you to direct feedback that is not a bug report or a feature request to the discussion tools that your Git platform provides, like GitHub Discussions for GitHub.\nOnce a pull request is closer to being merged, you could style the code using Air or styler.\n\n\n11.1.3 Issue management\nBy using GitHub features around issues you can help potential contributors find them, and make your roadmap public.\n\n11.1.3.1 Issue templates\nYou could use one or several issue template(s) to help users fill better bug reports or feature requests. When there are several issue templates, users who click on opening a new issue see a menu that guide their choices.\nYou can even configure one of the choices to point to somewhere outside of your repository (for instance a discussion forum).\nRefer to GitHub docs.\n\n\n11.1.3.2 Issue labelling\nYou can use labels such as “help wanted” and “good first issue” to help potential collaborators, including newbies, find your repo. Cf GitHub article. You can also use the “Beginner” label. See examples of beginner issues over all ropensci repos.\n\n\n11.1.3.3 Pinning issues\nYou can pin up to 3 issues by repository that will then appear at the top of your issue tracker as nice issue cards. It can help advertise what your priorities are.\n\n\n11.1.3.4 Milestones\nYou can create milestones and assign issues to them, which help see what you plan for the next version of your package for instance.\n\n\n\n11.1.4 Communication with users\nYou can point users to rOpenSci forum if you monitor it, or enable GitHub Discussions for your package repository. Each GitHub discussion can be converted to an issue if needed (and the other way round, issues can be converted to discussions).",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Collaboration Guide</span>"
    ]
  },
  {
    "objectID": "maintenance_collaboration.html#workingcollaborators",
    "href": "maintenance_collaboration.html#workingcollaborators",
    "title": "11  Collaboration Guide",
    "section": "11.2 Working with collaborators",
    "text": "11.2 Working with collaborators\nFirst thing first: keep in touch with your GitHub repository!\n\ndo not forget to watch your GitHub repository to be notified of issues or pull requests (alternatively, if you work in bursts, maybe add the information to the contributing guide).\ndo not forget to push updates you have locally.\ndisable failing tests if you cannot fix them as they create noise in PRs that can puzzle new contributors.\n\n\n11.2.1 Onboarding collaborators\nThere’s no general rOpenSci rule as to how you should onboard collaborators. You should increase their rights to the repo as you gain trust, and you should definitely acknowledge contributions (see this section).\nYou can ask a new collaborator to make PRs (see following section for assessing a PR locally, i.e. beyond CI checks) to dev/main and assess them before merging, and after a while let them push to main, although you might want to keep a system of PR reviews… even for yourself once you have team mates!\nA possible model for onboarding collaborators is provided by Jim Hester in his lintr repo.\nIf your problem is recruiting collaborators, you can post an open call like Jim Hester’s on Twitter, GitHub, and as an rOpenSci package author, you can ask for help in rOpenSci slack and ask rOpenSci team for ideas for recruiting new collaborators.\n\n\n11.2.2 Working with collaborators (including yourself)\nBranches are cheap. Use them extensively when developing features, testing out new ideas, fixing problems.\nOne of the branches is the default / main branch, where, if you follow trunk-based development, you “merge small, frequent updates”. See also GitHub flow and GitLab flow docs. You might want to frequently increment version numbers (in DESCRIPTION). One particular aspect of working with collaborators is reviewing pull requests, with some useful guidance in:\n\nThe Art of Giving and Receiving Code Reviews (Gracefully), by Alex Hill;\nGitHub documentation about PR reviews.\n\nYou might want to tinker with your GitHub repository settings to, for instance, require pull request reviews before merging. See also GitHub docs about “code owners”.\nFor making and reviewing pull requests we recommend exploring usethis functions.\nFor your “git remote” setup refer to happy git with r. See also Useful Git patterns for real life in the same book.\n\n\n11.2.3 Be generous with attributions\nIf someone contributes to your repository consider adding them in DESCRIPTION, as contributor (“ctb”) for small contributions, author (“aut”) for bigger contributions. Traditionally when citing a package in a scientific publication only “aut” authors are listed, not “ctb” contributors; and on pkgdown websites only “aut” names are listed on the homepage, all authors being listed on the authors/ page.\nAt a minimum consider adding the name of contributors near the feature/bug fix line in NEWS.md.\nYou could also use the allcontributors R package to acknowledge all contributors in the README file.\nWe recommend your being generous with such acknowledgements, because it is a nice thing to do and because it will make folks more likely to contribute again to your package or other repos of the organization.\nAs a reminder from our packaging guidelines if your package was reviewed and you feel that your reviewers have made a substantial contribution to the development of your package, you may list them in the Authors@R field with a Reviewer contributor type (\"rev\"), like so:\n    person(\"Bea\", \"Hernández\", role = \"rev\",\n    comment = \"Bea reviewed the package (v. X.X.XX) for rOpenSci, see &lt;https://github.com/ropensci/software-review/issues/116&gt;\"),\nOnly include reviewers after asking for their consent. Read more in this blog post “Thanking Your Reviewers: Gratitude through Semantic Metadata”. Note that ‘rev’ will raise a CRAN NOTE unless the package is built using R v3.5. Make sure you use roxygen2’s latest CRAN version.\nPlease do not list editors as contributors. Your participation in and contribution to rOpenSci is thanks enough!\n\n\n11.2.4 Welcoming collaborators to rOpenSci\nIf you give someone write permissions to the repository,\n\nplease contact a staff member so that this new contributor might get invited to rOpenSci’s “ropensci” GitHub organization (instead of being an outside collaborator)\nplease contact rOpenSci’s community manager or another staff member so that this new contributor might get get invited to rOpenSci Slack workspace.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Collaboration Guide</span>"
    ]
  },
  {
    "objectID": "maintenance_collaboration.html#further-resources",
    "href": "maintenance_collaboration.html#further-resources",
    "title": "11  Collaboration Guide",
    "section": "11.3 Further resources",
    "text": "11.3 Further resources\n\nrOpenSci community call Set Up Your Package to Foster a Community.\nFor re-using kind and usual answers, consider GitHub’s saved replies.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Collaboration Guide</span>"
    ]
  },
  {
    "objectID": "maintenance_changing_maintainers.html",
    "href": "maintenance_changing_maintainers.html",
    "title": "12  Changing package maintainers",
    "section": "",
    "text": "12.1 Do you want to give up maintenance of your package?\nWe have a call for contributors section in our newsletter that comes out every two weeks. The section is called Call For Contributors. In that section we highlight packages looking for new maintainers. If you are looking to leave the role of maintainer of your package, get in touch with us and we can highlight your package in our newsletter.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Changing package maintainers</span>"
    ]
  },
  {
    "objectID": "maintenance_changing_maintainers.html#do-you-want-to-take-over-maintenance-of-a-package",
    "href": "maintenance_changing_maintainers.html#do-you-want-to-take-over-maintenance-of-a-package",
    "title": "12  Changing package maintainers",
    "section": "12.2 Do you want to take over maintenance of a package?",
    "text": "12.2 Do you want to take over maintenance of a package?\nWe have a call for contributors section in our newsletter that comes out every two weeks. The section is called Call For Contributors. In that section we highlight packages looking for new maintainers. If you are not subscribed to the newsletter already, it’s a good idea to subscribe to get notified when there’s a package looking for a new maintainer.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Changing package maintainers</span>"
    ]
  },
  {
    "objectID": "maintenance_changing_maintainers.html#taking-over-maintenance-of-a-package",
    "href": "maintenance_changing_maintainers.html#taking-over-maintenance-of-a-package",
    "title": "12  Changing package maintainers",
    "section": "12.3 Taking over maintenance of a package",
    "text": "12.3 Taking over maintenance of a package\n\nAdd yourself as the new maintainer in the DESCRIPTION file, with role = c(\"aut\", \"cre\"), and make the former maintainer aut only.\nMake sure to change maintainer to your name anywhere else in the package, while retaining the former maintainer as an author (e.g, package level manual file, CONTRIBUTING.md, CITATION, etc.)\nThe Collaboration Guide has guidance about adding new maintainers and collaborators\nPackages that have been archived or orphaned on CRAN don’t need permission of the previous maintainer to be taken over on CRAN. In these cases do get in touch with us so we can offer any help as needed.\nIf the package has not been archived by CRAN and there is a maintainer change, have the old maintainer email CRAN and put in writing who the new maintainer is. Make sure to mention that email about the maintainer change when you submit the first new version to CRAN. If the old maintainer is unreachable or will not send this email get in touch with rOpenSci staff.\nIf the previous maintainer is reachable, scheduling a meeting will help you get the “lay of the land”\n\n\n12.3.1 FAQ for new maintainers\n\nThere are a few unresolved issues from the package that I don’t know how to fix. Whom may I ask for help?\nIt depends; here’s what to do in different scenarios:\n\nif the old maintainer can be contacted: reach out to them, and ask for help;\nrOpenSci slack: good for getting help on specific or general problems, see the #package-maintenance channel;\nrOpenSci discussion forum: this forum is a good option, feel free to ask any questions there;\nrOpenSci staff: feel free to get in touch with one of us via email/pinging us on GitHub issues, we’ll be happy to help;\nof course there’s general R help too if that suits your needs: Posit community forum, StackOverflow, Mastodon (#rstats), etc.\n\nHow much can/should you change in the package?\nFor general help on changing code in a package, see the Package evolution section.\nWhen thinking through this, there are many considerations.\nHow much time do you have to spend on the package? If you have very limited time, it’d be best to focus on the most critical tasks, whatever those are for the package in question. If you have ample amount of time, your goals can be larger in scope.\nHow mature is the package? If the package is mature, many people likely have code that depends on the package’s API (i.e., the exported functions, and their parameters). In addition, if there are packages that depend on your package on CRAN, then you need to check that whatever changes you make don’t break those packages. The more mature the package is, the more careful you need to be about making changes, especially with the names of exported functions, their parameters, and the exact structure of what exported functions return. Changes can be more easily made that only affect internals of the package.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Changing package maintainers</span>"
    ]
  },
  {
    "objectID": "maintenance_changing_maintainers.html#tasks-for-ropensci-staff",
    "href": "maintenance_changing_maintainers.html#tasks-for-ropensci-staff",
    "title": "12  Changing package maintainers",
    "section": "12.4 Tasks for rOpenSci staff",
    "text": "12.4 Tasks for rOpenSci staff\nAs an organization, rOpenSci is interested in making sure packages in our suite are available as long as they are useful to the community. As maintainers need to move on, we will in most cases try to get a new maintainer for each package. To these ends, the following tasks are the responsibility of rOpenSci staff.\n\nIf a repository hasn’t seen any activity (commits, issues, pull requests) in quite a long time it may simply be a mature package with little need for changes/etc., so take this into account.\nCurrent maintainer has not responded to issues/pull requests in many months, via any of emails, GitHub issues, or Slack messages:\n\nMake contact and see what the situation is. They may say they’d like to step down as maintainer, in which case look for a new maintainer\n\nCurrent maintainer is completely missing/not responding\n\nIf this happens we will try to contact the maintainer for up to one month. However, if updating the package is urgent, we may use our admin access to make changes on their behalf.\n\nPut a call out in the “Call for Contributors” section of the rOpenSci newsletter for a new maintainer - open an issue in the newsletter repo.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Changing package maintainers</span>"
    ]
  },
  {
    "objectID": "maintenance_releases.html",
    "href": "maintenance_releases.html",
    "title": "13  Releasing a package",
    "section": "",
    "text": "13.1 Versioning",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Releasing a package</span>"
    ]
  },
  {
    "objectID": "maintenance_releases.html#versioning",
    "href": "maintenance_releases.html#versioning",
    "title": "13  Releasing a package",
    "section": "",
    "text": "We strongly recommend that rOpenSci packages use semantic versioning. A detailed explanation is available in the lifecycle chapter of the R packages book.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Releasing a package</span>"
    ]
  },
  {
    "objectID": "maintenance_releases.html#releasing",
    "href": "maintenance_releases.html#releasing",
    "title": "13  Releasing a package",
    "section": "13.2 Releasing",
    "text": "13.2 Releasing\n\nUsing usethis::use_release_issue() and devtools::release() will help you remember about more checks.\nGit tag each release after every submission to CRAN. more info\nCRAN does not like too frequent updates. That said, if you notice a major problem one week after a CRAN release, explain it in cran-comments.md and try releasing a newer version.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Releasing a package</span>"
    ]
  },
  {
    "objectID": "maintenance_releases.html#news",
    "href": "maintenance_releases.html#news",
    "title": "13  Releasing a package",
    "section": "13.3 News file",
    "text": "13.3 News file\nA NEWS file describing changes associated with each version makes it easier for users to see what’s changing in the package and how it might impact their workflow. You must add one for your package, and make it easy to read.\n\nIt is mandatory to use a NEWS or NEWS.md file in the root of your package. We recommend using NEWS.md to make the file more browsable.\nYou can use our example NEWS file as a model. You can find a good NEWS file in the wild in the targets package repo for instance.\nIf you use NEWS, add it to .Rbuildignore, but not if you use NEWS.md\nUpdate the news file before every CRAN release, with a section with the package name, version and date of release, (as seen in our example NEWS file):\n\nfoobar 0.2.0 (2016-04-01)\n=========================\n\nUnder that header, put in sections as needed, including: NEW FEATURES, MINOR IMPROVEMENTS, BUG FIXES, DEPRECATED AND DEFUNCT, DOCUMENTATION FIXES and any special heading grouping a large number of changes. Under each header, list items as needed (as seen in our example NEWS file). For each item give a description of the new feature, improvement, bug fix, or deprecated function/feature. Link to any related GitHub issue like (#12). The (#12) will resolve on GitHub in Releases to a link to that issue in the repo.\nAfter you have added a git tag and pushed up to GitHub, add the news items for that tagged version to the Release notes of a release in your GitHub repo with a title like pkgname v0.1.0. See GitHub docs about creating a release.\nNew CRAN releases will be written about in our newsletter but see next chapter about marketing about how to inform more potential users about the release.\nFor more guidance about the NEWS file we suggest reading the tidyverse NEWS style guide.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Releasing a package</span>"
    ]
  },
  {
    "objectID": "maintenance_marketing.html",
    "href": "maintenance_marketing.html",
    "title": "14  Marketing your package",
    "section": "",
    "text": "Also refer to the blog post “Marketing Ideas For Your Package”.\n\n\n\nWe will help you promote your package but here are some more things to keep in mind.\n\n\n\n\nIf you hear of a use case of your package, please encourage its author to post the link to our discussion forum in the Use Cases category, for a toot (Mastodon post) from rOpenSci and inclusion in the rOpenSci monthly newsletter. We also recommend that you add a link to the use case in a “use cases in the wild” section of your README.\nPost about your package on social media (Mastodon, Bluesky, LinkedIn…) using the “#rstats” hashtag and tag rOpenSci if rOpenSci is present on that platform! This might help with contributor/user engagement. Example posts from rOpenSci itself: A package a day, Help wanted post, Use cases, Welcome post.\nWhen you release a new version of your package or release it to CRAN for the first time,\n\nMake a pull request to R Weekly with a line about the release under the “New Releases” section (or “New Packages” for the first GitHub/CRAN release).\nConsider submitting a short post about the release to rOpenSci tech notes. Contact rOpenSci Community Manager, (e.g. via Slack or info@ropensci.org). Refer to the guidelines about contributing a blog post).\nSubmit your package to lists of packages such as CRAN Task Views.\n\nIf you choose to market your package by giving a talk about it at a meetup or conference (excellent idea!) read this article by Jenny Bryan and Mara Averick.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Marketing your package</span>"
    ]
  },
  {
    "objectID": "maintenance_github_grooming.html",
    "href": "maintenance_github_grooming.html",
    "title": "15  GitHub Grooming",
    "section": "",
    "text": "15.1 Make your repository more discoverable",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>GitHub Grooming</span>"
    ]
  },
  {
    "objectID": "maintenance_github_grooming.html#repodiscoverability",
    "href": "maintenance_github_grooming.html#repodiscoverability",
    "title": "15  GitHub Grooming",
    "section": "",
    "text": "15.1.1 GitHub repo topics\nGitHub repo topics help browsing and searching GitHub repos, are used by R-universe on package pages and for search results, and are digested by codemetar for rOpenSci registry keywords.\nWe recommend:\n\nAdding “r”, “r-package” and “rstats” as topics to your package repo.\nAdding any other relevant topics to your package repo.\n\nWe might make suggestions to you after your package is onboarded.\n\n\n15.1.2 GitHub linguist\nGitHub linguist will assign a language for your repo based on the files it contains. Some packages containing a lot of C++ code might get classified as C++ rather than R packages, which is fine and shows the need for the “r”, “r-package” and “rstats” topics.\nWe recommend overriding GitHub linguist by adding or modifying a .gitattributes to your repo in two cases:\n\nIf you store HTML files in non standard places (not in docs/, e.g. in vignettes/) use the documentation overrides. Add *.html linguist-documentation=true to .gitattributes (Example in the wild)\nIf your repo contains code you haven’t authored, e.g. JavaScript code, add inst/js/* linguist-vendored to .gitattributes (Example in the wild)\n\nThis way the language classification and statistics of your repository will more closely reflect the source code it contains, as well as making it more discoverable. Notably, if linguist does not correctly recognize your repo as containing mainly R code, your package won’t appear in search results with the language:R filter. Similarly, your repo cannot be listed among the trending R repos.\nMore info about GitHub linguist overrides.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>GitHub Grooming</span>"
    ]
  },
  {
    "objectID": "maintenance_github_grooming.html#marketown",
    "href": "maintenance_github_grooming.html#marketown",
    "title": "15  GitHub Grooming",
    "section": "15.2 Market your own account",
    "text": "15.2 Market your own account\n\nAs the author of an onboarded package, you are now a member of rOpenSci’s “ropensci” GitHub organization. By default, organization memberships are private; see how to make it public in GitHub docs.\nEven if your package repo has been transferred to rOpenSci, you can pin it under your own account.\nIn general we recommend adding at least an avatar (which doesn’t need to be your face!) and your name to your GitHub profile.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>GitHub Grooming</span>"
    ]
  },
  {
    "objectID": "maintenance_evolution.html",
    "href": "maintenance_evolution.html",
    "title": "16  Package evolution - changing stuff in your package",
    "section": "",
    "text": "16.1 Philosophy of changes\nEveryone’s free to have their own opinion about how freely parameters/functions/etc. are changed in a library - rules about package changes are not enforced by CRAN or otherwise. Generally, as a library gets more mature, changes to user-facing methods (i.e., exported functions in an R package) should become very rare. Libraries that are dependencies of many other libraries are likely to be more careful about changes, and should be.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Package evolution - changing stuff in your package</span>"
    ]
  },
  {
    "objectID": "maintenance_evolution.html#the-lifecycle-package",
    "href": "maintenance_evolution.html#the-lifecycle-package",
    "title": "16  Package evolution - changing stuff in your package",
    "section": "16.2 The lifecycle package",
    "text": "16.2 The lifecycle package\nThis chapter presents solutions that do not require the lifecycle package but you might still find it useful. We recommend reading the lifecycle documentation.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Package evolution - changing stuff in your package</span>"
    ]
  },
  {
    "objectID": "maintenance_evolution.html#parameters-changing-parameter-names",
    "href": "maintenance_evolution.html#parameters-changing-parameter-names",
    "title": "16  Package evolution - changing stuff in your package",
    "section": "16.3 Parameters: changing parameter names",
    "text": "16.3 Parameters: changing parameter names\nSometimes parameter names must be changed for clarity, or for some other reason.\nA possible approach is to check if deprecated arguments are not missing, and stop providing a meaningful message.\nfoo_bar &lt;- function(x, y) {\n    if (!missing(x)) {\n        stop(\"use 'y' instead of 'x'\")\n    }\n    y^2\n}\n\nfoo_bar(x = 5)\n#&gt; Error in foo_bar(x = 5) : use 'y' instead of 'x' \nIf you want the function to be more helpful, you could change it to emit a warning but automatically take the necessary action:\nfoo_bar &lt;- function(x, y) {\n    if (!missing(x)) {\n        warning(\"use 'y' instead of 'x'\")\n        y &lt;- x\n    }\n    y^2\n}\n\nfoo_bar(x = 5)\n#&gt; 25\nBe aware of the parameter .... If your function has ..., and you have already removed a parameter (let’s call it z), a user may have older code that uses z. When they pass in z, it’s not a parameter in the function definition, and will likely be silently ignored – not what you want. Instead, leave the argument around, throwing an error if it used.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Package evolution - changing stuff in your package</span>"
    ]
  },
  {
    "objectID": "maintenance_evolution.html#functions-changing-function-names",
    "href": "maintenance_evolution.html#functions-changing-function-names",
    "title": "16  Package evolution - changing stuff in your package",
    "section": "16.4 Functions: changing function names",
    "text": "16.4 Functions: changing function names\nIf you must change a function name, do it gradually, as with any other change in your package.\nLet’s say you have a function foo.\nfoo &lt;- function(x) x + 1\nHowever, you want to change the function name to bar.\nInstead of simply changing the function name and foo no longer existing straight away, in the first version of the package where bar appears, make an alias like:\n#' foo - add 1 to an input\n#' @export\nfoo &lt;- function(x) x + 1\n\n#' @export\n#' @rdname foo\nbar &lt;- foo\nWith the above solution, the user can use either foo() or bar() – either will do the same thing, as they are the same function.\nIt’s also useful to have a message but then you’ll only want to throw that message when they use the old function, e.g.,\n#' foo - add 1 to an input\n#' @export\nfoo &lt;- function(x) {\n    warning(\"please use bar() instead of foo()\", call. = FALSE)\n    bar(x)\n}\n\n#' @export\n#' @rdname foo\nbar &lt;- function(x) x + 1\nAfter users have used the package version for a while (with both foo and bar), in the next version you can remove the old function name (foo), and only have bar.\n#' bar - add 1 to an input\n#' @export\nbar &lt;- function(x) x + 1",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Package evolution - changing stuff in your package</span>"
    ]
  },
  {
    "objectID": "maintenance_evolution.html#data-deprecate",
    "href": "maintenance_evolution.html#data-deprecate",
    "title": "16  Package evolution - changing stuff in your package",
    "section": "16.5 Data: deprecate",
    "text": "16.5 Data: deprecate\nIf you need to deprecate a dataset provided by your package, read the solution proposed by Matthijs Berends on Stack Overflow, linking to a 3-step method in Bioconductor guidance. Key is the usage of delayedAssign() to save a promise that will serve both a warning, and the data.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Package evolution - changing stuff in your package</span>"
    ]
  },
  {
    "objectID": "maintenance_evolution.html#functions-deprecate-defunct",
    "href": "maintenance_evolution.html#functions-deprecate-defunct",
    "title": "16  Package evolution - changing stuff in your package",
    "section": "16.6 Functions: deprecate & defunct",
    "text": "16.6 Functions: deprecate & defunct\nTo remove a function from a package (let’s say your package name is helloworld), you can use the following protocol:\n\nMark the function as deprecated in package version x (e.g., v0.2.0)\n\nIn the function itself, use .Deprecated() to point to the replacement function:\nfoo &lt;- function() {\n    .Deprecated(\"bar\")\n}\nThere’s options in .Deprecated for specifying a new function name, as well as a new package name, which makes sense when moving functions into different packages.\nThe message that’s given by .Deprecated is a warning, so it can be suppressed by users with suppressWarnings() if desired.\nMake a man page for deprecated functions like:\n#' Deprecated functions in helloworld\n#' \n#' These functions still work but will be removed (defunct) in the next version.\n#' \n#' \\itemize{\n#'  \\item \\code{\\link{foo}}: This function is deprecated, and will\n#'  be removed in the next version of this package.\n#' }\n#' \n#' @name helloworld-deprecated\nNULL\nThis creates a man page that users can access like ?`helloworld-deprecated` and they’ll see in the documentation index. Add any functions to this page as needed, and take away as a function moves to defunct (see below).\n\nIn the next version (v0.3.0) you can make the function defunct (that is, completely gone from the package, except for a man page with a note about it).\n\nIn the function itself, use .Defunct() like:\nfoo &lt;- function() {\n    .Defunct(\"bar\")\n}\nNote that the message in .Defunct is an error so that the function stops whereas .Deprecated uses a warning that lets the function proceed.\nIn addition, it’s good to add ... to all defunct functions so that if users pass in any parameters they’ll get the same defunct message instead of a unused argument message, so like:\nfoo &lt;- function(...) {\n    .Defunct(\"bar\")\n}\nWithout ... gives:\nfoo(x = 5)\n#&gt; Error in foo(x = 5) : unused argument (x = 5)\nAnd with ... gives:\nfoo(x = 5)\n#&gt; Error: 'foo' has been removed from this package\nMake a man page for defunct functions like:\n#' Defunct functions in helloworld\n#' \n#' These functions are gone, no longer available.\n#' \n#' \\itemize{\n#'  \\item \\code{\\link{foo}}: This function is defunct.\n#' }\n#' \n#' @name helloworld-defunct\nNULL\nThis creates a man page that users can access like ?`helloworld-defunct` and they’ll see in the documentation index. Add any functions to this page as needed. You’ll likely want to keep this man page indefinitely.\n\n16.6.1 Testing deprecated functions\nYou don’t have to change the tests of deprecated functions until they are made defunct.\n\nConsider any changes made to a deprecated function. Along with using .Deprecated inside the function, did you change the parameters at all in the deprecated function, or create a new function that replaces the deprecated function, etc. Those changes should be tested if any are made.\nRelated to above, if the deprecated function is simply getting a name change, perhaps test that the old and new functions return identical results.\nsuppressWarnings() could be used to suppress the warning thrown from .Deprecated, but tests are not user facing, so it is not that bad if the warning is thrown in tests, and the warning could even be used as a reminder to the maintainer.\n\nOnce a function is made defunct, its tests are simply removed.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Package evolution - changing stuff in your package</span>"
    ]
  },
  {
    "objectID": "maintenance_evolution.html#renaming-packages",
    "href": "maintenance_evolution.html#renaming-packages",
    "title": "16  Package evolution - changing stuff in your package",
    "section": "16.7 Renaming packages",
    "text": "16.7 Renaming packages\nRenaming a package that is in early development is fine. It can be the opportunity, before review, to comply with our naming advice.\nRenaming a package that is already widely adopted and/or released on CRAN is problematic. CRAN has a policy stating that Package names on CRAN are persistent and in general it is not permitted to change a package’s name. The package under its old name might be a dependency of packages, scripts, and feature in documentation, scientific publications, and blog posts, etc.\nWhen radically changing the interface, starting a new package from scratch, like httr2 which is the second generation of httr; or creating editions of a package like for testthat, are better strategies. If you also maintain the old package, you can soft-deprecate it with a startup message, such as in httr. This allows users and package authors to choose when/whether to update their codebase to the new package or edition. If you copy code from another package, make sure to acknowledge authors of the code you reuse by listing them in DESCRIPTION with a comment that states they were authors of the original package. Example.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Package evolution - changing stuff in your package</span>"
    ]
  },
  {
    "objectID": "maintenance_evolution.html#archivalguidance",
    "href": "maintenance_evolution.html#archivalguidance",
    "title": "16  Package evolution - changing stuff in your package",
    "section": "16.8 Archiving packages",
    "text": "16.8 Archiving packages\nSoftware generally has a finite lifespan, and packages may eventually need to be archived. Archived packages are archived and moved to a dedicated GitHub organization, ropensci-archive. Prior to archiving, the contents of the README file should be moved to an alternative location (such as “README-OLD.md”), and replaced with minimal contents including something like the following:\n# &lt;package name&gt;\n\n[![Project Status: Unsupported](https://www.repostatus.org/badges/latest/unsupported.svg)](https://www.repostatus.org/#unsupported)\n[![Peer-review badge](https://badges.ropensci.org/&lt;issue_number&gt;_status.svg)](https://github.com/ropensci/software-review/issues/&lt;issue_number&gt;)\n\nThis package has been archived. The former README is now in [README-old](&lt;link-to-README-old&gt;).\nThe repo status badge should be “unsupported” for formerly released packages, or “abandoned” for former concept or WIP packages, in which case the badge code above should be replaced with:\n[![Project Status: Abandoned](https://www.repostatus.org/badges/latest/abandoned.svg)](https://www.repostatus.org/#abandoned)\nAn example of a minimal README in an archived package is in ropensci-archive/monkeylearn. Once the README has been copied elsewhere and reduced to minimal form, the following steps should be followed:\n\nClose issues with a sentence explaining the situation and linking to this guidance.\nArchive the repository on GitHub (also under repo settings).\nTransfer the repository to ropensci-archive, or request an rOpenSci staff member to transfer it (you can email info@ropensci.org).\n\nArchived packages may be unarchived if authors or a new person opt to resume maintenance. For that please contact rOpenSci.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Package evolution - changing stuff in your package</span>"
    ]
  },
  {
    "objectID": "maintenance_curation.html",
    "href": "maintenance_curation.html",
    "title": "17  Package Curation Policy",
    "section": "",
    "text": "17.1 The package registry\nThe elements of infrastructure described below needed for the implementation of the policy are in some cases partly built and in other cases not yet begun. We aim to adopt this policy in part to prioritize work on these components.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Package Curation Policy</span>"
    ]
  },
  {
    "objectID": "maintenance_curation.html#the-package-registry",
    "href": "maintenance_curation.html#the-package-registry",
    "title": "17  Package Curation Policy",
    "section": "",
    "text": "The rOpenSci package registry is a central listing of R packages currently or formerly maintained or reviewed by rOpenSci. It contains essential package metadata including development and review status, and will be the source of data for display on websites, badges, etc. It will allow this listing to be maintained independently of package or infrastructure hosting platforms.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Package Curation Policy</span>"
    ]
  },
  {
    "objectID": "maintenance_curation.html#staff-maintained-packages",
    "href": "maintenance_curation.html#staff-maintained-packages",
    "title": "17  Package Curation Policy",
    "section": "17.2 Staff-maintained packages",
    "text": "17.2 Staff-maintained packages\nStaff-maintained packages are developed and maintained by rOpenSci staff as part of rOpenSci projects. These packages may also be peer-reviewed packages, but are not necessarily peer reviewed. Many are infrastructure packages that fall out of scope for peer review.\n\nStaff-maintained packages will be listed in the registry with the tag “staff_maintained” and listed on rOpenSci’s packages web page or similar venues with tag “staff-maintained”\nThese packages will be stored in the “ropensci” GitHub organization\nStaff-maintained packages and their docs will be built by rOpenSci system. This system does not send notifications but it outputs results as GitHub commit status (red check mark or red cross).\nWhen the packages fail checks, rOpenSci staff will endeavor to fix changes, prioritizing packages based on user base (downloads), reverse dependencies, or strategic goals.\nOn a biannual or annual basis, rOpenSci will review all packages that have been failing for over a month to determine whether to transfer them to the “ropensci-archive” GitHub organization.\nPackages consistently failing and without an ongoing plan to return to active maintenance will move to “archive” status. When archived, staff packages will move to the “ropensci-archive” repository (to be created) and gain the “archived” type in the registry. They will not be built on the rOpenSci system.\nArchived packages will not be displayed by default on the packages web page. A special tab of packages pages will display these with \"type\": \"archived\" that were either peer-reviewed or staff-maintained.\nArchived packages can be unarchived when the old or a new maintainer is willing to address the problems and wants to revive the package. For that please contact rOpenSci. They are transferred to the ropenscilabs organization.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Package Curation Policy</span>"
    ]
  },
  {
    "objectID": "maintenance_curation.html#peer-reviewed-packages",
    "href": "maintenance_curation.html#peer-reviewed-packages",
    "title": "17  Package Curation Policy",
    "section": "17.3 Peer-reviewed packages",
    "text": "17.3 Peer-reviewed packages\nPeer-reviewed packages are those contributed to the rOpenSci by the community and have passed through peer review. They need to be in-scope at the time of submission to be reviewed.\n\nUpon acceptance, these peer-reviewed packages are transferred from the author’s GitHub to the “ropensci” GitHub organization or alternatively tracked by adding them to a JSON file.\nPeer-reviewed packages will be in the registry tagged as “peer-reviewed” and have a peer-reviewed badge in their README.\nPeer-reviewed packages will be listed on rOpenSci’s web page or similar venues with the tag “peer-reviewed”\nPeer-reviewed packages and their docs will be built by rOpenSci system. This system does not send notifications but it outputs results as GitHub commit status (red check mark or red cross).\nAnnually or biannually, rOpenSci staff will review packages in a failing state or have been failing for extended periods, and contact the authors to determine ongoing maintenance status and expected updates. Based on this exchange, rOpenSci may opt to retain the package’s current status with the expectation of an updates, contribute support or seek a new maintainer, or transfer the package to “archived” status.\nBased on user base (measured by downloads), reverse dependencies, or rOpenSci strategic goals, rOpenSci staff may support failing packages via PRs reviewed by package authors, or direct changes (if authors are unresponsive for approximately a month). rOpenSci will also provide support to package authors on request, both by staff and community volunteers, based on time available.\nAt the author’s request, or if authors are unresponsive to inquiries for approximately a month, rOpenSci may seek a new maintainer for select peer-reviewed packages it deems have high community value based on user base/downloads, reverse dependencies, or rOpenSci strategic goals.\nWhen archived, these packages will move from the “ropensci” GitHub organization to the “ropensci-archive” organization (or author GitHub accounts if desired), following transfer guidance. They will gain the “archived” type in the registry. They will retain “peer-reviewed” tags and badges. They will not be built on rOpenSci system.\nArchived packages will not be displayed by default. A special tab of packages pages will display these with \"type\": \"archived\" that were either peer-reviewed or staff-maintained.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Package Curation Policy</span>"
    ]
  },
  {
    "objectID": "maintenance_curation.html#legacy-acquired-packages",
    "href": "maintenance_curation.html#legacy-acquired-packages",
    "title": "17  Package Curation Policy",
    "section": "17.4 Legacy acquired packages",
    "text": "17.4 Legacy acquired packages\n“Legacy” packages are packages not created or maintained by rOpenSci staff and not peer reviewed, but are under the rOpenSci GitHub organization(s) due to historical reasons. (Prior to establishing the peer review process and its scope, rOpenSci absorbed packages from various developers without well-defined criteria.)\n\nrOpenSci will transfer legacy packages back to author organizations and repositories. If authors are uninterested, we will transfer them to the “ropensci-archive” repository following transfer guidance. If packages are in-scope, rOpenSci will inquire if authors would like to submit them to the Software Review process.\nLegacy packages will not be listed in the package registry.\nExceptions may be made for packages that are vital parts of the R and/or rOpenSci package ecosystem which are actively monitored by staff.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Package Curation Policy</span>"
    ]
  },
  {
    "objectID": "maintenance_curation.html#incubator-packages",
    "href": "maintenance_curation.html#incubator-packages",
    "title": "17  Package Curation Policy",
    "section": "17.5 Incubator packages",
    "text": "17.5 Incubator packages\n“Incubator” packages are in-development packages created by staff or community members as part of community projects, such as those created at unconferences\n\nIncubator packages will live in the “ropenscilabs” organization.\nIncubator packages will appear in the package registry with the “incubator” tag\nIncubator packages will not appear on the website by default, but packages pages will include an “experimental packages” tab.\nIncubator packages and their docs will be built by rOpenSci system. This system does not send notifications but it outputs results as GitHub commit status (red check mark or red cross). The docs will indicate clearly that the package is experimental.\nBiannually or annually, rOpenSci will contact incubator maintainers about repositories at least three months old, inquiring about development status and author preferences for migration to peer-review, ropensci-archive, or to author organizations. Based on the response, the package will be migrated immediately, peer review will be initiated, or migration will be deferred to the next review. Incubator packages will be migrated to the ropensci-archive by default after one year, following transfer guidance.\nArchived incubator packages will gain the “archived” type.\n\n\n17.5.1 Incubator non-R-packages\n\nThe “incubator” organization will also include non-R package projects.\nThese projects will not be listed in the registry or appear on a web page, and will not be automatically built.\nMigration policy will be the same as for R packages, with appropriate migration locations (e.g., ropensci-books)\nIf archived, non-R-packages will move to “ropensci-archive” following transfer guidance.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Package Curation Policy</span>"
    ]
  },
  {
    "objectID": "maintenance_curation.html#books",
    "href": "maintenance_curation.html#books",
    "title": "17  Package Curation Policy",
    "section": "17.6 Books",
    "text": "17.6 Books\nrOpenSci books are long-form documentation, often bookdown-formatted, related to rOpenSci packages, projects, or themes, created by both rOpenSci staff and community members.\n\nBooks will live in the “ropensci-books” organization\nBooks will be hosted at books.ropensci.org\nBooks may be mature or in development, but must have minimal outlines/content before migrating into “ropensci-books” (e.g. from “ropenscilabs”).\nThe authorship and development status of a book should be clearly described on its home page and README.\nrOpenSci may provide badges or templates (e.g., “In development,” “Community Maintained,”) for authors to use on book home pages in the future",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Package Curation Policy</span>"
    ]
  },
  {
    "objectID": "maintenance_contributing.html",
    "href": "maintenance_contributing.html",
    "title": "18  Contributing Guide",
    "section": "",
    "text": "This chapter describes our Contributing Guide that outlines how you can make code and non-code contributions to the rOpenSci project.\n\n\n\nSo you want to contribute to rOpenSci? Fantastic! We developed the rOpenSci Community Contributing Guide to welcome you to rOpenSci and help you recognize yourself as a potential contributor. It will help you figure out what you might gain by giving your time, expertise, and experience, match your needs with things that will help rOpenSci’s mission, and connect you with resources to help you along the way.\nOur staff and community actively foster a welcoming environment where users and developers from different backgrounds and skill levels learn, share ideas and innovate together openly through shared norms and shared software. Participation in all rOpenSci activities is supported by our Code of Conduct.\nWe welcome code and non-code contributions from new and seasoned coders at any career stage, and in any sector. You don’t have to be a developer! Maybe you want to spend 30 minutes sharing your package use case in our public forum or reporting a bug, one hour learning by attending a Community Call, five hours reviewing an R package submitted for open peer review, or maybe you want to make an ongoing commitment to help maintain a package.\nWhat are some benefits of contributing?\n\nConnect with a community that shares your interest in making science more open\nLearn from people outside your domain who use R with challenges similar to yours\nAsk and answer new research questions by getting to know new software tools and allies\nFeel confident and supported in your efforts to write code and develop software\nGain visibility for your open source work\nImprove the software you use or build\nLevel up your R skills and help others level up theirs\nLevel up your writing skills\nGet more exposure for your package\n\nConsult our Contributing Guide and browse “What brings you here?” to find which I want to … statements fit you best and choose your path! To help you recognize yourself, we’ve grouped these into: Discover; Connect; Learn; Build; Help. For each category, we list examples of what those contributions might look like and we link to our resources for the details you need.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Contributing Guide</span>"
    ]
  },
  {
    "objectID": "booknews.html",
    "href": "booknews.html",
    "title": "19  NEWS",
    "section": "",
    "text": "19.1 dev version",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>NEWS</span>"
    ]
  },
  {
    "objectID": "booknews.html#dev-version",
    "href": "booknews.html#dev-version",
    "title": "19  NEWS",
    "section": "",
    "text": "2025-09-23, Add section on challenges (non-responding reviewers). Also move text on non-responding authors to this section. (#955).\n2025-07-11, document better when the pkgdown websites of rOpenSci packages are re-built (#919).\n2025-07-11, add minimal mention of example datasets (#868).\n2025-07-17, add category for rOpenSci internal and peer-review tools (#848).\n2025-07-09, add more details on how to safeguard docs building for rOpenSci packages (#910, @rmgpanw)\n2025-07-11, add mentions of tools useful for translation and localization (#812).\n2025-07-09, add mention of tinytest. (#904)\n2025-07-09, add mention of the allcontributors package. (#899)\n2025-07-09, stop recommending the use of the rOpenSci forum for package discussions. (#898)\n2025-07-09, add a mention of ROR IDs (#909).\n2025-07-09, remove the upper-case from the NEWS.md template and update the real example link. (#896)\n2025-07-01, many typo fixes and English language improvements (#912, @Moohan)\n2025-03-11, document drawbacks of renaming widely used package (#831)\n2025-03-13, add a note on how to deprecate data (#649)\n2025-04-10, add link to pkgcheck vignette on our testing environment (#589)\n2025-04-10, replace the link to the Mozilla Code Review guide with explicit items (#835)\n2025-04-03, document how to put the system on vacation(#865)\n2025-04-03, add details about MEE process and structure the author guide a bit more (@robitalec, #862)\n2025-03-11, add note in the packaging guide about checking maintenance status of dependencies (#881)\n2025-03-11, add item about “top level code” in packaging guide (#879)\n2025-03-11, explicitly mention need to acknowledge authors of bundled code (#873)\n2025-03-27, add guidance for packages wrapping external software (#866)\n2025-02-25, add official rule on submitting one package at once only (@maurolepore, #876)\n2025-03-11, mention the Air formatting tool wherever we mention the styler package (#875)\n2025-02-25, require the default git branch to not be called master (#863)\n2024-09-06, update math guidance for pkgdown based on pkgdown’s update (#838)\n2024-08-30, remove mention of Twitter since rOpenSci no longer maintains an active Twitter account (@yabellini, #827)\n2024-07-17, document dashboard in editors’ chapter (@mpadge, #829)\n2024-06-27, document the author’s submit response step in the author guide (@jmaspons, #832).",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>NEWS</span>"
    ]
  },
  {
    "objectID": "booknews.html#section",
    "href": "booknews.html#section",
    "title": "19  NEWS",
    "section": "19.2 0.9.0",
    "text": "19.2 0.9.0\n\n2024-01-09, update roxygen2 wording (@vincentvanhees, #792).\n2023-12-15, update roxygen2 advice, mainly linking to roxygen2 website (#750).\n2023-09-15, add suggestions for API packages (#496).\nTranslation to Spanish!\n2023-07-17, Update Aims and Scope to include translation packages, remove experimental text-processing categories, and provide clarifications around API wrappers\n2023-05-04, Added link to Bioconductor book (#663, @llrs).\n2023-04-26, Changed suggested lifecycle stage in authors guide (#661, @bart1).\n2023-04-25, changed the COI section to use parallel construction (#659, @eliocamp).\n2022-07-04, Add resources around GitHub workflows (#479, @maurolepore).\n2023-02-14, update instructions for CITATION to reflect new CRAN policies (#604, #609).\n2023-02-14, add package maintainer cheatsheet (#608).\n2023-01-25, add Mastodon as social media (#592, by @yabellini).\n2023-01-25, add Mastodon as social media (#592, by @yabellini).\n2023-01-20, fix small formating error (#590 by @eliocamp).\n2022-11-22, mention shinytest2 near shinytest.\n2022-09-20, add editor instruction to add “stats” label to stats submissions\n2022-09-20, fixed link to reviewer approval template (#548), and rendering of editor’s template (#547)\n2022-08-23, add recommendation to document argument default (@Bisaloo, #501)\n2022-08-06, fix link to R Packages book (#498)\n2022-07-21, mention GitHub Discussions and GitHub issue templates. (#482)\n2022-07-21, highlight values for reviewing in more places (#481)\n2022-07-20, Explanation of package submission via non-default branches (#485), added @s3alfisc to contributor list.\n2022-07-20, add how to volunteer as a reviewer (#457).\n2022-06-23, Expanded explanation of Codecov, added @ewallace to contributor list (#484)",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>NEWS</span>"
    ]
  },
  {
    "objectID": "booknews.html#section-1",
    "href": "booknews.html#section-1",
    "title": "19  NEWS",
    "section": "19.3 0.8.0",
    "text": "19.3 0.8.0\n\n2022-06-03, Remove former references to now-archived “rodev” package\n2022-05-30, Advise that reviewers can also directly call @ropensci-review-bot check package\n2022-05-27, Add Mark Padgham to list of authors\n2022-05-27, Add devguider::prerelease_checklist item to pre-release template (#463)\n2022-05-13, Align version number in DESCRIPTION file with actual version (#443)\n2022-05-13, Update guidelines for CONTRIBUTING.md (#366, #462)\n2022-05-09, Add section on authorship of included code, thanks to @KlausVigo (#388).\n2022-05-09, Remove mention of ‘rev’ role requiring R v3.5\n2022-05-05, Move all scripts from local inst directory to ropensci-org/devguider pkg.\n2022-05-03, Update package archiving guidance to reduce README to minimal form.\n2022-04-29, Advise that authors can directly call @ropensci-review-bot check package.\n2022-04-29, Describe pkgcheck-action in CI section.\n2022-04-29, Update scope in policies section to include statistical software.\n2022-04-29, Add prelease.R script to open pre-release GitHub issue & ref in appendix.\n2022-04-26, Add GitHub 2FA recommendation to package security.\n2022-03-29, Remove references to Stef Butland, former community manager.\n2022-03-28, Add comments on submission planning about time commitment.\n2022-03-24, Remove approval comment template (coz it’s automatically generated by the bot now).\n2022-03-21, rephrase CITATION guidance to make it less strict. Also mentions CITATION.cff and the cffr package.\n2022-03-08, add links to blogs related to package development (#389).\n2022-02-17, update redirect instructions (@peterdesmet, #387).\n2022-02-14, link to Michael Lynch’s post Why Good Developers Write Bad Unit Tests.\n2022-02-14, mention more packages for testing like dittodb, vcr, httptest, httptest2, webfakes.\n2022-01-10, make review templates R Markdown files (@Bisaloo, #340).\n2022-01-14, update guidance on CI services (#377)\n2022-01-11, update guidance around branches, with resources suggested by @ha0ye and @statnmap.\n2022-01-10, divide author’s guide into sub-sections, and add extra info including pkgcheck.\n2021-11-30, adds links to examples of reviews, especially tough but constructive ones (with help from @noamross, @mpadge, #363).\n2021-11-19, add recommended spatial packages to scaffolding section (software-review-meta#47)\n2021-11-18, update advice on grouping functions for pkgdown output (#361)",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>NEWS</span>"
    ]
  },
  {
    "objectID": "booknews.html#section-2",
    "href": "booknews.html#section-2",
    "title": "19  NEWS",
    "section": "19.4 0.7.0",
    "text": "19.4 0.7.0\n\n2021-11-04, add mentions of stat software review to software review intro and to the first book page (#342).\n2021-11-04, mention pkgcheck in the author guide (@mpadge, #343).\n2021-11-04, add editors’ responsibilities including Editor etiquette for commenting on packages on which you aren’t handling/reviewing (@jhollist, #354).\n2021-11-04, give precise examples of tools for installation instructions (remotes, pak, R-universe).\n2021-11-04, add more bot guidance (less work for editors).\n2021-10-07, add guidance for editorial management (recruiting, inviting, onboarding, offboarding editors).\n2021-09-14, add a requirement that there is at least one HTML vignette.\n2021-09-03, add some recommendations around git. (@annakrystalli, #341)\n2021-07-14, clarify the categories data extraction and munging by adding examples. (@noamross, #337)\n2021-05-20, add guidance around setting up your package to foster a community, inspired by the recent rOpenSci community call. (with help from @Bisaloo, #289, #308)\n2021-04-27, no longer ask reviewers to ask covr as it’ll be done by automatic tools, but ask them to pay attention to tests skipped.\n2021-04-02, add citation guidance.\n2021-04-02, stop asking reviewers to run goodpractice as this is part of editorial checks.\n2021-03-23, launched a new form for reviewer volunteering.\n2021-02-24, add guidance around the use of @ropensci-review-bot.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>NEWS</span>"
    ]
  },
  {
    "objectID": "booknews.html#section-3",
    "href": "booknews.html#section-3",
    "title": "19  NEWS",
    "section": "19.5 0.6.0",
    "text": "19.5 0.6.0\n\n2021-02-04, add guidance to enforce package versioning and tracking of changes through review (@annakrystalli, #305)\n2021-01-25, add a translation of the review template in Spanish (@Fvd, @maurolepore, #303)\n2021-01-25, the book has now better citation guidance in case you want to cite this very guide (@Bisaloo, #304).\n2021-01-12, add some more guidance on escaping examples (#290).\n2021-01-12, mention the lifecycle package in the chapter about package evolution (#287).\n2021-01-12, require overlap information is put in documentation (#292).\n2021-01-12, start using the bookdown::bs4_book() template.\n2021-01-12, add a sentence about whether it is acceptable to push a new version of a package to CRAN within two weeks of the most recent version if you have just been made aware of, and fixed, a major bug (@sckott, #283)\n2021-01-12, mention the HTTP testing in R book.\n2021-01-12, mention testthat snapshot tests.\n2021-01-12, remove mentions of Travis CI and link to Jeroen Ooms’ blog post about moving away from Travis.\n2021-01-12, update the package curation policy: mention a possible exception for legacy packages that are vital parts of the R and/or rOpenSci package ecosystem which are actively monitored by staff. (@noamross, #293)",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>NEWS</span>"
    ]
  },
  {
    "objectID": "booknews.html#section-4",
    "href": "booknews.html#section-4",
    "title": "19  NEWS",
    "section": "19.6 0.5.0",
    "text": "19.6 0.5.0\n\n2020-10-08, add help about link checking (@sckott, #281)\n2020-10-08, update JOSS instructions (@karthik, #276)\n2020-10-05, add links to licence resources (@annakrystalli, #279)\n2020-10-05, update information about the contributing guide (@stefaniebutland, #280)\n2020-09-11, make reviewer approval a separate template (@bisaloo, #264)\n2020-09-22, add package curation policy (@noamross, #263)\n2020-09-11, add more guidance and requirements for docs at submission (@annakrystalli, #261)\n2020-09-14, add more guidance on describing data source in DESCRIPTION (@mpadge, #260)\n2020-09-14, add more guidance about tests of deprecated functions (@sckott, #213)\n2020-09-11, update the CI guidance (@bisaloo, @mcguinlu, #269)\n2020-09-11, improve the redirect guidance (@jeroen, @mcguinlu, #269)",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>NEWS</span>"
    ]
  },
  {
    "objectID": "booknews.html#section-5",
    "href": "booknews.html#section-5",
    "title": "19  NEWS",
    "section": "19.7 0.4.0",
    "text": "19.7 0.4.0\n\n2020-04-02, give less confusing code of conduct guidance: the reviewed packages’ COC is rOpenSci COC (@Bisaloo, @cboettig, #240)\n2020-03-27, add section on Ethics, Data Privacy and Human Subjects Research to Policies chapter\n2020-03-12, mention GitHub Actions as a CI provider.\n2020-02-24, add guide for inviting a guest editor.\n2020-02-14, add mentions of the ropensci-books GitHub organisation and associated subdomain.\n2020-02-10, add field and laboratory reproducibility tools as a category in scope.\n2020-02-10, add more guidance about secrets and package development in the security chapter.\n2020-02-06, add guidance about Bioconductor dependencies (#246).\n2020-02-06, add package logo guidance (#217).\n2020-02-06, add one CRAN gotcha: single quoting software names(#245, @aaronwolen)\n2020-02-06, improve guidance regarding the replacement of “older” pkgdown website links and source (#241, @cboettig)\n2020-02-06, rephrase the EiC role (#244).\n2020-02-06, remove the recommendation to add rOpenSci footer (https://github.com/ropensci/software-review-meta/issues/79).\n2020-02-06, remove the recommendation to add a review mention to DESCRIPTION but recommends mentioning the package version when reviewers are added as “rev” authors.\n2020-01-30, slightly changes the advice on documentation re-use: add a con; mention @includeRmd and @example; correct the location of Rmd fragments (#230).\n2020-01-30, add more guidance for the editor in charge of a dev guide release (#196, #205).\n2020-01-22, add guidance in the editor guide about not transferred repositories.\n2020-01-22, clarify forum guidance (for use cases and in general).\n2020-01-22, mention an approach for pre-computing vignettes so that the pkgdown website might get build on rOpenSci docs server.\n2020-01-22, document the use of mathjax with rotemplate (@Bisaloo, #199).\n2020-01-20, add guidance for off-thread interaction and COIs (@noamross, #197).\n2020-01-20, add advice on specifying dependency minimum versions (@karthik, @annakrystalli, #185).\n2020-01-09, start using GitHub actions instead of Travis for deployment.\n-2019-12-11, add note in Documentation sub-section of Packaging Guide section about referencing the new R6 support in roxygen2 (ropensci/dev_guide#189)\n2019-12-11, add new CRAN gotcha about having ‘in R’ or ‘with R’ in your package title (@bisaloo, ropensci/dev_guide#221)",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>NEWS</span>"
    ]
  },
  {
    "objectID": "booknews.html#section-6",
    "href": "booknews.html#section-6",
    "title": "19  NEWS",
    "section": "19.8 0.3.0",
    "text": "19.8 0.3.0\n\n2019-10-03, include in the approval template that maintainers should include link to the docs.ropensci.org/pkg site (ropensci/dev_guide#191)\n2019-09-26, add instructions for handling editors to nominate packages for blog posts (ropensci/dev_guide#180)\n2019-09-26, add chapter on changing package maintainers (ropensci/dev_guide#128) (ropensci/dev_guide#194)\n2019-09-26, update Slack room to use for editors (ropensci/dev_guide#193)\n2019-09-11, update instructions in README for rendering the book locally (ropensci/dev_guide#192)\n2019-08-05, update JOSS submission instructions (ropensci/dev_guide#187)\n2019-07-22, break “reproducibility” category in policies into component parts. (ropensci/software-review-meta#81)\n2019-06-18, add link to rOpenSci community call “Security for R” to security chapter.\n2019-06-17, fix formatting of Appendices B-D in the pdf version of the book (bug report by @IndrajeetPatil, #179)\n2019-06-17, add suggestion to use R Markdown hunks approach when the README and the vignette share content. (ropensci/dev_guide#161)\n2019-06-17, add mention of central building of documentation websites.\n2019-06-13, add explanations of CRAN checks. (ropensci/dev_guide#177)\n2019-06-13, add mentions of the rodev helper functions where relevant.\n2019-06-13, add recommendation about using cat for str.*() methods. RStudio assumes that str uses cat, if not when loading an R object the str prints to the console in RStudio and doesn’t show the correct object structure in the properties. ([@mattfidler] (https://github.com/mattfidler/) #178)\n2019-06-12, add more details about git flow.\n2019-06-12, remove recommendation about roxygen2 dev version since the latest stable version has what is needed. (@bisaloo, #165)\n2019-06-11, add mention of usethis functions for adding testing or vignette infrastructure in the part about dependencies in the package building guide.\n2019-06-10, use the new URL for the dev guide, https://devguide.ropensci.org/\n2019-05-27, add more info about the importance of the repo being recognized as a R package by linguist (@bisaloo, #172)\n2019-05-22, update all links eligible to HTTPS and update links to the latest versions of Hadley Wickham and Jenny Bryan’s books (@bisaloo, #167)\n2019-05-15, add book release guidance for editors. (ropensci/dev_guide#152)",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>NEWS</span>"
    ]
  },
  {
    "objectID": "booknews.html#section-7",
    "href": "booknews.html#section-7",
    "title": "19  NEWS",
    "section": "19.9 0.2.0",
    "text": "19.9 0.2.0\n\n2019-05-23, add CRAN gotcha: in the Description field of your DESCRIPTION file, enclose URLs in angle brackets.\n2019-05-13, add more content to the chapter about contributing.\n2019-05-13, add more precise instructions about blog posts to approval template for editors.\n2019-05-13, add policies allowing using either &lt;- or = within a package as long as the whole package is consistent.\n2019-05-13, add request for people to tell us if they use our standards/checklists when reviewing software elsewhere.\n2019-04-29, add requirement and advice on testing packages using devel and oldrel R versions on Travis.\n2019-04-23, add a sentence about why being generous with attributions and more info about ctb vs aut.\n2019-04-23, add link to Daniel Nüst’s notes about migration from XML to xml2.\n2019-04-22, add use of rOpenSci forum to maintenance section.\n2019-04-22, ask reviewer for consent to be added to DESCRIPTION in review template.\n2019-04-22, use a darker blue for links (feedback by @kwstat, #138).\n2019-04-22, add book cover.\n2019-04-08, improve formatting and link text in README (@katrinleinweber, #137)\n2019-03-25, add favicon (@wlandau, #136).\n2019-03-21, improve Travis CI guidance, including link to examples. (@mpadge, #135)\n2019-02-07, simplify code examples in Package Evolution section (maintenance_evolution.Rmd file) (@hadley, #129).\n2019-02-07, added a PDF file to export (request by @IndrajeetPatil, #131).",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>NEWS</span>"
    ]
  },
  {
    "objectID": "booknews.html#section-8",
    "href": "booknews.html#section-8",
    "title": "19  NEWS",
    "section": "19.10 0.1.5",
    "text": "19.10 0.1.5\n\n2019-02-01, created a .zenodo.json to explicitly set editors as authors.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>NEWS</span>"
    ]
  },
  {
    "objectID": "booknews.html#first-release-0.1.0",
    "href": "booknews.html#first-release-0.1.0",
    "title": "19  NEWS",
    "section": "19.11 First release 0.1.0",
    "text": "19.11 First release 0.1.0\n\n2019-01-23, add details about requirements for packages running on all major platforms and added new section to package categories.\n2019-01-22, add details to the guide for authors about the development stage at which to submit a package.\n2018-12-21, inclusion of an explicit policy for conflict of interest (for reviewers and editors).\n2018-12-18, added more guidance for editor on how to look for reviewers.\n2018-12-04, onboarding was renamed Software Peer Review.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>NEWS</span>"
    ]
  },
  {
    "objectID": "booknews.html#place-holder-0.0.1",
    "href": "booknews.html#place-holder-0.0.1",
    "title": "19  NEWS",
    "section": "19.12 place-holder 0.0.1",
    "text": "19.12 place-holder 0.0.1\n\nAdded a NEWS.md file to track changes to the book.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>NEWS</span>"
    ]
  },
  {
    "objectID": "reviewtemplate.html",
    "href": "reviewtemplate.html",
    "title": "20  Review template",
    "section": "",
    "text": "You can save this as an R Markdown file, or delete the YAML and save it as a Markdown file.\n---\ntitle: \"review\"\noutput: \n  rmarkdown::md_document:\n    pandoc_args: [\n      \"--wrap=none\"\n    ]\n---\n\n## Package Review\n\n*Please check off boxes as applicable, and elaborate in comments below.  Your review is not limited to these topics, as described in the reviewer guide*\n\n- **Briefly describe any working relationship you have (had) with the package authors.**\n- [ ] As the reviewer I confirm that there are no [conflicts of interest](https://devguide.ropensci.org/policies.html#coi) for me to review this work (if you are unsure whether you are in conflict, please speak to your editor _before_ starting your review).\n\n#### Documentation\n\nThe package includes all the following forms of documentation:\n\n- [ ] **A statement of need:** clearly stating problems the software is designed to solve and its target audience in README\n- [ ] **Installation instructions:** for the development version of package and any non-standard dependencies in README\n- [ ] **Vignette(s):** demonstrating major functionality that runs successfully locally\n- [ ] **Function Documentation:** for all exported functions\n- [ ] **Examples:** (that run successfully locally) for all exported functions\n- [ ] **Community guidelines:** including contribution guidelines in the README or CONTRIBUTING, and DESCRIPTION with `URL`, `BugReports` and `Maintainer` (which may be autogenerated via `Authors@R`).\n\n#### Functionality\n\n- [ ] **Installation:** Installation succeeds as documented.\n- [ ] **Functionality:** Any functional claims of the software have been confirmed.\n- [ ] **Performance:** Any performance claims of the software have been confirmed.\n- [ ] **Automated tests:** Unit tests cover essential functions of the package and a reasonable range of inputs and conditions. All tests pass on the local machine.\n- [ ] **Packaging guidelines**: The package conforms to the rOpenSci packaging guidelines.\n\nEstimated hours spent reviewing:\n\n- [ ] Should the author(s) deem it appropriate, I agree to be acknowledged as a package reviewer (\"rev\" role) in the package DESCRIPTION file.\n\n---\n\n### Review Comments",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Review template</span>"
    ]
  },
  {
    "objectID": "editortemplate.html",
    "href": "editortemplate.html",
    "title": "21  Editor’s template",
    "section": "",
    "text": "### Editor checks:\n\n- [ ] **Documentation**: The package has sufficient documentation available online (README, pkgdown docs) to allow for an assessment of functionality and scope without installing the package. In particular,\n    - [ ] Is the case for the package well made?\n    - [ ] Is the reference index page clear (grouped by topic if necessary)?\n    - [ ] Are vignettes readable, sufficiently detailed and not just perfunctory?\n- [ ] **Fit**: The package meets criteria for [fit](https://devguide.ropensci.org/policies.html#package-categories) and [overlap](https://devguide.ropensci.org/policies.html#overlap).\n- [ ] **Installation instructions:** Are installation instructions clear enough for human users?\n- [ ] **Tests**: If the package has some interactivity / HTTP / plot production etc. are the tests using [state-of-the-art tooling](https://devguide.ropensci.org/building.html#testing)?\n- [ ] **Contributing information**: Is the documentation for contribution clear enough e.g. tokens for tests, playgrounds?\n- [ ] **License:** The package has a CRAN or OSI accepted license.\n- [ ] **Project management**: Are the issue and PR trackers in a good shape, e.g. are there outstanding bugs, is it clear when feature requests are meant to be tackled?\n---\n\n#### Editor comments\n\n---",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Editor's template</span>"
    ]
  },
  {
    "objectID": "reviewrequesttemplate.html",
    "href": "reviewrequesttemplate.html",
    "title": "22  Review request template",
    "section": "",
    "text": "Editors may make use of the e-mail template below in recruiting reviewers.\n\nDear [REVIEWER]\n\nHi, this is [EDITOR]. [FRIENDLY BANTER]. I'm writing to ask if you would be willing to review a package for rOpenSci. As you probably know, rOpenSci conducts peer review of R packages contributed to our collection in a manner similar to journals.\n\nThe package, [PACKAGE] by [AUTHOR(S)], does [FUNCTION]. You can find it on GitHub here: [REPO LINK]. We conduct our open review process via GitHub as well, here: [ONBOARDING ISSUE]\n\nIf you accept, note that we ask reviewers to complete reviews in three weeks. (We’ve found it takes a similar amount of time to review a package as an academic paper.)\n\nOur [reviewers guide] details what we look for in a package review, and includes links to example reviews. Our standards are detailed in our [packaging guide], and we provide a reviewer [template] for you to use. Please make sure you do not have a [conflict of interest](https://devguide.ropensci.org/policies.html#coi) preventing you from reviewing this package. If you have questions or feedback, feel free to ask me or post to the [rOpenSci forum].\n\nrOpenSci’s community is our best asset. \nWe aim for reviews to be open, non-adversarial, and focused on improving software quality. \nBe respectful and kind! \nSee our reviewers guide and [code of conduct](https://ropensci.org/code-of-conduct/) for more.\n\n[IF MENTORSHIP REQUESTED: You indicated in your form that you'd prefer mentorship for your first review.  \nYou are free to use me as a resource during this process, including asking questions by email and Slack (you will receive an invite to the rOpenSci Slack), and sharing draft reviews for feedback before posting. \nI'm also happy to have a brief videocall to walk through the process.  \nPlease let me know in your reply if you would like to schedule one.]\n\nAre you able to review? If you can not, suggestions for alternate reviewers are always helpful. If I don't hear from you within a week, I will assume you are unable to\nreview at this time.\n\nThank you for your time.\n\nSincerely,\n\n[EDITOR]\n\n[reviewers guide]: https://devguide.ropensci.org/reviewerguide.html\n[packaging guide]: https://devguide.ropensci.org/building.html\n[template]: https://devguide.ropensci.org/reviewtemplate.html\n[rOpenSci forum]: https://discuss.ropensci.org/",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Review request template</span>"
    ]
  },
  {
    "objectID": "approval2template.html",
    "href": "approval2template.html",
    "title": "23  Reviewer approval comment template",
    "section": "",
    "text": "## Reviewer Response\n\n\n#### Final approval (post-review)\n\n- [ ] **The author has responded to my review and made changes to my satisfaction. I recommend approving this package.**\n\n&lt;!--Please update the estimate below.--&gt;\n\nEstimated hours spent reviewing:",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Reviewer approval comment template</span>"
    ]
  },
  {
    "objectID": "newstemplate.html",
    "href": "newstemplate.html",
    "title": "24  NEWS template",
    "section": "",
    "text": "foobar 0.2.0 (2016-04-01)\n=========================\n\n### New features\n\n  * New function added `do_things()` to do things (#5)\n\n### Minor improvements\n\n  * Improved documentation for `things()` (#4)\n\n### Bug fixes\n\n  * Fix parsing bug in `stuff()` (#3)\n\n### Deprecated and defunct\n\n  * `hello_world()` now deprecated and will be removed in a\n     future version, use `hello_mars()`\n\n### Documentation fixes\n\n  * Clarified the role of `hello_mars()` vs. `goodbye_mars()`\n\n\n### (a special: any heading grouping a large number of changes under one thing)\n\n    * blablabla.\n\nfoobar 0.1.0 (2016-01-01)\n=========================\n\n### New features\n\n  * released to CRAN",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>NEWS template</span>"
    ]
  },
  {
    "objectID": "bookreleaseissue.html",
    "href": "bookreleaseissue.html",
    "title": "25  Book release guidance",
    "section": "",
    "text": "Editors preparing for a release can run the prelease.R script in the inst directory of this repository to automatically open a GitHub issue with checkpoints for all current issues assigned to the upcoming release milestone, along with the following checklist. Before running the script, please manually check the assignment of issues to the milestone. This should be run one month prior to planned release.\n\n## Release book version &lt;insert version&gt;\n\n### Repo maintenance between releases\n\n- [ ] Look at the issue tracker for [the dev guide](https://github.com/ropensci/dev_guide/issues) and for [software review meta](https://github.com/ropensci/software-review-meta/issues) for changes still to be made in the dev guide. Assign dev guide issues to milestones corresponding to versions, either the next one or the one after that, e.g. [version 0.3.0](https://github.com/ropensci/dev_guide/milestone/2). Encourage PRs, have them reviewed.\n\n### 1 month prior to release\n\n- [ ] Remind editors to open issues/PRs for items they want to see in the next version.\n\n- [ ] Run [the `devguide_prerelease()` function](https://github.com/ropensci-org/devguider) from the `devguider` package.\n\n- [ ] Ask editors for any feedback you need from them before release.\n\n- [ ] For each contribution/change make sure the NEWS in Appendix.Rmd were updated.\n\n- [ ] Plan a date for release in communication with rOpenSci's Community Manager who will give you a date for publishing a blog post / tech note.\n\n### 2 weeks prior to release\n\n- [ ] Draft a blog post / tech note about the release with enough advance for editors and then Community Manager to review it (2 weeks). [Example](https://github.com/ropensci/roweb3/pull/291), [General blog post instructions](https://blogguide.ropensci.org/), [specific instructions for release posts](#releaseblogpost). \n\n- [ ] Make a PR from the dev branch to the master branch, ping editors on GitHub and Slack. Mention the blog post draft in a comment on this PR.\n\n### Release\n\n- [ ] Check URLs using [the `devguide_urls()` function from the {devguider} package](https://github.com/ropensci-org/devguider)\n\n- [ ] Check spelling using [the `devguide_spelling()` function from the {devguider} package](https://github.com/ropensci-org/devguider). Update the [WORDLIST](https://github.com/ropensci/dev_guide/blob/master/inst/WORDLIST) as necessary.\n\n- [ ] Squash and merge the PR from dev to master.\n\n- [ ] GitHub release, check Zenodo release.\n\n- [ ] Re-build (for Zenodo metadata update in the book) or wait for daily build\n\n- [ ] Re-create the dev branch\n\n- [ ] Finish your blog post / tech note PR. Underline the most important aspects to be highlighted in tweets as part of the PR discussion.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Book release guidance</span>"
    ]
  },
  {
    "objectID": "redirect.html",
    "href": "redirect.html",
    "title": "26  How to set a redirect",
    "section": "",
    "text": "26.1 Non GitHub pages site (e.g. Netlify)\nReplace the content of the current website with an index.html and 404.html files both containing:",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>How to set a redirect</span>"
    ]
  },
  {
    "objectID": "redirect.html#non-git-hub-pages-site-e-g-netlify",
    "href": "redirect.html#non-git-hub-pages-site-e-g-netlify",
    "title": "26  How to set a redirect",
    "section": "",
    "text": "&lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv=\"refresh\" content=\"0;URL=https://docs.ropensci.org/&lt;pkgname&gt;/\"&gt;  \n&lt;/head&gt;\n&lt;/html&gt;",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>How to set a redirect</span>"
    ]
  },
  {
    "objectID": "redirect.html#git-hub-pages",
    "href": "redirect.html#git-hub-pages",
    "title": "26  How to set a redirect",
    "section": "26.2 GitHub pages",
    "text": "26.2 GitHub pages\nYou can set up the redirect from your main user gh-pages repository:\n\ncreate a new repository (if you don’t have one yet): https://github.com/&lt;username&gt;/&lt;username&gt;.github.io.\nIn this repository create a directory &lt;pkgname&gt; containing 2 files: a index.html and 404.html file, which both redirect to the new location (see previous subsection).\nTest that https://&lt;username&gt;.github.io/&lt;pkgname&gt;/index.html now redirects.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>How to set a redirect</span>"
    ]
  },
  {
    "objectID": "bot_cheatsheet.html",
    "href": "bot_cheatsheet.html",
    "title": "27  Bot commands",
    "section": "",
    "text": "27.1 For everyone\nNote that we clean issue threads by removing extraneous content, so the record of you having asked for bot-help will most often quickly be erased or hidden.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Bot commands</span>"
    ]
  },
  {
    "objectID": "bot_cheatsheet.html#for-everyone",
    "href": "bot_cheatsheet.html#for-everyone",
    "title": "27  Bot commands",
    "section": "",
    "text": "27.1.1 See the list of commands available to you\nIf you need a quick reminder!\n@ropensci-review-bot help\n\n\n27.1.2 See the code of conduct\n@ropensci-review-bot code of conduct",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Bot commands</span>"
    ]
  },
  {
    "objectID": "bot_cheatsheet.html#for-authors",
    "href": "bot_cheatsheet.html#for-authors",
    "title": "27  Bot commands",
    "section": "27.2 For authors",
    "text": "27.2 For authors\n\n27.2.1 Check package with pkgcheck\nWhen your package has substantially changed.\n@ropensci-review-bot check package\n\n\n27.2.2 Submit response to reviewers\nTo record your response to reviewers.\n@ropensci-review-bot submit response &lt;response-url&gt;\nwhere &lt;response_url&gt; is the link to the response comment in the issue thread.\n\n\n27.2.3 Finalize repo transfer\nAfter you’ve accepted the invitation to rOpenSci GitHub organization and transferred your GitHub repository to it, run this command to re-gain admin access to your repository.\n@ropensci-review-bot finalize transfer of &lt;package-name&gt;\n\n\n27.2.4 Get a new invite after approval\nIf you missed the one-week window to accept the invitation to the rOpenSci GitHub organization, run this to receive a new one.\n@ropensci-review-bot invite me to ropensci/&lt;package-name&gt;",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Bot commands</span>"
    ]
  },
  {
    "objectID": "bot_cheatsheet.html#for-the-editor-in-chief",
    "href": "bot_cheatsheet.html#for-the-editor-in-chief",
    "title": "27  Bot commands",
    "section": "27.3 For the editor-in-chief",
    "text": "27.3 For the editor-in-chief\n\n27.3.1 Assign an editor\n@ropensci-review-bot assign @username as editor\n\n\n27.3.2 Put submission on hold\nSee editorial policy.\n@ropensci-review-bot put on hold\n\n\n27.3.3 Indicate the submission is out of scope\nDo not forget to first post a comment explaining the decision and thanking the author(s) for their submission.\n@ropensci-review-bot out-of-scope",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Bot commands</span>"
    ]
  },
  {
    "objectID": "bot_cheatsheet.html#for-assigned-editor",
    "href": "bot_cheatsheet.html#for-assigned-editor",
    "title": "27  Bot commands",
    "section": "27.4 For assigned editor",
    "text": "27.4 For assigned editor\n\n27.4.1 Put submission on hold\nSee editorial policy.\n@ropensci-review-bot put on hold\n\n\n27.4.2 Check package with pkgcheck\nGenerally only on pre-submission inquiries, or when authors otherwise indicate that the package has substantially changed.\n@ropensci-review-bot check package\n\n\n27.4.3 Check statistical standards\nGenerally only on pre-submission inquiries, or when authors otherwise indicate that the package has substantially changed.\n@ropensci-review-bot check srr\n\n\n27.4.4 Check that README has software review badge\nTowards the end of the submission process.\n@ropensci-review-bot check readme\n\n\n27.4.5 Indicate you are now seeking reviewers\n@ropensci-review-bot seeking reviewers\n\n\n27.4.6 Assign a reviewer\n@ropensci-review-bot assign @username as reviewer\nor\n@ropensci-review-bot add @username as reviewer\n\n\n27.4.7 Remove a reviewer\n@ropensci-review-bot remove @username from reviewers\n\n\n27.4.8 Tweak review due date\n@ropensci-review-bot set due date for @username to YYYY-MM-DD\n\n\n27.4.9 Record that a review was submitted\n@ropensci-review-bot submit review &lt;review-url&gt; time &lt;time in hours&gt;\n\n\n27.4.10 Approve package\n@ropensci-review-bot approve &lt;package-name&gt;",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Bot commands</span>"
    ]
  }
]