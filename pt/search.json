[
  {
    "objectID": "index.pt.html",
    "href": "index.pt.html",
    "title": "Pacotes rOpenSci: Desenvolvimento, manutenção e revisão por pares",
    "section": "",
    "text": "rOpenSci - Guia para desenvolvedores\n\n Este trabalho está licenciado com uma licença Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License. Utilize o Zenodo DOI para citar esta obra.\n@software{ropensci_2024_10797633,\n  author       = {rOpenSci and\n                  Anderson, Brooke and\n                  Chamberlain, Scott and\n                  DeCicco, Laura and\n                  Gustavsen, Julia and\n                  Krystalli, Anna and\n                  Lepore, Mauro and\n                  Mullen, Lincoln and\n                  Ram, Karthik and\n                  Ross, Noam and\n                  Salmon, Maëlle and\n                  Vidoni, Melina and\n                  Riederer, Emily and\n                  Sparks, Adam and\n                  Hollister, Jeff},\n  title        = {rOpenSci Packages: Development, Maintenance, and\n                   Peer Review\n                  },\n  month        = mar,\n  year         = 2024,\n  publisher    = {Zenodo},\n  version      = {0.9.0},\n  doi          = {10.5281/zenodo.10797633},\n  url          = {https://doi.org/10.5281/zenodo.10797633},\n}\n\nVocê também pode ler a versão em PDF deste livro.",
    "crumbs": [
      "rOpenSci - Guia para desenvolvedores"
    ]
  },
  {
    "objectID": "preface.pt.html",
    "href": "preface.pt.html",
    "title": "Prefácio",
    "section": "",
    "text": "Boas vindas! Este livro é um guia para autores, mantenedores, revisores e editores da rOpenSci.\nA primeira seção do livro contém as nossas diretrizes para criar e testar pacotes do R.\nA segunda seção é dedicada ao processo de revisão por pares de software da rOpenSci: o que é esse processo, quais são as nossas políticas e guias específicos para autores, editores e revisores durante todo o processo. Para revisão de software estatístico, consulte a página da Web e os recursos do projeto.\nA terceira e última seção apresenta as nossas práticas recomendadas para você cuidar do seu pacote depois que ele tiver sido integrado: como colaborar com outros desenvolvedores, como documentar lançamentos, como promover o seu pacote e como aproveitar o GitHub como uma plataforma de desenvolvimento. A terceira seção também apresenta um capítulo para quem deseja começar a contribuir com os pacotes do rOpenSci.\nEsperamos que você ache o guia útil e claro, e agradecemos suas sugestões no issue tracker do livro. Feliz embalagem R!\nA equipe editorial da rOpenSci.\nEste livro é um documento vivo. Você pode ver as atualizações das nossas práticas recomendadas e políticas nas notas de versão.\nVocê pode citar este livro usando os metadados Zenodo e DOI.\nSe você quiser contribuir com este livro (sugestões, correções), consulte o repositório do GitHub em particular as diretrizes de contribuição. Obrigado!\nAgradecemos a todos os autores, revisores e editores convidados por nos ajudarem a aprimorar o sistema e este guia ao longo dos anos. Agradecemos também às seguintes pessoas que fizeram contribuições para este guia e suas versões anteriores: Katrin Leinweber,, John Baumgartner,, François Michonneau,, Christophe Dervieux,, Lorenzo Busetto,, Ben Marwick,, Nicholas Horton,, Chris Kennedy,, Mark Padgham,, Jeroen Ooms,, Sean Hughes,, Jan Gorecki,, Jemma Stachelek,, Dean Attali,, Julia Gustavsen,, Nicholas Tierney,, Rich FitzJohn,, Tiffany Timbers,, Hilmar Lapp,, Miles McBain,, Bryce Mecum,, Jonathan Carroll,, Carl Boettiger,, Florian Privé,, Stefanie Butland,, Daniel Possenriede,, Hadley Wickham,, Mauro Lepore,, Matthew Fidler,, Luke McGuinness,, Aaron Wolen,, Indrajeet Patil,, Kevin Wright,, Will Landau,, Hugo Gruson,, Hao Ye,, Sébastien Rochette,, Edward Wallace,, Alexander Fischer,, Maxime Jaunatre,, Thomas Zwagerman. Informe-nos se esquecemos de reconhecer a sua contribuição!",
    "crumbs": [
      "Prefácio"
    ]
  },
  {
    "objectID": "pkg_building.pt.html",
    "href": "pkg_building.pt.html",
    "title": "1  Guia de desenvolvimento de pacotes",
    "section": "",
    "text": "1.1 Nome do pacote e metadados",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Guia de desenvolvimento de pacotes</span>"
    ]
  },
  {
    "objectID": "pkg_building.pt.html#package-name-and-metadata",
    "href": "pkg_building.pt.html#package-name-and-metadata",
    "title": "1  Guia de desenvolvimento de pacotes",
    "section": "",
    "text": "1.1.1 Como nomear seu pacote\n\nRecomendamos fortemente nomes curtos e descritivos em letras minúsculas. Se o seu pacote tratar de um ou mais serviços comerciais, verifique se o nome não viola as diretrizes de marca. Você pode verificar se o nome do seu pacote está disponível, é informativo e não é ofensivo usando a função pak::pkg_name_check(); use também um mecanismo de pesquisa para ver se é ofensivo em um idioma diferente do inglês. Em particular, não escolha um nome de pacote que já esteja sendo usado no CRAN ou no Bioconductor.\nExiste um equilíbrio entre as vantagens de um nome de pacote exclusivo e um nome de pacote menos original.\n\nUm nome de pacote mais exclusivo pode ser mais fácil de rastrear (para você e nós avaliarmos o uso do pacote, por exemplo, menos falsos positivos ao digitar seu nome na pesquisa de código do GitHub) e pesquisar (para quando as pessoas usuárias perguntarem “como usar o pacote blah” em um mecanismo de pesquisa).\nPor outro lado, um nome único demais pode fazer com que o pacote seja menos detectável (ou seja, não seja possível encontrá-lo ao pesquisar “como fazer isso em R”). Isso pode ser um argumento para nomear seu pacote com algo muito próximo ao tópico, como geojson).\n\nEncontre outros aspectos interessantes sobre como nomear seu pacote neste texto do blog do Nick Tierney (em inglês) e, caso você mude de ideia, descubra como renomear seu pacote nesta outra postagem do blog do Nick.\n\n\n\n1.1.2 Criando metadados para seu pacote\nRecomendamos que você use o pacote codemetar para criar e atualizar um arquivo JSON CodeMeta para seu pacote por meio de codemetar::write_codemeta(). Ele incluirá automaticamente todas as informações úteis, incluindo tópicos do GitHub. O CodeMeta usa termos do Schema.org, portanto, à medida que ganha popularidade, os metadados JSON do seu pacote podem ser usados por serviços de terceiros, talvez até por mecanismos de pesquisa.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Guia de desenvolvimento de pacotes</span>"
    ]
  },
  {
    "objectID": "pkg_building.pt.html#platforms",
    "href": "pkg_building.pt.html#platforms",
    "title": "1  Guia de desenvolvimento de pacotes",
    "section": "1.2 Plataformas",
    "text": "1.2 Plataformas\n\nOs pacotes devem funcionar em todas as principais plataformas (Windows, macOS, Linux). Pode haver exceções para pacotes que interajam com funções específicas do sistema ou que adaptem utilitários que só funcionam em plataformas limitadas, mas deve-se fazer todo o possível para garantir a compatibilidade entre plataformas, incluindo a compilação específica em cada sistema ou a containerização de utilitários externos.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Guia de desenvolvimento de pacotes</span>"
    ]
  },
  {
    "objectID": "pkg_building.pt.html#package-api",
    "href": "pkg_building.pt.html#package-api",
    "title": "1  Guia de desenvolvimento de pacotes",
    "section": "1.3 API do pacote",
    "text": "1.3 API do pacote\n\n1.3.1 Nomeando funções e argumentos\n\nA nomenclatura das funções e dos argumentos deve ser escolhida de modo a trabalhar em conjunto para formar uma API de programação comum e lógica que seja fácil de ler e de autocompletar.\n\nConsidere um esquema de nomenclatura objeto_verbo() para as funções do seu pacote que usam um tipo de dados comum ou interagem com uma API comum. objeto refere-se aos dados/API e verbo a ação principal. Esse esquema ajuda a evitar conflitos de nome com pacotes que podem ter verbos semelhantes e torna o código legível e fácil de preencher automaticamente. Por exemplo, em stringi as funções que começam com stri_ manipulam strings (stri_join(), stri_sort(), e em googlesheets funções que começam com gs_ são chamadas para a API do Google Sheets (gs_auth(), gs_user(), gs_download()).\n\nPara funções que manipulam um objeto/dado e retornam um objeto/dado do mesmo tipo, faça com que o objeto/dado seja o primeiro argumento da função para aumentar a compatibilidade com o operador pipe (|&gt; do R base, %&gt;% do pacote magrittr).\nRecomendamos fortemente usar snake_case em vez de todos os outros estilos, a menos que esteja fazendo a portabilidade de um pacote que já esteja sendo amplamente utilizado.\nEvite conflitos de nomes de funções com pacotes básicos ou outros pacotes populares (por exemplo ggplot2, dplyr, magrittr, data.table)\nA nomenclatura e a ordem dos argumentos devem ser consistentes entre as funções que usam entradas semelhantes.\nAs funções do pacote que importam dados não devem importar dados para o ambiente global, mas, em vez disso, devem retornar objetos. As atribuições ao ambiente global devem ser evitadas em geral.\n\n\n\n1.3.2 Mensagens do console\n\nUse o pacote cli ou as ferramentas do R básico (message() e warning()) para se comunicar com as pessoas que usam suas funções.\nOs destaques do pacote cli incluem: empacotamento automático, respeito a convenção NO_COLOR, muitos elementos semânticos e ampla documentação. Mais informações neste texto em inglês.\nPor favor, não use print() ou cat() a menos que seja para um print.*() ou str.*(), pois esses métodos de impressão de mensagens são mais difíceis de serem silenciados.\nForneça uma maneira de suprimir a verbosidade, de preferência em nível de pacote: torne a criação de mensagens dependente de uma variável ou opção de ambiente (como “usethis.quiet” no pacote usethis), em vez de um parâmetro da função. O controle das mensagens poderia ser feito em vários níveis (“nenhum”, “informar”, “debugar”) em vez de ser lógico (nenhuma mensagem / todas as mensagens). O controle da verbosidade é útil para quem utiliza a função, mas também em testes. Você pode encontrar mais comentários interessantes nesta issue do guia de design do tidyverse\nVocê pode fornecer traduções para as mensagens do seu pacote. O pacote potools pode te ajudar com essa tarefa.\n\n\n\n1.3.3 Interfaces interativas/gráficas\nSe estiver fornecendo uma interface gráfica de usuário (GUI) (como um aplicativo Shiny), para facilitar o fluxo de trabalho, inclua um mecanismo para reproduzir automaticamente as etapas realizadas na GUI. Isso pode incluir a geração automática de código para reproduzir os mesmos resultados, a saída de valores intermediários produzidos na ferramenta interativa ou simplesmente um mapeamento claro e bem documentado entre as ações da GUI e as funções usadas. (Consulte também a seção “Testes” abaixo).\nO pacote tabulizer por exemplo, tem um fluxo de trabalho interativo para extrair tabelas, mas também pode extrair apenas coordenadas para que seja possível executar novamente como um script. Além disso, dois exemplos de aplicativos brilhantes que geram código são https://gdancik.shinyapps.io/shinyGEO/ e https://github.com/wallaceEcoMod/wallace/.\n\n\n1.3.4 Verificação de entrada\nRecomendamos que seu pacote use um método consistente de sua escolha para verificação de entradas (inputs) – seja o R básico, um pacote em R ou ajudantes personalizados.\n\n\n1.3.5 Pacotes que envolvem recursos da Web (clientes de API)\nSe o seu pacote acessar uma API da Web ou outro recurso da Web,\n\nCertifique-se de que as solicitações enviem um agente de usuário, ou seja, uma maneira de identificar o que (seu pacote) ou quem enviou a solicitação. Deve ser possível substituir o agente de usuário padrão do pacote. Idealmente, o agente de usuário deve ser diferente nos serviços de integração contínua e no desenvolvimento (com base, por exemplo, nos nomes de usuário do GitHub das pessoas desenvolvedoras).\nVocê pode escolher padrões diferentes (melhores) do que os da API e, nesse caso, deve documentá-los.\nSeu pacote deve ajudar com a paginação, permitindo que os usuários não se preocupem com isso, pois o pacote faz todas as solicitações necessárias.\nSeu pacote deve ajudar a limitar a taxa de acordo com as regras da API.\nSeu pacote deve reproduzir erros de API e possivelmente explicá-los em mensagens de erro informativas.\nSeu pacote pode exportar funções de alto nível e funções de baixo nível, sendo que estas últimas permitem que os usuários chamem os pontos de acesso (endpoints) da API diretamente com mais controle (como gh::gh()).\n\nPara obter mais informações, consulte a postagem do blog: Por que você deve (ou não deve) criar um cliente de API (em inglês).\n\n\n1.3.6 Pacotes que envolvem software externo\n\nDocumente claramente como instalar o pacote, incluindo todos os pacotes ou bibliotecas externas necessários, incluindo, quando aplicável, etapas explícitas em sistemas operacionais comuns.\nForneça uma função de relatório de situação (sitrep) para verificar se o software foi instalado, com dicas caso algo esteja faltando. Exemplo do pacote greta.\nSe possível, forneça uma função que ajude na instalação. Exemplo no pacote hugodown.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Guia de desenvolvimento de pacotes</span>"
    ]
  },
  {
    "objectID": "pkg_building.pt.html#code-style",
    "href": "pkg_building.pt.html#code-style",
    "title": "1  Guia de desenvolvimento de pacotes",
    "section": "1.4 Estilo de código e práticas recomendadas",
    "text": "1.4 Estilo de código e práticas recomendadas\n\nPara obter mais informações sobre como estilizar seu código, nomear funções e scripts R dentro da seção R/ recomendamos a leitura do capítulo R Code do livro R Packages (em inglês). Recomendamos o uso do Air ou do pacote styler para automatizar parte do estilo do código. Também sugerimos a leitura do Guia de estilo do Tidyverse (em inglês).\nVocê pode optar por usar = ao invés de &lt;- desde que seja consistente com uma escolha em seu pacote. Recomendamos evitar o uso de -&gt; para atribuição em um pacote. Se você usar &lt;- em seu pacote e também usar R6 nesse pacote, você será forçado a usar = para atribuição em seu R6Class - isso não é considerado uma inconsistência porque você não pode usar &lt;- nesse caso.\nVocê pode usar o pacote lintr para identificar algumas possíveis áreas de melhoria. Exemplo de fluxo de trabalho.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Guia de desenvolvimento de pacotes</span>"
    ]
  },
  {
    "objectID": "pkg_building.pt.html#citation-file",
    "href": "pkg_building.pt.html#citation-file",
    "title": "1  Guia de desenvolvimento de pacotes",
    "section": "1.5 Arquivo CITATION",
    "text": "1.5 Arquivo CITATION\n\nSe o seu pacote ainda não tiver um arquivo CITATION, você poderá criar um com usethis::use_citation() e preenchê-lo com os valores gerados pela função citation().\nO CRAN exige que os arquivos CITATION sejam declarados como itens bibentry e não na forma previamente aceita de citEntry().\nSe você arquivar cada versão de seu repositório do GitHub no Zenodo, adicione a tag DOI principal do Zenodo ao arquivo CITATION.\nSe um dia depois de revisão na rOpenSci você publicar um artigo sobre seu pacote, adicione-o ao arquivo CITATION.\nMenos relacionado ao seu pacote em si, mas ao que o apoia: se o seu pacote envolve um recurso específico, como uma fonte de dados ou, digamos, um algoritmo estatístico, lembre as pessoas que utilizam o software sobre como citar esse recurso por meio de, por exemplo, citHeader(). Talvez até mesmo adicione a referência do recurso.\n\nComo exemplo, veja o arquivo CITATION do dynamite que faz referência ao manual do R, bem como a outras publicações associadas.\ncitHeader(\"To cite dynamite in publications use:\")\n\nbibentry(\n  key = \"dynamitepaper\",\n  bibtype  = \"Misc\",\n  doi = \"10.48550/ARXIV.2302.01607\",\n  url = \"https://arxiv.org/abs/2302.01607\",\n  author = c(person(\"Santtu\", \"Tikka\"), person(\"Jouni\", \"Helske\")),\n  title = \"dynamite: An R Package for Dynamic Multivariate Panel Models\",\n  publisher = \"arXiv\",\n  year = \"2023\"\n)\n\nbibentry(\n  key = \"dmpmpaper\",\n  bibtype  = \"Misc\",\n  title    = \"Estimating Causal Effects from Panel Data with Dynamic \n    Multivariate Panel Models\",\n  author = c(person(\"Santtu\", \"Tikka\"), person(\"Jouni\", \"Helske\")),\n  publisher = \"SocArxiv\",\n  year     = \"2022\",\n  url      = \"https://osf.io/preprints/socarxiv/mdwu5/\"\n)\n\nbibentry(\n  key = \"dynamite\",\n  bibtype  = \"Manual\",\n  title    = \"Bayesian Modeling and Causal Inference for Multivariate\n    Longitudinal Data\",\n  author = c(person(\"Santtu\", \"Tikka\"), person(\"Jouni\", \"Helske\")),\n  note  = \"R package version 1.0.0\",\n  year     = \"2022\",\n  url      = \"https://github.com/ropensci/dynamite\"\n)\n\nVocê também pode criar e armazenar um CITATION.cff graças ao pacote cffr. Ele também fornece um fluxo de trabalho do GitHub Action para manter o CITATION.cff atualizado.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Guia de desenvolvimento de pacotes</span>"
    ]
  },
  {
    "objectID": "pkg_building.pt.html#readme",
    "href": "pkg_building.pt.html#readme",
    "title": "1  Guia de desenvolvimento de pacotes",
    "section": "1.6 README",
    "text": "1.6 README\n\nTodos os pacotes devem ter um arquivo README, denominado README.md na raiz do repositório. O README deve incluir, de cima para baixo:\n\nO nome do pacote.\nSelos (badges) para integração contínua e cobertura de testes, o selo para revisão por pares da rOpenSci assim que ele for iniciado (veja abaixo), um selo do repostatus.org e quaisquer outros selos (por exemplo do R-universe).\nUma breve descrição dos objetivos do pacote (o que ele faz? por que seria interessante usá-lo?), com links descritivos para todas as vinhetas (vignettes), a menos que o pacote seja pequeno e haja apenas uma vinheta repetindo o README. Certifique-se também de que as vinhetas sejam renderizadas e legíveis, consulte a seção “site de documentação”).\nInstruções de instalação usando, por exemplo, o pacote remotes, pacote pak ou R-universe.\nQualquer configuração adicional necessária (tokens de autenticação, etc.).\nBreve demonstração de uso.\nSe aplicável, como o pacote se compara a outros pacotes semelhantes e/ou como ele se relaciona com outros pacotes.\nInformações de citação, ou seja, direcione a forma de citação preferida no README adicionando o texto padrão “aqui está como citar meu pacote”. Veja, por exemplo o README do pacote ecmwfr.\n\n\nSe você usar outro selo de status de repositório, como o ciclo de vida, adicione também um selo do repostatus.org. Exemplo de um README de repositório com dois selos de status de repositório.\n\nDepois de enviar um pacote e ele ter sido aprovado na verificação editorial, adicione um selo de revisão por pares por meio do\n\n[![rOpenSci software peer-review](https://badges.ropensci.org/&lt;issue_id&gt;_status.svg)](https://github.com/ropensci/software-review/issues/&lt;issue_id&gt;)\nonde issue_id é o número da Issue no repositório software-review. Por exemplo, o selo para rtimicropem usa o número 126, pois é o número da Issue de revisão. O selo indicará primeiro “under review” (em revisão) e depois “peer-reviewed” (revisado por pares) assim que o seu pacote tiver sido integrado (Issue marcada como “approved” (aprovada) e fechada), e será vinculado à Issue de revisão.\n\nSe o seu README tiver muitos selos, considere ordená-los em uma tabela HTML para facilitar a obtenção de informações. Veja exemplos no repositóriondrake e no repositório qualtRics. As seções possíveis são:\n\nDesenvolvimento (status de integração contínua (CI), ver o Capítulo sobre CI, canal do Slack para discussão, repostatus)\nEdição ou Publicação (selos de versão do CRAN e data de lançamento do METACRAN, selo de checagem da API do CRAN, selo do Zenodo)\nEstatísticas/Uso (downloads, por exemplo: selos de quantidade de downloads do r-hub/cranlogs) A tabela deve ser mais larga do que longa para não mascarar o restante do README.\n\nSe o seu pacote se conectar a uma fonte de dados ou serviço on-line, ou envolver outro software, considere que o README do seu pacote pode ser o ponto de partida de quem usa o utiliza pela primeira vez. Ele deve fornecer informações suficientes para entender a natureza dos dados, do serviço ou do software e fornecer links para outros dados e documentação relevantes. Por exemplo, um README não deve se limitar a dizer: “Fornece acesso ao GooberDB”, mas também incluir, “…, um repositório on-line de avistamentos de Goober na América do Sul. Mais informações sobre o GooberDB e a documentação da estrutura e dos metadados do banco de dados podem ser encontradas em link”.\nRecomendamos não criar o README.md diretamente, mas a partir de um README.Rmd (um arquivo R Markdown) se você tiver algum código de demonstração. A vantagem do .Rmd é que você pode combinar texto com código que pode ser facilmente atualizado sempre que seu pacote for atualizado.\nConsidere o uso da função usethis::use_readme_rmd() para obter um modelo para o arquivo README.Rmd e para configurar automaticamente uma verificação para garantir que o arquivo README.md seja sempre mais recente que o README.Rmd antes de fazer um commit.\nExemplos extensos devem ser mantidos em uma vinheta. Se você quiser tornar as vinhetas mais acessíveis antes de instalar o pacote, sugerimos criar um site para seu pacote.\nAdicionar um código de conduta e as diretrizes de contribuição.\nVeja o README do pacote gistr para um bom exemplo de README a ser seguido em um pacote pequeno, e o README do pacote bowerbird para um bom exemplo de README para um pacote maior.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Guia de desenvolvimento de pacotes</span>"
    ]
  },
  {
    "objectID": "pkg_building.pt.html#documentation",
    "href": "pkg_building.pt.html#documentation",
    "title": "1  Guia de desenvolvimento de pacotes",
    "section": "1.7 Documentação",
    "text": "1.7 Documentação\n\n1.7.1 Geral\n\nTodas as funções exportadas de pacote devem ser totalmente documentadas com exemplos.\nSe houver possível sobreposição ou confusão com outros pacotes que forneçam funcionalidade semelhante ou que tenham um nome semelhante, adicione uma nota no README, na vinheta principal e, potencialmente, no campo Descrição do DESCRIPTION. Exemplos em README do rtweet, README do rebird e o pacote slurmR (que não é parte da rOpenSci).\nO pacote deve conter documentação geral para ?pacote(ou ?`pacote-package` se houver um conflito de nomes). Opcionalmente, você pode usar ambos ?pacote e ``?pacote-package`` para o arquivo de manual do pacote, usando a etiqueta@aliasesdo roxygen. [usethis::use_package_doc()`](https://usethis.r-lib.org/reference/use_package_doc.html) adiciona o modelo para a documentação geral.\nO pacote deve conter pelo menos um HTML que ofereça uma cobertura substancial das funções do pacote, ilustrando casos de uso realistas e como as funções devem interagir. Se o pacote for pequeno, a vinheta e o README poderão ter conteúdo muito semelhante.\nComo no caso de um README, a documentação geral ou as vinhetas podem ser o primeiro ponto de entrada para quem usa o pacote. Se o seu pacote se conectar a uma fonte de dados ou a um serviço on-line, ou envolver outro software, ele deverá fornecer informações suficientes para entender a natureza dos dados, do serviço ou do software e fornecer links para outros dados e documentação relevantes. Por exemplo, a introdução ou a documentação de uma vinheta não deve se limitar a dizer: “Fornece acesso ao GooberDB”, mas também incluir: “…, um repositório on-line de avistamentos de Goober na América do Sul. Mais informações sobre o GooberDB e a documentação da estrutura e dos metadados do banco de dados podem ser encontradas no link”. Qualquer vinheta deve descrever o conhecimento necessário para que seja possível entender a vinheta antecipadamente.\n\nA vinheta geral deve apresentar uma série de exemplos que progridam em complexidade, do uso básico ao avançado.\n\nA funcionalidade que provavelmente será usada apenas para desenvolvimento mais avançado pode ser melhor colocada em uma vinheta separada (por exemplo, a programação usando NSE (non-standard evaluation) com dplyr).\nO README, a documentação geral do pacote, as vinhetas, os sites etc. devem ter informações suficientes no início para obter uma visão geral de alto nível do pacote e dos serviços/dados aos quais ele se conecta e fornecer navegação para outras partes relevantes da documentação. Isso é para seguir o princípio de vários pontos de entrada ou seja, levar em conta o fato de que qualquer parte da documentação pode ser o primeiro encontro que alguém tem com o pacote e/ou com a ferramenta/dados que ele envolve.\nA(s) vinheta(s) deve(m) incluir citações de software e documentos, quando apropriado.\nSe o seu pacote fornecer acesso a uma fonte de dados, exigimos que o arquivo DESCRIPTION contenha (1) uma breve identificação e/ou descrição da organização responsável pela emissão dos dados; e (2) o URL com link para uma página pública que forneça, descreva ou permita o acesso aos dados (que muitas vezes pode ser diferente do URL que leva diretamente à fonte de dados).\nUse mensagens de inicialização de pacote somente quando necessário (mascaramento de função, por exemplo). Evite mensagens de inicialização de pacotes como “Esse é o pacote 2.4-0” ou orientação de citação, pois elas podem ser irritantes para quem o utiliza. Confie na documentação para obter essa orientação.\nVocê pode optar por ter uma seção README sobre casos de uso do seu pacote (outros pacotes, publicações em blogs etc.), exemplo.\n\n\n\n1.7.2 roxygen2 use\n\nSolicitamos que todos os envios usem o roxygen2 para a documentação. O roxygen2 é um pacote R que compila automaticamente os arquivos .Rd para a pasta man em seu pacote a partir de etiquetas escritas acima de cada função. O roxygen2 tem suporte à sintaxe Markdown. Uma das principais vantagens de usar o roxygen2 é que seu NAMESPACE sempre será gerado automaticamente e estará atualizado.\nMais informações sobre o uso da documentação do roxygen2 estão disponíveis no capítulo sobre documentação de funções do livro R Packages (em inglês) e no próprio site do roxygen2.\nSe você estivesse escrevendo o .Rd diretamente sem o roxygen2, o Rd2roxygen contém funções para converter o .Rd em documentação do roxygen.\nTodas as funções devem documentar o tipo de objeto retornado com a etiqueta @return.\nO valor padrão de cada parâmetro deve ser claramente documentado. Por exemplo, em vez de escrever “Um valor lógico que determina se …”, você deve escrever “Um valor lógico (por padrão TRUE) que determina se …”. Também é uma boa prática indicar os valores padrão diretamente na definição da função:\n\n\nf &lt;- function(a = TRUE) {\n  # código da função\n}\n\n\nA documentação deve dar suporte à navegação, incluindo links cruzados úteis entre funções relacionadas e documentando funções relacionadas em grupos ou em páginas de ajuda comuns. Recomendamos o uso da etiqueta @family que cria automaticamente links do tipo “See also” e podem ajudar a agrupar funções em sites com pkgdown. Veja o capítulo sobre documentação de funções do livro R Packages (em inglês) e a seção “agrupamento de funções” do presente capítulo para obter mais detalhes.\nVocê pode reutilizar partes da documentação (por exemplo, detalhes sobre autenticação, pacotes relacionados) nas páginas de vinhetas, README e de documentação. Consulte a vinheta do roxygen2 sobre reutilização de documentação.\nPara incluir exemplos, você pode usar o clássico @examples (no plural “examples”), mas também a tag @example &lt;path&gt; (no singular “example”) para armazenar o código de exemplo em um script R separado (de preferência na pasta man/), e a tag @exampleIf para executar exemplos condicionalmente e evitar falhas na verificação do R CMD. Consulte a documentação do roxygen2 sobre exemplos.\nAdicionar #' @noRd às funções internas. Talvez você se interesse no pacote experimental devtag para obter páginas de manual locais ao usar #' @noRd.\nA partir da versão 7.0.0 do roxygen2, as classes R6 são oficialmente suportadas. Consulte a documentação do roxygen2 para obter detalhes sobre como documentar classes R6.\nAinda não há suporte para o fornecimento de páginas de manual em diferentes idiomas, mas há um progresso interessante no projeto de pacote em R rhelpi18n.\n\n\n\n1.7.3 Exemplos de conjuntos de dados\nPara documentar a interface do seu pacote, talvez seja necessário usar conjuntos de dados de exemplo. Você pode usar conjuntos de dados básicos do R (no pacote datasets), como penguins, ou redistribuir e documentar os dados com as devidas atribuições. Tenha o cuidado de escolher dados que estejam em conformidade com o código de conduta da rOpenSci e que, em geral, não sejam prejudiciais ou alienantes para ninguém.\n\n\n1.7.4 URLs na documentação\nEsta subseção é particularmente relevante para quem deseja enviar seu pacote para o CRAN. O CRAN verificará os URLs em sua documentação e não permite códigos de status de redirecionamento, como 301. Você pode usar o pacote urlchecker para reproduzir essas verificações e, em particular, substituir os URLs pelos URLs para os quais eles redirecionam. Outras pessoas já usaram a opção para escapar de alguns URLs (alterar &lt;https://ropensci.org/&gt; para https://ropensci.org/, ou \\url{https://ropensci.org/} para https://ropensci.org/.), mas se você fizer isso, precisará implementar algum tipo de verificação de URL para evitar que eles sejam quebrados sem que você perceba. Além disso, os links não poderão ser clicados nos documentos locais.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Guia de desenvolvimento de pacotes</span>"
    ]
  },
  {
    "objectID": "pkg_building.pt.html#website",
    "href": "pkg_building.pt.html#website",
    "title": "1  Guia de desenvolvimento de pacotes",
    "section": "1.8 Site de documentação",
    "text": "1.8 Site de documentação\nRecomendamos a criação de um site de documentação para seu pacote usando o pacote pkgdown. O livro R packages (em inglês) apresenta um capítulo sobre pkgdown e também o pkgdown tem seu próprio site de documentação.\nHá alguns elementos que gostaríamos de destacar aqui.\n\n1.8.1 Implementação automática do site de documentação\nVocê só precisa se preocupar com a implementação automática (automatic deployment) do seu site até a aprovação e a transferência do repositório do seu pacote para a organização ropensci; de fato, depois disso, um site pkgdown será criado para o seu pacote após cada push para o repositório do GitHub. Você pode encontrar o status dessas compilações em https://dev.ropensci.org/job/package_name por exemplo para magick; e o site em https://docs.ropensci.org/package_name por exemplo para magick. A construção do site usará seu arquivo de configuração pkgdown, se você tiver um, exceto para o estilo que usará o arquivo de modelo do pacoterotemplate. O site resultante terá uma barra de pesquisa local. Pedimos que informe erros, perguntas e solicitações de recursos sobre a implementação automática em https://github.com/ropensci/docs/ e sobre o modelo em https://github.com/ropensci/rotemplate/.\nSe as vinhetas do seu pacote precisarem de credenciais (chaves de API, tokens, etc.) para serem ativadas, talvez você queira renderizar as vinhetas previamente, já que as credenciais não podem ser usadas no servidor de documentos.\nAntes do envio e da transferência do pacote, você pode usar a abordagem documentada por pkgdown ou o pacote tic para a implantação automática do site do pacote. Isso evitaria o incômodo de executar (e lembrar de executar) pkgdown::build_site() toda vez que o site precisar ser atualizado. Primeiro, consulte nosso capítulo sobre integração contínua se você não estiver familiarizado com a integração contínua. De qualquer forma, não se esqueça de atualizar todas as ocorrências do URL do site após a transferência para a organização ropensci.\n\n\n1.8.2 Idioma\nSe a documentação do seu pacote estiver escrita em um idioma diferente do inglês (mas suportado pelo sistema de revisão por pares do software rOpenSci), você poderá declarar esse idioma para que o site do pkgdown seja localizado.\nPorém, ainda não é possível obter um site pkgdown multilíngue diretamente.\n\n\n1.8.3 Agrupamento de funções no índice\nQuando seu pacote tiver muitas funções, é conveniente que apareçam agrupadas no índice da documentação, o que pode ser feito de forma mais ou menos automática.\nSe você usa o roxygen2 acima da versão 6.1.1, deve usar a tag @family na documentação de suas funções para indicar o agrupamento. Isso lhe dará links entre as funções na documentação local do pacote instalado (seção “See also”) e permitirá que você use a função has_concept do pacote pkgdown no arquivo de configuração do seu site. Exemplo não relacionado a rOpenSci, cortesia de optiRum: tag family, arquivo de configuração do pkgdown e seção no índice resultante. Para personalizar o texto do título da referência cruzada criada pelo roxygen2 (Other {family}:), consulte a documentação do roxygen2 sobre como fornecer uma lista rd_family_title no arquivo man/roxygen/meta.R.\nDe forma menos automática, veja o exemplo do website do pacote drake e arquivo de configuração associado.\n\n\n1.8.4 Marca de autoria\nVocê pode tornar os nomes de (algumas) das pessoas autoras clicáveis, adicionando um URL, e pode até mesmo substituir os nomes por um logotipo (pense na rOpenSci… ou na sua organização/empresa!). Veja a documentação do pkgdown.\n\n\n1.8.5 Ajustando a barra de navegação\nVocê pode tornar o conteúdo do seu site mais fácil de navegar ajustando a barra de navegação, consulte a documentação do pkgdown. Em particular, observe que, se você nomear a vinheta principal de seu pacote como “pkg-name.Rmd”, ela poderá ser acessada na barra de navegação como Para começar (Get started) em vez de via Artigos &gt; Título da vinheta (Articles &gt; Vignette Title).\n\n\n1.8.6 Renderização matemática\nConsulte a documentação do pkgdown. Nosso modelo é compatível com essa configuração.\n\n\n1.8.7 Logotipo do pacote\nPara usar o logotipo de seu pacote na página inicial do pkgdown, consulte usethis::use_logo(). Se o seu pacote não tiver um logotipo, o construtor de documentos da rOpenSci usará o logotipo da rOpenSci em seu lugar.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Guia de desenvolvimento de pacotes</span>"
    ]
  },
  {
    "objectID": "pkg_building.pt.html#authorship",
    "href": "pkg_building.pt.html#authorship",
    "title": "1  Guia de desenvolvimento de pacotes",
    "section": "1.9 Autoria",
    "text": "1.9 Autoria\nO arquivo DESCRIPTION de um pacote deve listar as pessoas que participaram da autoria e que colaboraram com o pacote, usando o parâmetro Authors@R para indicar suas funções (author/creator/contributor, etc.) e usando o campo de comentário para indicar o ID do ORCID de cada pessoa e o ID ROR de cada organização, se houver. Veja esta seção de “Escrevendo extensões R” para obter detalhes.\nSe você achar que as pessoas que revisaram fizeram uma contribuição substancial para o desenvolvimento do seu pacote, poderá listá-los na seção Authors@R com o tipo de contribuição \"rev\", da seguinte forma:\n    person(\"Bea\", \"Hernández\", role = \"rev\",\n    comment = \"Bea revisou o pacote (v. X.X.XX) para rOpenSci, veja &lt;https://github.com/ropensci/software-review/issues/116&gt;\"),\nSomente inclua revisores(as) depois de pedir seu consentimento. Leia mais nesta postagem do blog Thanking Your Reviewers: Gratitude through Semantic Metadata (“Agradecendo as revisões: Gratidão por meio de metadados semânticos”). Por favor, não liste pessoas editoras como colaboradoras. Sua participação e contribuição para a rOpenSci já são agradecimentos suficientes!\n\n1.9.1 Autoria do código incluído no pacote\nMuitos pacotes incluem códigos de outros softwares. Se arquivos inteiros ou funções individuais forem incluídos de outros pacotes, os pacotes rOpenSci devem seguir a Política de Repositório do CRAN:\n\nA propriedade dos direitos autorais e de propriedade intelectual de todos os componentes do pacote deve ser clara e inequívoca (inclusive a partir da especificação de autoria no arquivo DESCRIPTION). Quando o código for copiado (ou derivado) do trabalho de outros (inclusive do próprio R), deve-se tomar cuidado para que quaisquer declarações de direitos autorais/licenças sejam preservadas e a autoria não seja deturpada.\nDe preferência, um campo ‘Authors@R’ seria usado com funções ‘ctb’ para quem tem a autoria deste código. Como alternativa, o campo “Autor” deve listar essas pessoas como colaboradoras.\nQuando os direitos autorais forem detidos por uma entidade que não seja as pessoas autoras do pacote, isso deve ser indicado preferencialmente por meio das funções ‘cph’ no campo ‘Authors@R’ ou usando um campo ‘Copyright’ (se necessário, referindo-se a um arquivo inst/COPYRIGHTS).\nAs marcas registradas devem ser respeitadas.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Guia de desenvolvimento de pacotes</span>"
    ]
  },
  {
    "objectID": "pkg_building.pt.html#licence",
    "href": "pkg_building.pt.html#licence",
    "title": "1  Guia de desenvolvimento de pacotes",
    "section": "1.10 Licença",
    "text": "1.10 Licença\nO pacote precisa ter uma licença aceita pelo CRAN ou OSI. O livro R packages (em inglês) inclui uma seção útil sobre licenças.\nSe o seu pacote agrupar código de outras fontes, você também precisará reconhecer a autoria do código original no seu arquivo DESCIPTION, geralmente com uma função de detentor de direitos autorais: role = \"cph\". Para saber como atualizar seu arquivo DESCRIPTION, consulte o livro R packages (em inglês).",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Guia de desenvolvimento de pacotes</span>"
    ]
  },
  {
    "objectID": "pkg_building.pt.html#testing",
    "href": "pkg_building.pt.html#testing",
    "title": "1  Guia de desenvolvimento de pacotes",
    "section": "1.11 Testes",
    "text": "1.11 Testes\n\nTodos os pacotes devem passar nas verificações do R CMD check/devtools::check() em todas as principais plataformas.\nTodos os pacotes devem ter um conjunto de testes que abranja a funcionalidade principal do pacote. Os testes também devem abranger o comportamento do pacote em caso de erros.\nÉ uma boa prática escrever testes unitários para todas as funções e para todo o código do pacote em geral, garantindo que a funcionalidade principal seja coberta. Se a cobertura de testes em seu pacote está abaixo de 75%, provavelmente exigirá testes adicionais ou explicações antes de ser enviado para revisão.\nRecomendamos o uso do pacote testthat para escrever testes. Uma alternativa é o tinytest.\nSe esforce para escrever testes ao escrever cada nova função. Isso atende à necessidade óbvia de ter um teste adequado para o pacote, mas permite que você pense sobre as várias maneiras pelas quais uma função pode falhar e programe defensivamente contra essas falhas. Mais informações sobre testes.\nOs testes devem ser fáceis de entender e ser tão autocontidos quanto possível. Ao usar o testthat, evite usar código fora do test_that() (como etapas de pré-processamento). Recomendamos a leitura da seção “high-level principles for testing” (princípios de alto nível para testes) no livro R Packages.\nOs pacotes com aplicativos Shiny devem usar uma estrutura de testes unitários, como shinytest2 ou shinytest para testar se as interfaces interativas se comportam conforme o esperado.\nPara testar as funções que criam gráficos, sugerimos usar o vdiffr, uma extensão do pacote testthat que se baseia em testes com snapshots do testthat.\nSe o seu pacote interagir com recursos da Web (APIs da Web e outras fontes de dados na Web), você poderá achar o livro HTTP testing in R, de Scott Chamberlain e Maëlle Salmon relevante. Alguns pacotes que ajudam nos testes de HTTP (e seus clientes HTTP correspondentes) são:\n\nhttptest2 (httr2);\nhttptest (httr);\nvcr (httr, crul);\nwebfakes (httr, httr2, crul, curl).\n\nO pacote testthat tem uma função skip_on_cran() que você pode usar para não executar testes no CRAN. Recomendamos usar isso em todas as funções que são chamadas de API, pois é muito provável que elas falhem no CRAN. Esses testes ainda devem ser executados na integração contínua. Observe que a partir do testthat 3.1.2 skip_if_offline() chama automaticamente skip_on_cran(). Mais informações sobre em CRAN preparedness for API wrappers (Preparação do CRAN para utilização de APIs).\nSe o seu pacote interagir com um banco de dados, você poderá achar o pacote dittodb útil.\nDepois de configurar a integração contínua (CI) use o relatório de cobertura de código do seu pacote (veja esta seção do nosso livro) para identificar linhas não testadas e adicionar mais testes.\nMesmo que você use a integração contínua, recomendamos que você execute testes localmente antes de enviar seu pacote (talvez seja necessário definir Sys.setenv(NOT_CRAN=\"true\")).",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Guia de desenvolvimento de pacotes</span>"
    ]
  },
  {
    "objectID": "pkg_building.pt.html#examples",
    "href": "pkg_building.pt.html#examples",
    "title": "1  Guia de desenvolvimento de pacotes",
    "section": "1.12 Exemplos",
    "text": "1.12 Exemplos\n\nInclua exemplos abrangentes na documentação. Além de demonstrar como usar o pacote, eles podem funcionar como uma maneira fácil de testar a funcionalidade do pacote antes de haver testes adequados. No entanto, lembre-se de que exigimos testes em pacotes contribuídos.\nVocê pode executar exemplos com devtools::run_examples(). Observe que quando você executa o R CMD CHECK ou equivalente (por exemplo, devtools::check()), seus exemplos que não estão incluídos no \\dontrun{} ou \\donttest{} são executados. Consulte a seção tabela de resumo na documentação do roxygen2.\nPara evitar que os exemplos sejam executados no CRAN (por exemplo, se requerem autenticação), você precisa usar \\dontrun{}. No entanto, para uma primeira submissão, o CRAN não permitirá que você pule todos os exemplos. Nesse caso, você pode adicionar alguns pequenos exemplos de brinquedo, ou envolver o código de exemplo com try(). Consulte também a etiqueta @exampleIf do roxygen2.\nAlém de executar exemplos localmente em seu próprio computador, é altamente recomendável que você execute exemplos em um dos sistemas de integração contínua. Mais uma vez, os exemplos que não estão incluídos em \\dontrun{} ou \\donttest{} serão executados, mas para aqueles que estão, você pode configurar suas compilações de integração contínua para executá-los por meio dos argumentos de verificação do R CMD --run-dontrun e/ou --run-donttest.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Guia de desenvolvimento de pacotes</span>"
    ]
  },
  {
    "objectID": "pkg_building.pt.html#pkgdependencies",
    "href": "pkg_building.pt.html#pkgdependencies",
    "title": "1  Guia de desenvolvimento de pacotes",
    "section": "1.13 Dependências de pacotes",
    "text": "1.13 Dependências de pacotes\n\nEm geral, é melhor ter menos dependências.\nConsidere as vantagens e desvantagens envolvidas no fato de depender de um pacote. Por um lado, o uso de dependências reduz o esforço de codificação e pode se basear em funcionalidades úteis desenvolvidas por outras pessoas, especialmente se a dependência executar tarefas complexas e tiver alto desempenho, e/ou for bem avaliada e testada. Por outro lado, ter muitas dependências sobrecarrega a pessoa mantenedora ao ter que acompanhar as alterações nesses pacotes, arriscando a sustentabilidade de longo prazo do seu pacote. Isso também aumenta o tempo e o tamanho da instalação, o que leva em consideração principalmente o seu ciclo de desenvolvimento e o de outras pessoas, bem como os sistemas de compilação automatizados. Pacotes “pesados” - aqueles com muitas dependências e aqueles com grandes quantidades de código compilado - aumentam esse custo.\nAs abordagens para reduzir as dependências incluem:\n\nSe você usar apenas algumas funções de uma dependência grande ou pesada, poderá copiá-las para seu próprio pacote. (Consulte a seção Autoria acima para saber como reconhecer a autoria original do código copiado). Por outro lado, funções complexas com muitos casos especiais (por exemplo, analisadores sintáticos) exigem testes e verificações consideráveis.\n\nUm exemplo comum disso é o retorno de “tibbles” no estilo tidyverse em funções do pacote que fornecem dados. É possível evitar o uso do pacote tibble retornando um tibble criado pela modificação de um data.frame da seguinte forma:\nclass(df) &lt;- c(\"tbl_df\", \"tbl\", \"data.frame\") \n(Observe que essa abordagem deve ser usada e testada com muito cuidado, especialmente porque pode quebrar o comportamento esperado de objetos reclassificados).\n\nCertifique-se de que esteja usando o pacote em que a função está definida, e não aquele em que ela é reexportada. Por exemplo, muitas funções do devtools podem ser encontradas em pacotes especializados menores, como sessioninfo. A função %&gt;% deve ser importada do pacote magrittr onde ela é definida, em vez do mais pesado dplyr , que a reexporta.\nAlgumas dependências são preferidas porque fornecem uma interpretação mais fácil de nomes de funções e sintaxe mais fáceis do que as soluções básicas do R. Se esse for o principal motivo para usar uma função em uma dependência pesada, considere a possibilidade de envolver a abordagem do R básico em uma função interna bem nomeada em seu pacote. Veja, por exemplo, o script em R do rlang que fornece funções com uma sintaxe semelhante às funções purrr.\nSe as dependências tiverem funcionalidades sobrepostas, verifique se você pode confiar em apenas uma delas.\nMais dicas de gerenciamento de dependências podem ser encontradas no capítulo “Dependencies: Mindset and Background” do livro R packages (em inglês) e em um post do Scott Chamberlain.\n\nUsar Imports em vez de Depends para pacotes que fornecem funções de outros pacotes. Certifique-se de listar os pacotes usados para o teste (testthat) e a documentação (knitr, roxygen2) em seu Suggests das dependências do pacote (se você usar usethis para adicionar a infraestrutura de teste via usethis::use_testthat() ou uma vinheta via usethis::use_vignette(), os pacotes necessários serão adicionados ao DESCRIPTION). Se você usar algum pacote nos exemplos ou testes do seu pacote, certifique-se de listá-lo em Suggests se ainda não estiver listado em Imports.\nVerifique o status de desenvolvimento de todas as dependências que você adicionar. Especialmente para pacotes hospedados no GitHub, é muito útil verificar se eles são mantidos ativamente e se não foram arquivados.\nSe o seu pacote (não do Bioconductor) depender de pacotes do Bioconductor, certifique-se de que as instruções de instalação no README e na vinheta sejam claras o suficiente, mesmo para uma pessoa não esteja familiarizada com o ciclo de publicação do Bioconductor.\n\nÉ necessário usar o BiocManager (recomendado)? Documente isso.\nA instalação automática de pacotes do Bioconductor usando install.packages() é suficiente? Nesse caso, mencione que é necessário executar setRepositories() se ainda não tiver definido os repositórios necessários do Bioconductor.\nSe o seu pacote depender do Bioconductor após uma determinada versão, mencione isso na DESCRIPTION e nas instruções de instalação.\n\nEspecificar dependências mínimas (por exemplo glue (&gt;= 1.3.0) em vez de apenas glue) deve ser uma escolha consciente. Se tiver certeza de que seu pacote quebrará abaixo de uma determinada versão de dependência, especifique-a explicitamente. Mas se não souber, então não há necessidade de especificar uma dependência mínima. Nesse caso, quando um usuário relatar um bug que esteja explicitamente relacionado a uma versão mais antiga de uma dependência, resolva-o. Um exemplo de prática ruim seria, ao desenvolver o pacote, considerar as versões atuais de suas dependências como sendo a versão mínima. Isso forçaria desnecessariamente todos a atualizar (causando problemas com outros pacotes) quando não há um bom motivo por trás dessa escolha de versão.\nNa maioria dos casos em que é necessário expor as funções das dependências, você deve importar e reexportar essas funções individuais em vez de listá-las no campo Depends. Por exemplo, se as funções do seu pacote produzem objetos do tipo raster, você pode reexportar do pacote raster apenas as funções de impressão e plotagem.\nSe seu pacote usar uma dependência de sistema, você deve\n\nIndicá-la no DESCRIPTION;\nVerifique se ele está listado por sysreqsdb para permitir que ferramentas automáticas o instalem, ou envie uma contribuição caso contrário;\nVerificar se está listado em um script configure (exemplo) e que fornecerá uma mensagem de erro útil caso não seja encontrado (exemplo). Os scripts configure podem ser desafiadores, pois geralmente exigem soluções improvisadas para fazer com que as diversas dependências do sistema funcionem em todos os sistemas. Use exemplos (mais aqui) como ponto de partida, mas observe que é comum encontrar bugs e casos extremos e, muitas vezes, violar as políticas do CRAN. Não hesite em pedir ajuda em nosso fórum.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Guia de desenvolvimento de pacotes</span>"
    ]
  },
  {
    "objectID": "pkg_building.pt.html#recommended-scaffolding",
    "href": "pkg_building.pt.html#recommended-scaffolding",
    "title": "1  Guia de desenvolvimento de pacotes",
    "section": "1.14 Estruturas recomendadas",
    "text": "1.14 Estruturas recomendadas\n\nPara solicitações HTTP, recomendamos o uso dos pacotes httr2, httr, curl ou crul ao invés do RCurl. Se você gosta de clientes de baixo nível para HTTP, o curl é melhor, enquanto o httr2, o httr e o crul são melhores para acesso de alto nível.\nPara converter JSON (parsing) , use jsonlite em vez de rjson ou RJSONIO.\nPara converter, criar e manipular XML, recomendamos enfaticamente o pacote xml2 para a maioria dos casos. Você pode consultar as observações de Daniel Nüst sobre a migração de XML para xml2 (em inglês).\nPara dados espaciais, o pacote sp deve ser considerado obsoleto em favor do pacote sf e os pacotes rgdal, maptools e rgeos foram aposentados em 2023. Recomendamos o uso do conjunto de ferramentas espaciais desenvolvidas pelas comunidades r-spatial e rspatial. Veja esta edição do GitHub para discussões relevantes.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Guia de desenvolvimento de pacotes</span>"
    ]
  },
  {
    "objectID": "pkg_building.pt.html#version-control",
    "href": "pkg_building.pt.html#version-control",
    "title": "1  Guia de desenvolvimento de pacotes",
    "section": "1.15 Controle de versão",
    "text": "1.15 Controle de versão\n\nOs arquivos de origem do seu pacote devem estar sob controle de versão, mais especificamente rastreados com Git. Você pode achar o pacote gert relevante, bem como algumas das funções do pacote usethis relacionadas ao Git/GitHub; no entanto, você pode usar o git como quiser.\nO nome da ramificação (branch) padrão não deve ser master, pois isso pode ser ofensivo para algumas pessoas. Consulte a seção do projeto Git e da Software Freedom Conservancy para obter mais contexto. É uma prática geral nomear uma ramificação padrão main, embora outros nomes também possam ser usados. Consulte a postagem do blog do tidyverse “Renomeando a ramificação padrão” para saber mais sobre como usar essa funcionalidade para ajudar a renomear as ramificações padrão.\nCertifique-se de listar arquivos desnecessários, como .DS_Store, no arquivo .gitignore. Você pode achar a função usethis::git_vaccinate() e o pacote gitignore relevantes.\nUma seção posterior deste livro contém algumas dicas de fluxo de trabalho com git.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Guia de desenvolvimento de pacotes</span>"
    ]
  },
  {
    "objectID": "pkg_building.pt.html#crangotchas",
    "href": "pkg_building.pt.html#crangotchas",
    "title": "1  Guia de desenvolvimento de pacotes",
    "section": "1.16 Problemas diversos do CRAN",
    "text": "1.16 Problemas diversos do CRAN\nEsta é uma coleção de problemas do CRAN que vale a pena evitar desde o início.\n\nCertifique-se de que as palavras do título do seu pacote comecem com letra maiúscula (o que em inglês é chamado de Title Case.\nNão coloque um ponto final no final do título.\nNão coloque “no R” ou “com R” em seu título, pois isso é óbvio nos pacotes hospedados no CRAN. Se, mesmo assim, quiser que essas informações sejam exibidas em seu site, verifique a documentação do pkgdown para saber como substituir isso.\nEvite iniciar a descrição com o nome do pacote ou “Este pacote …”.\nCertifique-se de incluir links para sites se você envolver uma API da Web, extrair dados de um site etc. na seção Description do seu arquivo DESCRIPTION. Os URLs devem ser colocados entre colchetes angulares (&lt;&gt;), por exemplo &lt;https://www.r-project.org&gt;.\nEm ambos os Title e Description, os nomes de pacotes ou outros softwares externos devem ser colocados entre aspas simples (por exemplo, Integração do ‘Rcpp’ para a biblioteca de álgebra linear com modelo ‘Armadillo’).\nEvite testes e exemplos que sejam demorados. Considere usar testthat::skip_on_cran nos testes para pular coisas que demoram muito, mas ainda assim testá-las localmente e em integração contínua.\nInclua arquivos de nível superior, como paper.md e arquivos de configuração de integração contínua, no arquivo .Rbuildignore.\n\nPara obter mais dicas, consulte a lista colaborativa mantida pelo ThinkR, “Prepare-se para o CRAN”.\n\n1.16.1 Verificações do CRAN\nQuando seu pacote estiver no CRAN, ele será checado regularmente em diferentes plataformas. As falhas nessas verificações, quando não são falsos positivos, podem levar a equipe do CRAN a entrar em contato com você. Você pode monitorar o estado das verificações do CRAN por meio\n\ndo foghorn pacote.\ndas etiquetas de checagem do CRAN (“CRAN checks Badges”).",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Guia de desenvolvimento de pacotes</span>"
    ]
  },
  {
    "objectID": "pkg_building.pt.html#bioconductor-gotchas",
    "href": "pkg_building.pt.html#bioconductor-gotchas",
    "title": "1  Guia de desenvolvimento de pacotes",
    "section": "1.17 Problemas do Bioconductor",
    "text": "1.17 Problemas do Bioconductor\nSe você pretende que seu pacote seja enviado para o Bioconductor ou se o pacote estiver no Bioconductor, consulte as Diretrizes de empacotamento do Bioconductor e o livro de desenvolvimento atualizado.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Guia de desenvolvimento de pacotes</span>"
    ]
  },
  {
    "objectID": "pkg_building.pt.html#further-guidance",
    "href": "pkg_building.pt.html#further-guidance",
    "title": "1  Guia de desenvolvimento de pacotes",
    "section": "1.18 Orientações adicionais",
    "text": "1.18 Orientações adicionais\n\nSe você estiver enviando um pacote para a rOpenSci por meio do repositório de revisão de software, poderá encaminhar outras perguntas à equipe da rOpenSci usando as issues ou em nosso fórum de discussão.\nLeia o guia de autoria.\nLeia, incorpore e aja de acordo com os conselhos do capítulo Guia de Colaboração.\n\n\n1.18.1 Aprendendo sobre o desenvolvimento de pacotes\n\n1.18.1.1 Livros\n\nO livro R packages (Pacotes em R) escrito por Hadley Wickham e Jenny Bryan é um recurso excelente e de fácil leitura sobre o desenvolvimento de pacotes, está disponível gratuitamente on-line (e pode ser comprado impresso).\nWriting R Extensions (Escrevendo extensões do R) (em inglês) é a referência canônica, geralmente a mais atualizada, para a criação de pacotes em R.\nO livro Mastering Software Development in R (Dominando o desenvolvimento de software em R) por Roger D. Peng, Sean Kross e Brooke Anderson.\nAdvanced R (R avançado) por Hadley Wickham.\nTidyverse style guide (Guia de estilo do Tidyverse).\nTidyverse design guide (Guia de design do Tidyverse) (em elaboração) e o boletim de notícias (newsletter) que o acompanha.\n\n\n\n1.18.1.2 Tutoriais\n\nYour first R package in 1 hour (Seu primeiro pacote R em 1 hora) por Shannon Pileggi.\nessa descrição de fluxo de trabalho por Emil Hvitfeldt.\nEsta ilustração de Matthew J Denny.\n\n\n\n1.18.1.3 Blogs\n\nBlog do R-hub.\nAlgumas postagens do blog da rOpenSci, por exemplo How to precompute package vignettes or pkgdown articles (“Como pré-computar vinhetas de pacotes ou artigos pkgdown”).\nSeção Package Development Corner (“Espaço de desenvolvimento de pacotes”) do boletim informativo da rOpenSci.\nAlgumas postagens do blog do tidyverse, por exemplo Upgrading to testthat edition 3 (“Atualizando para o testthat edition 3”).\n\n\n\n1.18.1.4 MOOCs\nExiste um especialização do Coursera correspondente ao livro escrito por Roger Peng, Sean Kross e Brooke Anderson, com um curso específico sobre pacotes R.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Guia de desenvolvimento de pacotes</span>"
    ]
  },
  {
    "objectID": "pkg_ci.pt.html",
    "href": "pkg_ci.pt.html",
    "title": "2  Práticas Recomendadas de Integração Contínua",
    "section": "",
    "text": "2.1 O que é a integração contínua?\nA integração contínua (do inglês, CI) se refere a execução de testes automáticos em software. No caso da rOpenSci, a CI significa praticamente que um conjunto de testes será executado automaticamente por meio do GitHub, sempre que você fizer um commit ou um pull request ao GitHub.\nA CI automatiza a execução de verificações gerais de pacotes, como R CMD check; Veja testando. É possível configurar a CI antes que os testes sejam escritos, assim a CI executará os testes quando você os enviar para o repositório por meio de commits.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Práticas Recomendadas de Integração Contínua</span>"
    ]
  },
  {
    "objectID": "pkg_ci.pt.html#why-use-continuous-integration-ci",
    "href": "pkg_ci.pt.html#why-use-continuous-integration-ci",
    "title": "2  Práticas Recomendadas de Integração Contínua",
    "section": "2.2 Por que usar a integração contínua (CI)?",
    "text": "2.2 Por que usar a integração contínua (CI)?\nTodos os pacotes da rOpenSci devem usar uma forma de integração contínua. Isso garante que todos os commits, pull requests e novas ramificações sejam executados pelo R CMD check. Os resultados de todos os testes são exibidos na página de pull requests no GitHub, fornecendo outra camada de informações sobre os problemas e a proteção contra a quebra do seu pacote antes de fazer a fusão das alterações. A integração contínua dos pacotes da rOpenSci também deve ser vinculada a um serviço de cobertura de código, indicando quantas linhas são cobertas por testes de unidade.\nTanto o status do teste quanto a cobertura do código devem ser relatados por meio de distintivos no README do seu pacote.\nOs pacotes R devem ter CI para todos os sistemas operacionais (Linux, Mac OSX, Windows) quando contiverem:\n\nCódigo compilado\nDependências em Java\nDependências em outras linguagens\nPacotes com chamadas de sistema\nProcessamento de texto, como obter os nomes das pessoas (para encontrar problemas de codificação)\nQualquer coisa com sistema de arquivos/chamadas de diretório\n\nEm caso de dúvida sobre a aplicabilidade desses critérios ao seu pacote, é melhor adicionar CI para todos os sistemas operacionais. A maioria das configurações de padrões de serviços de CI para pacotes R permite que isso seja feito sem muito trabalho.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Práticas Recomendadas de Integração Contínua</span>"
    ]
  },
  {
    "objectID": "pkg_ci.pt.html#whichci",
    "href": "pkg_ci.pt.html#whichci",
    "title": "2  Práticas Recomendadas de Integração Contínua",
    "section": "2.3 Qual(is) serviço(s) de integração contínua?",
    "text": "2.3 Qual(is) serviço(s) de integração contínua?\nHá vários serviços de integração contínua, incluindo serviços autônomos (CircleCI, AppVeyor) e outros integrados à hospedagem de código ou a serviços relacionados (GitHub Actions, GitLab, AWS Code Pipeline). Diferentes serviços oferecem suporte a diferentes configurações de sistema operacional.\nAções do GitHub é uma opção conveniente para muitas pessoas desenvolvedoras de R que já usam o GitHub, pois está integrada à plataforma e oferece suporte a todos os sistemas operacionais necessários. Existem ações compatíveis com o ecossistema R bem como suporte de primeira classe no pacote {usethis}. Todos os pacotes enviados à rOpenSci para revisão por pares são verificados por nosso sistema pkgcheck, descrito mais detalhadamente na seção Guia para Autores. Essas verificações também são fornecidas como uma ação do GitHub no repositório ropensci-review-tools/pkgcheck-action. Os autores e as autoras de pacotes são incentivados a usar essa ação para confirmar, antes do envio, que um pacote passa em todas as nossas verificações. Consulte nossa publicação no blog para obter mais informações.\nusethis oferece suporte a configuração de CI para outros sistemas embora essas funções estejam levemente obsoletas. A rOpenSci também oferece suporte ao pacote círculo, que auxilia na configuração de pipelines CircleCI, e ao pacote tic para criar pipelines de CI mais complicadas.\n\n2.3.0.1 Testes usando diferentes versões do R\nExigimos que os pacotes da rOpenSci sejam testados nas versões mais recentes, porém também nas versões anteriores e de desenvolvimento do R, para garantir a compatibilidade retroativa e progressiva com o R básico.\nDetalhes sobre como executar testes/verificações usando diferentes versões do R localmente podem ser encontrados na vinheta do R-hub ao executar Verificações locais do Linux com Docker.\nVocê pode ajustar a implementação de testes com cada versão usando uma matriz de testes.\nSe você desenvolver um pacote que dependa ou seja destinado ao Bioconductor, esta informação biocthis pode ser relevante.\n\n\n2.3.0.2 Minimizando o tempo de compilação na CI\nVocê pode usar estas dicas para minimizar o tempo de compilação na CI:\n\nInstalar os pacotes em um cache que possa ser reutilizado no processo de CI quando necessário (cache installation of packages). O padrão faz isso r-lib/actions workflows.\n\n\n\n2.3.0.3 Dependências do sistema\nVocê pode achar a postagem de Hugo Gruson útil Dependências do sistema em pacotes R e testes automáticos.\n\n\n2.3.1 Travis CI (Linux e Mac OSX)\nRecomendamos que você afaste-se de Travis.\n\n\n2.3.2 AppVeyor CI (Windows)\nPara a integração contínua no Windows, consulte R + AppVeyor. Configure-o usando usethis::use_appveyor().\nAqui estão algumas dicas para você minimizar o tempo de compilação do AppVeyor:\n\nInstale os seus pacotes em algum tipo de cache. Exemplo de um arquivo de configuração. Ele já estará no arquivo de configuração se você configurar o AppVeyor CI usando usethis::use_appveyor().\nAtivar compilações contínuas.\n\nNão transferimos mais projetos AppVeyor para a conta “ropensci” no AppVeyor, portanto, após a transferência do seu repositório para a conta “ropensci” no GitHub, o distintivo será [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/github/ropensci/pkgname?branch=master&svg=true)](https://ci.appveyor.com/project/individualaccount/pkgname).\n\n\n2.3.3 Circle CI (Linux e Mac OSX)\nCircle CI é usado, por exemplo, pelo pacote bomrang da rOpenSci como serviço de integração contínua.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Práticas Recomendadas de Integração Contínua</span>"
    ]
  },
  {
    "objectID": "pkg_ci.pt.html#coverage",
    "href": "pkg_ci.pt.html#coverage",
    "title": "2  Práticas Recomendadas de Integração Contínua",
    "section": "2.4 Cobertura de testes",
    "text": "2.4 Cobertura de testes\nA integração contínua também deve incluir relatórios de cobertura de teste por meio de um serviço de teste, como o Codecov ou Coveralls.\nRecomendamos que você use Codecov. Para ativar Codecov em seu repositório, execute usethis::use_github_action(\"test-coverage\") para criar um arquivo .github/workflows/test-coverage.yaml. Você também precisa dar ao Codecov acesso ao seu repositório do GitHub, consulte Guia de início rápido do Codecov para saber como configurar o acesso. Em seguida, adicione um distintivo de status do Codecov à parte superior do seu README.md, consulte Distintivos de status do Codecov.\nSe o seu repositório for transferido para a organização GitHub ropensci, o acesso ao Codecov deverá ser transferido automaticamente. Você precisará atualizar o URL do distintivo para apontar ao repositório hospedado na rOpenSci.\nPara mais detalhes e instruções, consulte a seção README do pacote covr, bem como usethis::use_coverage() e usethis::use_github_action().\nSe você executar a cobertura em vários serviços de CI os resultados serão fundidos.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Práticas Recomendadas de Integração Contínua</span>"
    ]
  },
  {
    "objectID": "pkg_ci.pt.html#even-more-ci-open-cpu",
    "href": "pkg_ci.pt.html#even-more-ci-open-cpu",
    "title": "2  Práticas Recomendadas de Integração Contínua",
    "section": "2.5 Ainda mais CI: OpenCPU",
    "text": "2.5 Ainda mais CI: OpenCPU\nApós a transferência para a organização “ropensci” no GitHub pertencente a rOpenSci, cada envio para o repositório será contruido no OpenCPU e a pessoa que fizer o commit receberá um e-mail de notificação. Esse é um serviço de CI adicional para autores e autoras de pacotes que permite que as funções do R em pacotes sejam chamadas remotamente via https://ropensci.ocpu.io/, usando o API opencpu. Para obter mais detalhes sobre esse serviço, consulte a página de ajuda do OpenCPU que também indica onde você pode fazer perguntas.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Práticas Recomendadas de Integração Contínua</span>"
    ]
  },
  {
    "objectID": "pkg_ci.pt.html#rodocsci",
    "href": "pkg_ci.pt.html#rodocsci",
    "title": "2  Práticas Recomendadas de Integração Contínua",
    "section": "2.6 Ainda mais CI: documentos da rOpenSci",
    "text": "2.6 Ainda mais CI: documentos da rOpenSci\nApós a transferência para a organização “ropensci” no GitHub pertencente a rOpenSci, um site pkgdown será criado para o seu pacote:\n\nPara cada novo commit no ramo padrão (verificado aproximadamente uma vez por hora).\nQuando qualquer uma das dependências fortes no mesmo universo atualiza o número da versão.\nUma vez por mês.\n\nVocê pode encontrar o status dessas compilações em https://ropensci.r-universe.dev/ui#packages e na seção status do commit. A compilação do site usará o seu arquivo config do pkgdown, se você tiver um, exceto para o estilo que usará o pacote rotemplate. Se sua documentação incluir código que dependa, por exemplo, de credenciais, veja aqui como garantir que os documentos pkgdown sejam renderizados da melhor maneira possível.\n\nPara exemplos de funções, use a tag roxygen2 examplesIf com a variável IN_PKGDOWN, por exemplo, #' @examplesIf identical(Sys.getenv(“IN_PKGDOWN”), “true”)\nPara vinhetas, pré-compile se forem necessárias ferramentas/dados/credenciais especiais que não estão disponíveis em servidores de compilação genéricos (consulte https://ropensci.org/blog/2019/12/08/precompute-vignettes/) ou use a variável IN_PKGDOWN com a opção knitr eval, por exemplo\n\nknitr::opts_chunk$set(\n  collapse = TRUE,\n  comment = “#&gt;”,\n  eval = Sys.getenv(“IN_PKGDOWN”) == “true”\n)\nExemplos:\n\nexamplesIf:https://github.com/ropensci/gtexr/blob/592ac781672f07eb67e935d4155570c5960d1fdb/R/get_service_info.R#L14 (veja também a documentação da tag roxygen2: https://roxygen2.r-lib.org/articles/rd.html?q=examplesIf#examples)\nVignette, opção knitr eval: https://github.com/ropensci/gtexr/blob/592ac781672f07eb67e\n\nPor favor, informe bugs, faça perguntas e solicitações de recursos sobre as compilações centrais e sobre o modelo em https://github.com/ropensci-org/rotemplate/.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Práticas Recomendadas de Integração Contínua</span>"
    ]
  },
  {
    "objectID": "pkg_security.pt.html",
    "href": "pkg_security.pt.html",
    "title": "3  Práticas de segurança recomendadas no desenvolvimento de pacotes",
    "section": "",
    "text": "3.1 Diversos\nRecomendamos a leitura do artigo Dez dicas rápidas para você se manter seguro(a) on-line, de Danielle Smalls e Greg Wilson.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Práticas de segurança recomendadas no desenvolvimento de pacotes</span>"
    ]
  },
  {
    "objectID": "pkg_security.pt.html#git-hub-access-security",
    "href": "pkg_security.pt.html#git-hub-access-security",
    "title": "3  Práticas de segurança recomendadas no desenvolvimento de pacotes",
    "section": "3.2 Segurança no acesso ao GitHub",
    "text": "3.2 Segurança no acesso ao GitHub\n\nRecomendamos que você proteja a sua conta do GitHub com uma autenticação 2FA (autenticação de dois fatores). Essa medida é obrigatória para todos os membros da organização ropensci e colaboradores externos que usam o GitHub, portanto, certifique-se de ativá-la antes que o seu pacote seja aprovado.\nTambém recomendamos que você verifique regularmente quem tem acesso ao repositório do seu pacote e remova qualquer acesso não utilizado (como os de ex-colaboradores e ex-colaboradoras).",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Práticas de segurança recomendadas no desenvolvimento de pacotes</span>"
    ]
  },
  {
    "objectID": "pkg_security.pt.html#https",
    "href": "pkg_security.pt.html#https",
    "title": "3  Práticas de segurança recomendadas no desenvolvimento de pacotes",
    "section": "3.3 https",
    "text": "3.3 https\n\nSe o serviço Web que o seu pacote utiliza oferecer tanto https quanto http, opte por https.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Práticas de segurança recomendadas no desenvolvimento de pacotes</span>"
    ]
  },
  {
    "objectID": "pkg_security.pt.html#pkgsecrets",
    "href": "pkg_security.pt.html#pkgsecrets",
    "title": "3  Práticas de segurança recomendadas no desenvolvimento de pacotes",
    "section": "3.4 Segredos em pacotes",
    "text": "3.4 Segredos em pacotes\nEsta seção oferece orientações para quando você desenvolve pacotes que interagem com recursos da Web que exigem credenciais (como chaves de API, tokens, etc.). Consulte também a vinheta do pacote httr sobre o compartilhamento de credenciais.\n\n3.4.1 Credenciais em pacotes e proteção do(a) usuário(a)\nDigamos que o seu pacote precise de uma chave de API para fazer as solicitações em nome dos(as) usuários(as) do seu pacote.\n\nNa documentação do seu pacote, oriente o(a) usuário(a) para que a chave de API não seja registrada no arquivo .Rhistory ou no arquivo de código dos(as) usuários(as) do seu pacote.\n\nIncentive o uso de variáveis de ambiente para armazenar a chave de API (ou até mesmo remova a possibilidade de passá-la como um argumento para as funções). Você pode, na documentação, fazer referência a introdução aos arquivos de inicialização e a função usethis::edit_r_environ().\n\nOu o seu pacote pode depender ou incentivar o uso de keyring para ajudar o(a) usuário(a) a armazenar variáveis nos gerenciadores de credenciais específicos do sistema operacional (mais seguro do que .Renviron), ou seja, você criaria uma função para definir a chave e teria outra para recuperá-la; ou escreveria Sys.setenv(SUPERSECRETKEY = keyring::key_get(\"myservice\")) no início do seu arquivo de código.\n\nNão imprima a chave de API, nem mesmo no modo verboso, em qualquer mensagem, aviso ou erro.\n\nNo modelo de issue do GitHub, deve ser declarado que nenhuma credencial deve ser compartilhada. Se um(a) usuário(a) do seu pacote compartilhar acidentalmente as credenciais em uma issue, certifique-se de que ele(a) esteja ciente disso para que possa revogar a chave (ou seja, pergunte explicitamente, em uma resposta, se a pessoa percebeu que compartilhou a chave).\n\n\n\n3.4.2 Credenciais em pacotes e desenvolvimento\nVocê precisará proteger as suas credenciais da mesma forma que protege as credenciais dos(as) usuários(as), mas há mais aspectos a serem considerados e mantidos em mente.\n\n3.4.2.1 Credenciais e solicitações registradas em testes\nSe você utiliza vcr ou httptest em testes para armazenar as respostas da API em cache, é importante garantir que as requisições ou configurações registradas não contenham credenciais. Consulte o guia de segurança do pacote vcr e o guia do pacote httptest “Redigindo e modificando requisições registradas”. Além disso, inspecione as suas requisições ou configurações registradas antes de realizar o primeiro commit para garantir que você fez a configuração correta.\nComo o vcr é um pacote da rOpenSci, você pode postar qualquer dúvida que tiver no Fórum da rOpenSci.\n\n\n3.4.2.2 Compartilhe credenciais com os serviços de CI\nAgora, você pode precisar compartilhar credenciais com os serviços de integração contínua.\nVocê pode armazenar as chaves de API como variáveis de ambiente ou credenciais, consultando a documentação do serviço de CI.\nPara obter mais detalhes e orientações sobre o fluxo de trabalho, consulte o artigo do pacote gargle - “Gerenciando tokens com segurança” e o capítulo sobre segurança do livro HTTP testing in R.\nDocumente as etapas em CONTRIBUTING.md para que você, ou um(a) novo(a) mantenedor(a), possa se lembrar como proceder da próxima vez.\n\n\n3.4.2.3 Credenciais e colaborações\nE quanto a pull requests de colaboradores(as) externos(as)? No GitHub, por exemplo, as credenciais só estão disponíveis para GitHub Actions em pull requests iniciados a partir do próprio repositório, e não a partir de um fork. Os testes que usam as suas credenciais falharão, ao menos que você use algum tipo de resposta simulada ou em cache, portanto, pode ser interessante ignorá-los dependendo do contexto. Por exemplo, na sua conta de CI, você poderia criar uma variável de ambiente chamada THIS_IS_ME e, então, ignorar os testes com base na presença dessa variável. Isso significa, portanto, que as verificações de PR feitas pela CI não serão exaustivas e, como consequência, você precisará verificar o PR localmente para executar todos os testes.\nDocumente o comportamento do seu pacote em relação a PRs externos no arquivo CONTRIBUTING.md. Isso será útil tanto para quem faz PRs quanto para quem os revisa, seja você no futuro ou outras pessoas mantenedoras do pacote.\n\n\n\n3.4.3 Credenciais e CRAN\nNo CRAN, ignore quaisquer testes (skip_on_cran()) e exemplos (dontrun) que exijam credenciais.\nGere previamente as vinhetas que requerem credenciais.",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Práticas de segurança recomendadas no desenvolvimento de pacotes</span>"
    ]
  },
  {
    "objectID": "pkg_security.pt.html#furthersecreading",
    "href": "pkg_security.pt.html#furthersecreading",
    "title": "3  Práticas de segurança recomendadas no desenvolvimento de pacotes",
    "section": "3.5 Leitura adicional",
    "text": "3.5 Leitura adicional\nMateriais úteis sobre segurança:\n\na sessão da comunidade rOpenSci “Segurança para R” (veja a gravação, os slides, etc. e, em particular, a lista de recursos);\nos projetos relacionados à segurança do unconf18;\no artigo do pacote gargle “Gerenciando tokens de forma segura”",
    "crumbs": [
      "Building Your Package",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Práticas de segurança recomendadas no desenvolvimento de pacotes</span>"
    ]
  },
  {
    "objectID": "softwarereview_intro.pt.html",
    "href": "softwarereview_intro.pt.html",
    "title": "4  Revisão de software por pares, por quê? O que é?",
    "section": "",
    "text": "4.1 O que é a revisão de software por pares da rOpenSci?\nA coleção de pacotes da rOpenSci é resultado parcialmente das contribuições de membros(as) da equipe e parcialmente das contribuições de membros(as) da comunidade, o que significa que a coleção provém de uma grande diversidade de habilidades e de experiência de pessoas desenvolvedoras. Como garantir a qualidade de toda a coleção? É aí que entra a revisão de software por pares: os pacotes contribuídos pela comunidade passam por um processo de revisão transparente, construtivo, não adversarial e aberto. Para esse processo, que depende principalmente de trabalho voluntário, os(as) editores(as) associados(as) gerenciam o fluxo de submissões e garantem o andamento dos envios; os(as) autores(as) criam, submetem e aprimoram os seus pacotes; os(as) revisores(as), duas pessoas por submissão, examinam o código e a experiência do(a) usuário(a). Esta publicação no blog, escrita por editores(as) da rOpenSci, é uma boa introdução à revisão de software por pares da rOpenSci. Outras postagens sobre a própria revisão e sobre os pacotes revisados podem ser encontradas através da tag “software-peer-review” no blog da rOpenSci.\nVocê pode reconhecer os pacotes da rOpenSci que foram revisados por pares por meio de um selo (badge) verde com o texto “peer-reviewed” em seu README, com os links para as suas revisões (por exemplo); e por meio de um botão azul com o texto “Peer-reviewed” próximo à sua descrição na página de pacotes da rOpenSci com os links para as revisões.\nTecnicamente, aproveitamos ao máximo o GitHub: cada processo de revisão de pacote é uma issue no repositório ropensci/software-review no GitHub. Por exemplo, você pode ler o tópico de revisão do pacote ropenaq: o processo é uma conversa contínua até a aceitação do pacote, com duas revisões externas como marcos importantes. Além disso, usamos os recursos do GitHub, como o uso de issue templates (como templates de submissão) e uso de labels (etiquetas) para acompanhar o progresso dos envios (desde as verificações do(a) editor(a) até a aprovação).",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Revisão de software por pares, por quê? O que é?</span>"
    ]
  },
  {
    "objectID": "softwarereview_intro.pt.html#whysubmit",
    "href": "softwarereview_intro.pt.html#whysubmit",
    "title": "4  Revisão de software por pares, por quê? O que é?",
    "section": "4.2 Por que enviar o seu pacote para a rOpenSci?",
    "text": "4.2 Por que enviar o seu pacote para a rOpenSci?\n\nEm primeiro lugar, e acima de tudo, esperamos que você envie o seu pacote para análise porque você valoriza o feedback. Nosso objetivo é fornecer feedbacks úteis para os(as) autores(as) de pacotes e fazer com que o nosso processo de revisão seja aberto, não contraditório e focado na melhoria da qualidade do software.\nAo fazer parte da coleção de pacotes da rOpenSci, o seu pacote continuará a receber suporte da equipe da rOpenSci. Você manterá a propriedade e o controle do seu pacote, mas podemos ajudar com as questões de manutenção contínua, como as associadas a atualizações do R, dependências e políticas do CRAN.\nA rOpenSci irá divulgar o seu pacote através da nossa página web, blog e mídias sociais (como Mastodon e LinkedIn). Os pacotes em nossa coleção também recebem um site de documentação que é renderizado e publicado automaticamente após cada envio.\nOs pacotes da rOpenSci podem ser incluídos em uma lista cruzada com outros repositórios, como o CRAN e o BioConductor.\nOs pacotes da rOpenSci que estão no escopo do Journal of Open-Source Software e que tenham um artigo curto relacionado, poderão, a critério dos(as) editores(as) do JOSS, beneficiar-se de um processo de revisão acelerado (fast-track).\nSe você escrever um, a rOpenSci irá divulgar os livros relacionados ao seu pacote: você pode transferir o código-fonte de tais livros para a organização ropensci-books no GitHub para que os livros sejam listados em books.ropensci.org.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Revisão de software por pares, por quê? O que é?</span>"
    ]
  },
  {
    "objectID": "softwarereview_intro.pt.html#whyreview",
    "href": "softwarereview_intro.pt.html#whyreview",
    "title": "4  Revisão de software por pares, por quê? O que é?",
    "section": "4.3 Por que revisar pacotes para a rOpenSci?",
    "text": "4.3 Por que revisar pacotes para a rOpenSci?\n\nComo em qualquer processo de revisão por pares, esperamos que você opte por revisar para que você retribua à rOpenSci e às comunidades científicas. Nossa missão de expandir o acesso a dados científicos e promover uma cultura de pesquisa reprodutível só é possível por meio dos esforços voluntários de membros(as) da comunidade como você.\nA revisão é uma conversa de mão dupla. Ao revisar os pacotes, você terá a chance de continuar aprendendo as práticas de desenvolvimento com os(as) autores(as) e outros(as) revisores(as).\nA natureza aberta do nosso processo de revisão permite que você faça contatos e conheça colegas e colaboradores(as) durante o processo de revisão. Nossa comunidade é acolhedora e composta por pessoas prestativas, especialistas em desenvolvimento em R e em diversas outras áreas da ciência e da computação científica.\nPara se voluntariar para ser um(a) de nossos(as) revisores(as), preencha este breve formulário fornecendo as suas informações de contato e áreas de especialização. Estamos sempre procurando mais revisores(as) com experiência geral em desenvolvimento de pacotes e com conhecimento especializado nas áreas em que os pacotes são usados.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Revisão de software por pares, por quê? O que é?</span>"
    ]
  },
  {
    "objectID": "softwarereview_intro.pt.html#whyopen",
    "href": "softwarereview_intro.pt.html#whyopen",
    "title": "4  Revisão de software por pares, por quê? O que é?",
    "section": "4.4 Por que as avaliações são abertas?",
    "text": "4.4 Por que as avaliações são abertas?\nNossos tópicos (issues) de revisão são públicos. As pessoas autoras, revisoras e editoras conhecem as identidades umas das outras. A comunidade mais ampla pode visualizar ou até participar da conversa conforme ela acontece. Isso incentiva a atenção aos detalhes e o fornecimento de avaliações construtivas e não adversariais. Tanto autores(as) quanto revisores(as) relatam que apreciam e aprendem mais com essa troca aberta e direta. Também traz o benefício de fortalecer a comunidade. Participantes têm a oportunidade de estabelecer conexões significativas com colegas, e novas colaborações surgiram a partir de ideias geradas durante o processo de revisão.\nEstamos cientes de que sistemas abertos podem ter desvantagens. Por exemplo, na revisão acadêmica tradicional, a revisão por pares duplo-cega pode aumentar a representação de autoras do gênero feminino, sugerindo viés em revisões não-cegas. Também é possível que revisores(as) sejam menos críticos em revisões abertas. No entanto, sustentamos que a abertura da conversa de revisão funciona como um controle de qualidade e viés; é mais difícil inserir comentários subjetivos ou sem embasamento em público e sem o manto do anonimato. Em última análise, acreditamos que a comunicação direta e pública entre autores(as) e revisores(as) melhora a qualidade e a equidade das revisões.\nAlém disso, os(as) autores(as) e revisores(as) podem entrar em contato com os(as) editores(as) em particular se tiverem alguma dúvida ou questão.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Revisão de software por pares, por quê? O que é?</span>"
    ]
  },
  {
    "objectID": "softwarereview_intro.pt.html#how-will-users-know-a-package-has-been-reviewed",
    "href": "softwarereview_intro.pt.html#how-will-users-know-a-package-has-been-reviewed",
    "title": "4  Revisão de software por pares, por quê? O que é?",
    "section": "4.5 Como os(as) usuários(as) saberão que um pacote foi revisado?",
    "text": "4.5 Como os(as) usuários(as) saberão que um pacote foi revisado?\n\nO README do seu pacote apresentará um selo de revisão por pares com um link para o tópico de revisão do software.\nSeu pacote terá um site de documentação em docs.ropensci.org que você pode referenciar no DESCRIPTION.\nSe você quiser, o repositório do seu pacote poderá ser transferido para a organização rOpenSci no GitHub.\nSe os(as) revisores(as) concordarem em ser listados(as) no DESCRIPTION, os metadados do pacote mencionarão a revisão.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Revisão de software por pares, por quê? O que é?</span>"
    ]
  },
  {
    "objectID": "softwarereview_intro.pt.html#editors-and-reviewers",
    "href": "softwarereview_intro.pt.html#editors-and-reviewers",
    "title": "4  Revisão de software por pares, por quê? O que é?",
    "section": "4.6 Editores(as) e revisores(as)",
    "text": "4.6 Editores(as) e revisores(as)\nO processo de revisão de software por pares da rOpenSci é conduzido pela nossa equipe dedicada de editores(as) e revisore(as). Informações sobre a equipe atual e o andamento da revisão de software por pares podem ser consultadas em nosso painel interativo.\nWarning in value[[jj]][ri] &lt;- if (is.factor(xij)) as.vector(xij) else xij:\nnumber of items to replace is not a multiple of replacement length\nWarning in names(value[[jj]])[ri] &lt;- nm: number of items to replace is not a\nmultiple of replacement length\nWarning in value[[jj]][ri] &lt;- if (is.factor(xij)) as.vector(xij) else xij:\nnumber of items to replace is not a multiple of replacement length\nWarning in names(value[[jj]])[ri] &lt;- nm: number of items to replace is not a\nmultiple of replacement length\nWarning in value[[jj]][ri] &lt;- if (is.factor(xij)) as.vector(xij) else xij:\nnumber of items to replace is not a multiple of replacement length\nWarning in names(value[[jj]])[ri] &lt;- nm: number of items to replace is not a\nmultiple of replacement length\nWarning in value[[jj]][ri] &lt;- if (is.factor(xij)) as.vector(xij) else xij:\nnumber of items to replace is not a multiple of replacement length\nWarning in names(value[[jj]])[ri] &lt;- nm: number of items to replace is not a\nmultiple of replacement length\nWarning in value[[jj]][ri] &lt;- if (is.factor(xij)) as.vector(xij) else xij:\nnumber of items to replace is not a multiple of replacement length\nWarning in names(value[[jj]])[ri] &lt;- nm: number of items to replace is not a\nmultiple of replacement length\nWarning in value[[jj]][ri] &lt;- if (is.factor(xij)) as.vector(xij) else xij:\nnumber of items to replace is not a multiple of replacement length\nWarning in names(value[[jj]])[ri] &lt;- nm: number of items to replace is not a\nmultiple of replacement length\n\n4.6.1 Editor(a)-Chefe\nNós alternamos nosso(a) editor(a)-chefe, geralmente a cada três meses. Nosso(a) editor(a)-chefe atual éLaura DeCicco.\n\n\n4.6.2 Editores(as) associados(as)\nO processo de revisão de software por pares da rOpenSci é conduzido por:\n\nJouni Helske, University of Jyväskylä, Finland;\nToby Hocking, Northern Arizona University, USA;\nJeff Hollister, US Environmental Protection Agency;\nRebecca Killick, Lancaster University, U.K.;\nAnna Krystalli;\nMauro Lepore, 2 Degrees Investing Initiative;\nBeatriz Milz, University of Sao Paulo - Institute of Energy and Environment;\nMark Padgham;\nEmily Riederer, Capital One;\nFrancisco Rodriguez-Sanchez, Universidad de Sevilla, Spain;\nNoam Ross, rOpenSci and EcoHealth Alliance;\nMaëlle Salmon, rOpenSci;\nMargaret Siple, National Oceanic and Atmospheric Administration;\nAdam Sparks, Curtin University;\nEmi Tanaka, Australian National University.\n\n\n\n4.6.3 Revisores(as) e editores(as) passados(as)\nAgradecemos as seguintes pessoas que dedicaram o seu tempo e conhecimento para revisar os pacotes submetidos à rOpenSci.\nEm Markowitz (NOAA) · Lorena Abad · Sam Albers · Toph Allen · Kaique dos S. Alves · Alison Appling · Zebulun Arendsee · Taylor Arnold · Al-Ahmadgaid B. Asaad · Dean Attali · Mara Averick · Suzan Baert · James Balamuta · Vikram Baliga · David Bapst · Joëlle Barido-Sottani · Allison Barner · Cale Basaraba · John Baumgartner · Marcus Beck · Gabriel Becker · Jason Becker · Salvador Jesus Fernandez Bejarano · Dom Bennett · Ken Benoit · Aaron Berdanier · Fred Boehm · Carl Boettiger · Will Bolton · Ben Bond-Lamberty · Anne-Sophie Bonnet-Lebrun · Alison Boyer · Abby Bratt · François Briatte · Eric Brown · Julien Brun · Jenny Bryan · Lukas Burk · Lorenzo Busetto · Kyle F Butts · Maria Paula Caldas · Mario Gavidia Calderón · Carlos Cámara-Menoyo · Brad Cannell · Paul CARTERON · Joaquin Cavieres · Kevin Cazelles · Cathy Chamberlin · Jennifer Chang · Pierre Chausse · Jorge Cimentada · Nicholas Clark · Chase Clark · Jon Clayden · Dena Jane Clink · Will Cornwell · Nic Crane · Enrico Crema · Verónica Cruz-Alonso · Ildiko Czeller · Tad Dallas · Kauê de Sousa · Laura DeCicco · Christophe Dervieux · Amanda Dobbyn · Jasmine Dumas · Christophe Dutang · Remko Duursma · Mark Edmondson · Paul Egeler · Evan Eskew · Harry Eslick · Denisse Fierro-Arcos · Alexander Fischer · Kim Fitter · Robert M Flight · Sydney Foks · Air Forbes · Stephen Formel · Zachary Stephen Longiaru Foster · Auriel Fournier · Kaija Gahm · Zach Gajewski · Carl Ganz · Duncan Garmonsway · Jan Laurens Geffert · Sharla Gelfand · Monica Gerber · Alex Gibberd · Duncan Gillespie · David Gohel · A. Cagri gokcek · Guadalupe Gonzalez · Rohit Goswami · Laura Graham · João Granja-Correia · Charles Gray · Matthias Grenié · Corinna Gries · Hugo Gruson · Ernest Guevarra · W Kyle Hamilton · Ivan Hanigan · Jeffrey Hanson · Liz Hare · Jon Harmon · Rayna Harris · Ted Hart · Nujcharee Haswell · Verena Haunschmid · Stephanie Hazlitt · Andrew Heiss · Max Held · Anna Hepworth · Bea Hernandez · Jim Hester · Peter Hickey · Tan Ho · Roel Hogervorst · Kelly Hondula · Allison Horst · Sean Hughes · James Hunter · Brandon Hurr · Ger Inberg · Christopher Jackson · Najko Jahn · Tamora D James · Veronica Jimenez-Jacinto · Mike Johnson · Will Jones · Max Joseph · Megha Joshi · Krunoslav Juraic · Soumya Kalra · Zhian N. Kamvar · Michael Kane · Andee Kaplan · Tinula Kariyawasam · Hazel Kavılı · Ella Kaye · Jonathan Keane · Christopher T. Kenny · Os Keyes · Eunseop Kim · Aaron A. King · Michael Koontz · Alexandros Kouretsis · Bianca Kramer · Will Landau · Sam Lapp · Erin LeDell · Thomas Leeper · Alex Leith · Sam Levin · Lisa Levinson · Stephanie Locke · Marion Louveaux · Robin Lovelace · Julia Stewart Lowndes · Adam Loy · Tim Lucas · Muralidhar, M.A. · Andrew MacDonald · Jesse Maegan · Mike Mahoney · Tristan Mahr · Yohann Mansiaux · Paula Andrea Martinez · Anthony Martinez · Joao Martins · Ben Marwick · Claire Mason · Tom Matthews · Miles McBain · Lucy D’Agostino McGowan · Amelia McNamara · Elaine McVey · Bryce Mecum · Nolwenn Le Meur · François Michonneau · Mario Miguel · David L Miller · Helen Miller · Jessica Minnier · Priscilla Minotti · Nichole Monhait · Kelsey Montgomery · Ronny A. Hernández Mora · Natalia Morandeira · George Moroz · Ross Mounce · Athanasia Monika Mowinckel · Lincoln Mullen · Matt Mulvahill · Maria Victoria Munafó · David Neuzerling · Dillon Niederhut · Joel Nitta · Rory Nolan · Kari Norman · Jakub Nowosad · Matt Nunes · Daniel Nüst · Lauren O’Brien · Joseph O’Brien · Paul Oldham · Samantha Oliver · Dan Olner · Jeroen Ooms · Victor Ordu · Luis Osorio · Philipp Ottolinger · Marina Papadopoulou · Edzer Pebesma · Thomas Lin Pedersen · Antonio J. Pérez-Luque · Marcelo S. Perlin · Rafael Pilliard-Hellwig · July Pilowsky · Rodrigo Pires · Lindsay Platt · Nicholas Potter · Joanne Potts · Josep Pueyo-Ros · Etienne Racine · Manuel Ramon · Nistara Randhawa · David Ranzolin · Quentin Read · Nicola Rennie · Neal Richardson · tyler rinker · Emily Robinson · David Robinson · Alec Robitaille · Sam Rogers · Julia Romanowska · Xavier Rotllan-Puig · Bob Rudis · Edgar Ruiz · Kent Russel · Michael Sachs · Sheila M. Saia · Chitra M Saraswati · Alicia Schep · Klaus Schliep · Clemens Schmid · Patrick Schratz · Collin Schwantes · Marco Sciaini · Eric Scott · Heidi Seibold · David Selby · Julia Silge · Peter Slaughter · Mike Smith · Tuija Sonkkila · Øystein Sørensen · Jemma Stachelek · Aymeric Stamm · Christine Stawitz · Irene Steves · Kelly Street · Matt Strimas-Mackey · Alex Stringer · Michael Sumner · Chung-Kai Sun · Sarah Supp · phanikumar s tata · Jason Taylor · Filipe Teixeira · Christian Testa · Andy Teucher · Jennifer Thompson · Joe Thorley · Nicholas Tierney · Tiffany Timbers · Daniel Timothy · Tan Tran · Tim Trice · Sunny Tseng · Anatolii Tsyplenkov · Utku Turk · Zoë Turner · Kyle Ueyama · Ted Underwood · Adithi R. Upadhya · Kevin Ushey · Josef Uyeda · Frans van Dunné · Mauricio Vargas · Remi Vergnon · Jake Wagner · Ben Ward · Elin Waring · Rachel Warnock · Leah Wasser · David Watkins · Lukas Weber · Marc Weber · Karissa Whiting · Stefan Widgren · Anna Willoughby · Saras Windecker · Luke Winslow · David Winter · Sebastian Wójcik · Witold Wolski · Kara Woo · Marvin N. Wright · Jacob Wujciak-Jens · Bruna Wundervald · Lauren Yamane · Emily Zabor · Taras Zakharko · Sherry Zhang · Hao Zhu · Chava Zibman · Naupaka Zimmerman · Jake Zwart · Felipe · santikka · brock · kasselhingee · Bri · Flury · Vincent · eholmes · Pachá · Rich · Claudia · Jasmine · Zack · Lluís · becarioprecario · gaurav\nTambém agradecemos aos seguintes editores(as) que atuaram anteriormente.\n\nBrooke Anderson;\nScott Chamberlain, Fred Hutch Cancer Center;\nJulia Gustavsen, Agroscope;\nPaula Moraga, King Abdullah University of Science and Technology (KAUST), Saudi Arabia;\nKarthik Ram, University of California, Berkeley, rOpenSci;\nMelina Vidoni.\n\nE aos(as) seguintes que atuaram como editores(as) convidados(as).\n\nLaura DeCicco;\nAna Laura Diedrichs;\nJulia Gustavsen;\nHao Zhu.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Revisão de software por pares, por quê? O que é?</span>"
    ]
  },
  {
    "objectID": "softwarereview_policies.pt.html",
    "href": "softwarereview_policies.pt.html",
    "title": "5  Políticas de revisão de software por pares",
    "section": "",
    "text": "5.1 Processo de revisão",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Políticas de revisão de software por pares</span>"
    ]
  },
  {
    "objectID": "softwarereview_policies.pt.html#policiesreviewprocess",
    "href": "softwarereview_policies.pt.html#policiesreviewprocess",
    "title": "5  Políticas de revisão de software por pares",
    "section": "",
    "text": "Para que um pacote seja considerado para a coleção da rOpenSci, os(as) autores(as) do pacote devem iniciar uma solicitação no repositório ropensci/software-review.\nOs pacotes são revisados quanto à qualidade, adequação, documentação e clareza, e o processo de revisão é bastante semelhante ao de um manuscrito (consulte nosso guia de desenvolvimento de pacotes e guia de revisão para obter mais detalhes). Diferentemente de uma revisão de manuscrito, esse processo se configura como uma conversa contínua.\nQuando todos os principais problemas e dúvidas, incluindo aqueles que podem ser abordados com esforço razoável, forem resolvidos, o(a) editor(a) designado para o pacote tomará uma decisão (aceitar, esperar ou rejeitar). Rejeições geralmente são feitas com antecedência (antes do início do processo de revisão; consulte a seção de objetivos e escopo). Em casos raros, um pacote também pode não ser aceito após a análise e a revisão. Em última análise, a decisão de rejeitar ou não o pacote é do(a) editor(a), com base em como as revisões são tratadas.\nA comunicação entre as pessoas envolvidas na autoria, revisão e edição ocorrerá principalmente pelo GitHub, embora você possa optar por entrar em contato com a pessoa responsável pela edição por e-mail ou Slack para alguns problemas. Ao submeter um pacote, certifique-se de que suas configurações de notificação do GitHub estejam ajustadas para que seja improvável você perder algum comentário.\nO(a) autor(a) pode optar por ter seu envio colocado em espera (o(a) editor(a) aplica a etiqueta (label) de espera). O status de espera será revisado a cada 3 meses e, após 1 ano, a issue será encerrada.\nSe o(a) autor(a) não tiver solicitado uma etiqueta de espera, mas simplesmente não estiver respondendo, devemos fechar a edição dentro de 1 mês após a última ocasião de contato. Esta ocasião incluirá um comentário marcando o(a) autor(a), mas também um e-mail usando o endereço de e-mail listado no DESCRIPTION do pacote, que é um dos raros casos no qual o(a) editor(a) tentará entrar em contato com o(a) autor(a) por e-mail.\nSe uma submissão for encerrada e o(a) autor(a) desejar reenviá-la, ele(a) terá que iniciar uma nova submissão. Se o pacote ainda estiver no escopo, o(a) autor(a) terá que responder às revisões iniciais antes que o(a) editor(a) comece a procurar novos(as) revisores(as).\n\n\n5.1.1 Publicando em outros locais\n\nSugerimos fortemente que você envie seu pacote para revisão antes de publicá-lo no CRAN ou enviar um artigo de software descrevendo o pacote em um periódico. O feedback da revisão pode resultar em grandes aprimoramentos e atualizações do seu pacote, incluindo renomeações e alterações críticas de funções. Não consideramos a publicação anterior no CRAN ou em outros locais como razão suficiente para não adotar as recomendações de revisores(as) ou editores(as).\nNão envie seu pacote para revisão se ele ou um manuscrito associado estiver sendo revisado em outro local, pois isso pode resultar em solicitações de alterações conflitantes.\n\n\n\n5.1.2 Conflito de interesses para a equipe de revisão e edição\nOs critérios a seguir devem servir de guia para o que constitui um conflito de interesses envolvendo quem faz a edição ou revisão. Existe um conflito de interesses se:\n\nQuem potencialmente revisará ou editará for da mesma instituição ou componente institucional (por exemplo, departamento) que qualquer autor(a) que tenha um papel importante no pacote.\nQuem potencialmente revisará ou editará colaborou ou teve outros laços profissionais com pelo menos uma pessoa que tenha um papel importante no pacote nos últimos 3 anos.\nQuem potencialmente revisará ou editará atua ou atuou membro(a) do conselho consultivo do projeto em análise.\nQuem potencialmente revisará ou editará receberia um benefício financeiro direto ou indireto se o pacote fosse aceito.\nQuem potencialmente revisará ou editará contribuiu significativamente para um projeto concorrente.\nTambém existe um conflito de interesses vitalício para familiares, relações comerciais/negócios e pessoas envolvidas em relações de orientação, sejam estudantes ou orientação/mentoria.\n\nNo caso em que nenhuma das pessoas da equipe editorial possa realizar a edição, uma pessoa externa será convidada para realizá-la.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Políticas de revisão de software por pares</span>"
    ]
  },
  {
    "objectID": "softwarereview_policies.pt.html#aims-and-scope",
    "href": "softwarereview_policies.pt.html#aims-and-scope",
    "title": "5  Políticas de revisão de software por pares",
    "section": "5.2 Objetivos e Escopo",
    "text": "5.2 Objetivos e Escopo\nO objetivo da rOpenSci é oferecer suporte a pacotes que possibilitem replicabilidade na pesquisa, assim como gerenciamento do ciclo de vida de dados para cientistas. Os pacotes enviados à rOpenSci devem se enquadrar em uma ou mais das categorias descritas abaixo. Software estatístico também pode ser enviado para revisão por pares, para o qual temos uma seção separada de diretrizes e padrões. As categorias abaixo são para software em geral, e não estatístico, enquanto o restante deste capítulo se aplica a ambos os tipos de software. Se você não tiver certeza se o seu pacote se encaixa em uma das categorias citadas, abra uma issue como uma consulta de pré-submissão (Exemplos).\nComo este é um documento dinâmico, essas categorias podem mudar com o tempo e nem todos os pacotes previamente integrados podem estar no escopo atual. Por exemplo, os pacotes de visualização de dados não estão mais no escopo. Embora nos esforcemos para ser consistentes, avaliamos os pacotes caso a caso e podemos abrir exceções.\nObserve que nem todos os projetos e pacotes da rOpenSci estão dentro do escopo ou passam por revisão por pares. Projetos desenvolvidos pela equipe da rOpenSci ou em conferências podem ser experimentais, exploratórios, tratar de prioridades essenciais de infraestrutura e, portanto, não se enquadram nessas categorias. Procure o selo (badge) de revisão por pares – veja abaixo – para identificar pacotes revisados por pares no repositório da rOpenSci.\n\n\n\nexemplo de um selo (badge) verde de revisão por pares\n\n\n\n5.2.1 Categorias de pacotes\n\nrecuperação de dados: Pacotes para acessar e fazer download de dados de fontes online com aplicações científicas. Nossa definição de aplicações científicas é ampla, incluindo serviços de armazenamento de dados, periódicos e outros servidores remotos, já que muitas fontes de dados podem ser de interesse de pesquisadores(as). Entretanto, os pacotes de recuperação devem se concentrar em fontes de dados / tópicos em vez de serviços. Por exemplo, um cliente comum para armazenamento de dados na Amazon Web Services não estaria no escopo. (Exemplos: rotl, gutenbergr)\nextração de dados: Pacotes que auxiliam na obtenção de dados de fontes não estruturadas, como texto, imagens e PDFs, bem como na análise de tipos de dados científicos e outputs (saídas) de equipamentos científicos. Bibliotecas estatísticas ou de aprendizado automático para modelagem ou previsão normalmente não são incluídas nesta categoria, nem os analisadores de código (code parsers). Os modelos treinados que atuam como utilitários (por exemplo, para reconhecimento óptico de caracteres) podem se qualificar. (Exemplos: tabulizer para extrair tabelas de documentos PDF, genbankr para analisar arquivos do GenBank, treeio para leitura de arquivos de árvores filogenéticas, lightr para analisar arquivos de instrumentos espectroscópicos)\nprocessamento de dados: Pacotes para processamento de dados dos formatos acima. Essa área não inclui ferramentas de manipulação de dados amplas, como reshape2 ou tidyr, ou ferramentas para extração de dados do próprio código R. Em vez disso, ele se concentra em ferramentas para lidar com dados em formatos científicos específicos, gerados a partir de fluxos de trabalho científicos ou exportados de instrumentos científicos. (Exemplos: plateR para leitura de dados estruturados como mapas de placas para instrumentos científicos, ou phonfieldwork para processar arquivos de áudio anotados para pesquisa fonética)\ndepósito de dados: Pacotes que possibilitam o depósito de dados em repositórios de pesquisa, incluindo a formatação de dados e a geração de metadados. (Exemplo: EML)\nvalidação e teste de dados: Ferramentas que permitem a validação e a verificação automatizadas da qualidade e da integridade dos dados como parte dos fluxos de trabalho científicos (Exemplo: assertr)\nautomação de fluxo de trabalho: Ferramentas que automatizam e vinculam fluxos de trabalho, como sistemas de compilação e ferramentas para gerenciar a integração contínua. Não inclui ferramentas gerais para programação letrada (literate programming) (por exemplo, extensões de R Markdown não incluídas nos tópicos anteriores) (Exemplo: drake)\ncontrole de versão: Ferramentas que facilitam o uso de controle de versões em fluxos de trabalho científicos. Observe que isso não inclui todas as ferramentas que interagem com serviços de controle de versão online (por exemplo, GitHub), a menos que elas se enquadrem em outra categoria (Exemplo: git2rdata)\ngerenciamento de citações e bibliometria: Ferramentas que facilitam o gerenciamento de referências, como para escrever manuscritos, criar currículos ou atribuir contribuições científicas, ou acessar, manipular ou trabalhar com dados bibliométricos (Exemplo: RefManageR)\nwrappers de software científico: Pacotes que envelopam (wrap) programas utilitários fora do ambiente R, usados para pesquisa científica. Esses programas devem ser específicos para campos de pesquisa, e não utilitários gerais de computação. Os wrappers devem ser não triviais, ou seja, devem ter um valor agregado significativo em relação ao simples uso de chamadas ou vinculações do system(), seja na análise de argumentos (inputs) e resultados (outputs), no manuseio de dados, etc. Um processo de instalação aprimorado ou a extensão da compatibilidade para mais plataformas pode constituir um valor agregado se a instalação for complexa. Isso não inclui wrappers de outros pacotes do R ou bibliotecas de C/C++ que podem ser incluídas nos pacotes do R. Isso também não inclui pacotes que são clientes para APIs na internet, que devem se enquadrar em uma das outras categorias. Recomendamos enfaticamente que você inclua utilitários de código aberto e de licença aberta. Exceções serão avaliadas caso a caso, considerando se opções de código aberto existem (Exemplos: babette, nlrx)\nferramentas de reprodutibilidade de campo e laboratório: Pacotes que melhoram a reprodutibilidade de fluxos de trabalho do mundo real por meio da padronização e automação de protocolos de campo e laboratório, como rastreamento e marcação de amostras, geração de formulários e planilhas de dados, interface com equipamentos de laboratório ou sistemas de informação e execução de desenhos experimentais (Exemplo: baRcodeR)\nvinculações de software de banco de dados: Vinculações (bindings) e wrappers para APIs de bancos de dados genéricos (Exemplo: rrlite)\n\nAlém disso, temos alguns tópicos especializados com um escopo um pouco mais amplo.\n\ndados geoespaciais: Aceitamos pacotes focados no acesso, na manipulação e na conversão entre formatos de dados geoespaciais (Exemplos: osmplotr, tidync)\ntradução: Como parte de nosso trabalho em publicações multilíngue, temos um interesse especial em pacotes que facilitem a tradução e a publicação de recursos científicos e de programação em vários idiomas (humanos) para que sejam acessíveis ao público em maior alcance e diversidade. Isso pode incluir interfaces para programas de tradução automática, estruturas para gerenciar documentação em vários idiomas ou programas que acessem recursos linguísticos especializados. Este é um escopo novo e experimental, portanto, crie uma consulta de pré-submissão se você tiver interesse em enviar um pacote nesta categoria.\nFerramentas internas da rOpenSci pacotes criados e/ou usados pela equipe da rOpenSci para apoiar a revisão por pares de software e outras iniciativas relacionadas.\n\n\n\n5.2.2 Outras considerações sobre o escopo\nOs pacotes devem ser gerais no sentido de que devem resolver um problema da forma mais ampla possível, enquanto mantém uma interface de usuário(a) e uma base de código coerentes. Por exemplo, se várias fontes de dados usam uma API idêntica, preferimos um pacote que forneça acesso a todas estas fontes de dados, em vez de acesso a apenas uma.\nOs pacotes que incluem ferramentas interativas para facilitar os fluxos de trabalho de pesquisadores(as) (por exemplo, aplicativos em shiny) devem ter um mecanismo para tornar o fluxo de trabalho interativo reprodutível, como a geração de código ou uma API com script.\nPara pacotes que não estão no escopo da rOpenSci, recomendamos que você os envie para o CRAN, Bioconductor, bem como para outras iniciativas de desenvolvimento de pacotes do R (por exemplo, cloudyr) e periódicos de software, como JOSS, JSS ou o R journal, dependendo do escopo atual desses periódicos.\nObserve que os pacotes desenvolvidos internamente pela rOpenSci, por meio de nossos eventos ou colaborações, não estão necessariamente no escopo do nosso processo de revisão de software por pares.\n\n\n5.2.3 Sobreposição de pacotes\nA rOpenSci incentiva a competição entre pacotes, como forking e reimplementação, pois isto melhora as opções dos usuários em geral. No entanto, como queremos que os pacotes da coleção rOpenSci tenham nossas principais recomendações para as tarefas que realizam, nosso objetivo é evitar a duplicação da funcionalidade de pacotes R existentes em qualquer repositório, se estes não apresentam melhorias significativas. Um pacote R que replica a funcionalidade de um pacote R já existente pode ser considerado a inclusão no conjunto rOpenSci, se ele melhorar significativamente as alternativas em qualquer repositório (RO, CRAN, BioC) por ser:\n\nMais aberto nas práticas de licenciamento ou desenvolvimento\nMais amplo em termos de funcionalidade (por exemplo, fornecendo acesso a mais conjuntos de dados ou um conjunto maior de funções), mas não apenas duplicando pacotes adicionais\nMelhor em termos de usabilidade e desempenho\nMantido mais ativamente, enquanto as alternativas são pouco ou não são mais mantidas\n\nEsses fatores devem ser considerados como um todo para determinar se o pacote representa uma melhoria significativa. Um novo pacote não atenderia a esse padrão apenas por seguir nossas diretrizes, enquanto outros não o fazem, a menos que isso leve a uma diferença significativa como mencionado acima.\nRecomendamos que os pacotes destaquem as diferenças e os aprimoramentos quanto aos pacotes aos quais se sobrepõem em seu README e/ou vignettes.\nIncentivamos as pessoas desenvolvedoras cujos pacotes não forem aceitos devido à sobreposição com outros pacotes a considerarem submissões para outros repositórios ou periódicos.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Políticas de revisão de software por pares</span>"
    ]
  },
  {
    "objectID": "softwarereview_policies.pt.html#ownership-after-softwarereview",
    "href": "softwarereview_policies.pt.html#ownership-after-softwarereview",
    "title": "5  Políticas de revisão de software por pares",
    "section": "5.3 Propriedade e manutenção de pacotes",
    "text": "5.3 Propriedade e manutenção de pacotes\n\n5.3.1 Função da equipe da rOpenSci\nOs(as) autores(as) de pacotes contribuídos a rOpenSci mantêm essencialmente a mesma propriedade que tinham antes de seu pacote entrar no conjunto rOpenSci. Os(as) autores(as) de pacotes continuarão a manter e desenvolver seu software após a aceitação na rOpenSci. A menos que sejam explicitamente adicionados como colaboradores, a equipe da rOpenSci não interferirá muito nas operações corriqueiras. No entanto, essa equipe poderá intervir com correções de bugs críticos ou resolver problemas urgentes se os(as) autores(as) dos pacotes não responderem em tempo hábil (consulte abaixo a seção sobre responsividade de mantenedores).\n\n\n5.3.2 Responsividade de mantenedores\nSe as pessoas que mantém o pacote não responderem em tempo hábil às solicitações de correções de pacotes feitas pelo CRAN ou por nós, lembraremos algumas vezes, mas depois de 3 meses (ou em um período mais curto, dependendo da importância da correção) a equipe da rOpenSci fará as alterações.\nO que foi dito acima é um pouco vago, portanto, a seguir estão alguns aspectos a serem considerados.\n\nExemplos em que gostaríamos de agir rapidamente:\n\nPacote foo é importado por um ou mais pacotes no CRAN. foo está quebrado e, portanto, quebraria suas dependências reversas\nPacote bar pode não ter dependências reversas no CRAN, mas é amplamente usado e, portanto, a correção rápida de problemas que ele apresenta é de grande importância\n\nExemplos em que podemos esperar um pouco mais:\n\nPacote hello está ou não está no CRAN, porém não tem dependências reversas\nPacote world precisa de algumas correções. A pessoa que mantém o pacote respondeu, mas simplesmente está muito ocupada, porém atenderá a solicitação em breve\n\n\nPedimos aos(as) mantenedores(as) de pacotes que se certifiquem de que estão recebendo notificações do GitHub, bem como que os e-mails da equipe da rOpenSci e dos mantenedores do CRAN não estejam indo para a caixa de spam. Os(as) autores(as) de pacotes integrados à rOpenSci serão convidados ao Slack da rOpenSci para poder conversar com a equipe da rOpenSci e com a comunidade em geral. Qualquer pessoa também pode discutir com a comunidade rOpenSci no site Fórum de discussão da rOpenSci.\nSe os(as) autores(as) abandonarem a manutenção de um pacote usado ativamente na rOpenSci, consideraremos a possibilidade de solicitar ao CRAN a transferência do status de mantenedor do pacote para a rOpenSci.\n\n\n5.3.3 Compromisso com a qualidade\nA rOpenSci se esforça para desenvolver e promover software de pesquisa de alta qualidade. Para garantir que o seu software atende aos nossos critérios, analisamos todas as nossas submissões dentro do processo de Revisão de Software por Pares. Mesmo após a aceitação do pacote, continuaremos a contribuir com melhorias e correções de bugs.\nApesar de nossos melhores esforços em oferecer suporte ao software contribuído, erros são de responsabilidade dos(as) mantenedores(as) individuais. Os softwares com muitos bugs e sem manutenção adequada podem ser removidos da nossa coleção a qualquer momento.\n\n\n5.3.4 Remoção de pacotes\nNo caso improvável de um(a) colaborador(a) de um pacote solicitar a remoção de seu pacote da coleção da rOpenSci, temos o direito de manter uma versão do pacote em nossa coleção para fins de arquivamento.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Políticas de revisão de software por pares</span>"
    ]
  },
  {
    "objectID": "softwarereview_policies.pt.html#ethics-data-privacy-and-human-subjects-research",
    "href": "softwarereview_policies.pt.html#ethics-data-privacy-and-human-subjects-research",
    "title": "5  Políticas de revisão de software por pares",
    "section": "5.4 Ética, Privacidade de Dados e Pesquisa com Seres Humanos",
    "text": "5.4 Ética, Privacidade de Dados e Pesquisa com Seres Humanos\nOs pacotes da rOpenSci e outras ferramentas são usados para uma variedade de finalidades, mas nosso foco são ferramentas para pesquisa. Esperamos que as ferramentas possibilitem o uso ético por profissionais da pesquisa, que são obrigados(as) a aderir a códigos de ética, como a Declaração de Helsinque e o Relatório Belmont. Os(as) pesquisadores(as) são responsáveis pelo uso de software, mas desenvolvedores(as) de software devem considerar o uso ético de seus produtos. Desenvolvedores(as) de software também aderem a códigos de ética direcionados a profissionais de computação, como aqueles mencionados pela IEEE e ACM. Os(as) contribuidores(as) da rOpenSci frequentemente desempenham tanto o papel de pesquisador(a) como desenvolvedor(a).\nPedimos que os(as) desenvolvedores(as) de software se coloquem no papel de pesquisadores(as) e considerem os requisitos de um fluxo de trabalho ético usando o software dos(as) autores(as). Dada a variação e o grau de fluxo das abordagens éticas para análises baseadas na Internet, são necessários julgamentos em vez de receitas. As Diretrizes Éticas da Associação de Pesquisadores da Internet fornece uma estrutura robusta, a qual incentivamos autores(as), editores(as) e revisores(as) usar para que avaliem seus trabalhos. Em geral, a adesão a normas legais ou requerimentos mínimos regulamentares (por exemplo, GDPR) pode não ser suficiente, embora relevantes. Os(as) autores(as) de pacotes devem direcionar os(as) usuários(as) a recursos relevantes para o uso ético do software. (Nota de tradução. GDPR é a sigla para General Data Protection Regulation, a lei de proteção de dados pessoais vigente na Europa. É similar à LGPD - Lei Geral de Proteção de Dados Pessoais, existente no Brasil.)\nAlguns pacotes, devido à natureza dos dados que manipulam, podem ser considerados pelos(as) editores(as) como necessitando um exame mais minucioso. Para esses pacotes, os(as) editores(as) podem exigir funcionalidades adicionais (ou reduzidas), uma documentação robusta, padrões e avisos para direcionar os(as) usuários(as) a práticas éticas relevantes. Os tópicos a seguir podem merecer um exame minucioso:\n\nPopulações vulneráveis. Autores(as) de pacotes e fluxos de trabalho que lidam com informações relacionadas a populações vulneráveis têm a responsabilidade de proteger essas populações de possíveis danos.\nDados sensíveis ou de identificação pessoal: A liberação de dados sensíveis ou de identificação pessoal é potencialmente prejudicial. Isso inclui dados “razoavelmente reidentificáveis”, onde um indivíduo poderia rastrear determinada pessoa proprietária ou criadora, mesmo que os dados sejam anônimos. Isso inclui ambos casos em que identificadores (por exemplo, nome, data de nascimento) estão disponíveis como parte dos dados ou se pseudônimos/nicknames exclusivos estiverem vinculados a postagens de texto completo, por meio das quais alguém pode vincular indivíduos por meio de referências cruzadas com outros conjuntos de dados.\n\nEmbora a melhor resposta às preocupações éticas seja específica para cada contexto, essas diretrizes gerais devem ser seguidas pelos pacotes quando os desafios acima surgirem:\n\nOs pacotes devem aderir aos termos de uso da fonte de dados, conforme expresso em Termos e condições do site, arquivos “robots.txt”, políticas de privacidade e e outras restrições relevantes, e coloque um link para eles de forma destacada na documentação do pacote. Os pacotes devem fornecer ou documentar a funcionalidade para aderir a a essas restrições (por exemplo, raspar somente de endpoints permitidos, usar o limite de taxa (rate limiting) apropriado nos códigos, exemplos ou vinhetas). Observe que, embora os Termos e Condições, Políticas de Privacidade, etc., não forneçam limites suficientes para a uso ético, eles podem fornecer um limite externo.\nUma ferramenta fundamental para lidar com os riscos apresentados ao estudar populações vulneráveis ou no uso de dados pessoalmente identificáveis é o consentimento informado. Autores(as) do pacote devem apoiar a obtenção do consentimento informado dos usuários, quando relevante. Isso pode incluir o fornecimento de links para o método preferido da fonte de dados para a obtenção do consentimento, informações de contato dos provedores de dados (por exemplo, moderadores do fórum), documentação de protocolos de consentimento informado ou a obtenção de pré-aprovação para usos gerais de um pacote.\nObserve que o consentimento não é concedido implicitamente apenas pelo fato de os dados estarem acessíveis. Dados acessíveis não são necessariamente públicos, já que diferentes pessoas e contextos têm diferentes expectativas normativas de privacidade (consulte o trabalho do Social Data Lab).\nOs pacotes que acessam informações pessoais identificáveis devem ter um cuidado especial para seguir as práticas recomendadas de segurança (por exemplo, uso exclusivo de protocolos de internet seguros, mecanismos fortes para armazenamento de credenciais, etc.)\nPacotes que acessam ou manipulam dados pessoais identificáveis ou dados sensíveis devem permitir, documentar e demonstrar fluxos de trabalho para desidentificação, armazenamento seguro e outras práticas recomendadas para minimizar o risco de danos.\n\nÀ medida que os padrões de privacidade de dados e pesquisa continuam a evoluir, damos boas-vindas as contribuições dos(as) autores(as) sobre considerações específicas de seu software e documentações suplementares, como aprovação de comitês de ética universitária. Essas podem ser anexadas à issue de submissão de pacote ou consulta de pré-submissão, ou transmitidas diretamente aos(as) editores(as), se necessário. Sugestões genéricas podem ser registradas como issues no repositório deste livro.\n\n5.4.1 Recursos\nOs recursos a seguir podem ser úteis para pesquisadores(as), autores(as) de pacotes, editores(as) e revisores(as) na abordagem de questões éticas relacionadas à privacidade e ao software de pesquisa.\n\nOs Declaração de Helsinque e o Relatório Belmont fornecem princípios fundamentais para a prática ética de pesquisadores(as).\nVárias organizações fornecem orientações sobre como traduzir esses princípios para o contexto da pesquisa na internet. Entre elas estão a Diretrizes Éticas da Associação de Pesquisadores da Internet, o Guia NESH para a Ética de Pesquisa na Internet e as Diretrizes de Ética para pesquisas mediadas pela Internet da BPS. Anabo et al (2019) fornece uma visão geral útil sobre isso.\nO Social Data Science Lab fornece uma visão geral com dados sobre expectativas normativas de privacidade e uso em fóruns sociais.\nBechmann A., Kim J.Y. (2019) Big Data: A Focus on Social Media Research Dilemmas. Em: Iphofen R. (org.) Handbook of Research Ethics and Scientific Integrity. https://doi.org/10.1007/978-3-319-76040-7_18-1\nChu, K.-H., Colditz, J., Sidani, J., Zimmer, M., & Primack, B. (2021). Re-evaluating standards of human subjects protection for sensitive health data in social media networks. Social Networks, 67, 41-46. https://dx.doi.org/10.1016/j.socnet.2019.10.010\nLomborg, S., & Bechmann, A. (2014). Using APIs for Data Collection on Social Media. The Information Society, 30(4), 256–265. https://dx.doi.org/10.1080/01972243.2014.915276\nFlick, C. (2016). Informed consent and the Facebook emotional manipulation study. Research Ethics, 12(1), 14–28. https://doi.org/10.1177/1747016115599568\nSugiura, L., Wiles, R., & Pope, C. (2017). Ethical challenges in online research: Public/private perceptions. Research Ethics, 13(3–4), 184–199. https://doi.org/10.1177/1747016116650720\nTaylor, J., & Pagliari, C. (2018). Mining social media data: How are research sponsors and researchers addressing the ethical challenges? Research Ethics, 14(2), 1–39. https://doi.org/10.1177/1747016117738559\nZimmer, M. (2010). “But the data is already public”: on the ethics of research in Facebook. Ethics and Information Technology, 12(4), 313–325 https://dx.doi.org/10.1007/s10676-010-9227-5",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Políticas de revisão de software por pares</span>"
    ]
  },
  {
    "objectID": "softwarereview_policies.pt.html#code-of-conduct",
    "href": "softwarereview_policies.pt.html#code-of-conduct",
    "title": "5  Políticas de revisão de software por pares",
    "section": "5.5 Código de Conduta",
    "text": "5.5 Código de Conduta\nA comunidade da rOpenSci é o nosso melhor patrimônio. Seja você uma pessoa colaboradora assídua ou recém-chegada, nós nos preocupamos em fazer deste um lugar seguro para você, por isso te apoiamos. Temos um Código de Conduta que se aplica a todas as pessoas que participam da comunidade rOpenSci, incluindo a equipe e a liderança da rOpenSci, e a todos os modos de interação online ou pessoalmente. O Código de Conduta é mantido no site da rOpenSci.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Políticas de revisão de software por pares</span>"
    ]
  },
  {
    "objectID": "softwarereview_author.pt.html",
    "href": "softwarereview_author.pt.html",
    "title": "6  Guia para Autores",
    "section": "",
    "text": "6.1 Planejando uma Submissão (ou uma Consulta de Pré-Submissão)",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Guia para Autores</span>"
    ]
  },
  {
    "objectID": "softwarereview_author.pt.html#planning-a-submission-or-a-pre-submission-enquiry",
    "href": "softwarereview_author.pt.html#planning-a-submission-or-a-pre-submission-enquiry",
    "title": "6  Guia para Autores",
    "section": "",
    "text": "6.1.1 Escopo\n\nConsulte nossas políticas de uso para ver se o seu pacote atende aos nossos critérios e se encaixa em nossa coleção, não se sobrepondo a outros pacotes já existentes.\n\nSe você não tiver certeza de que um pacote atende aos nossos critérios, sinta-se à vontade para abrir um issue no GitHub como uma consulta de pré-submissão para perguntar se o pacote é apropriado.\nExemplo de resposta a sobreposição. Também considere adicionar alguns pontos sobre pacotes semelhantes ao seu na sua documentação do pacote.\n\n\n\n\n6.1.2 Ciclo de vida\n\nNão envie vários pacotes ao mesmo tempo: solicitamos que você espere até que um pacote seja aprovado antes de enviar outro.\nVocê pretende manter o seu pacote por pelo menos 2 anos ou ser capaz de identificar uma nova pessoa para mantê-lo?\nConsidere o melhor momento de desenvolvimento do seu pacote para enviar sua submissão. Seu pacote deve estar suficientemente maduro para que os revisores possam analisar todos os aspectos essenciais, mas tenha em mente que revisões podem resultar em grandes alterações.\n\nSugerimos enfaticamente que você envie seu pacote para análise antes de publicá-lo no CRAN ou antes de enviá-lo para publicação como artigo em um periódico. O feedback da revisão pode resultar em grandes aprimoramentos e atualizações do seu pacote, incluindo renomeações e alterações de funções.\nNão envie seu pacote para revisão enquanto este ou o manuscrito associado também estiver sendo revisado em outro local, pois isso pode resultar em solicitações conflitantes de alterações.\n\nConsidere também o tempo e o esforço necessários para responder às revisões: pense na sua disponibilidade ou na de seus colaboradores nas próximas semanas e meses após o envio da submissão. Observe que os revisores são voluntários e pedimos que você respeite o tempo e o esforço deles, respondendo de maneira oportuna e respeitosa.\nSe você usa distintivos do repostatus.org (o que recomendamos), envie uma submissão quando você estiver pronto para receber um distintivo tipo Active em vez de WIP. Da mesma forma, se você usa distintivos tipo lifecycle o envio da submissão deverá ocorrer quando o pacote for Stable.\nSeu pacote continuará a evoluir após a revisão. O capítulo sobre Evolução do pacote fornece mais orientações sobre este tópico.\n\n\n\n6.1.3 Documentação\n\nPara qualquer envio ou consulta de pré-submissão, o README do seu pacote deve fornecer informações suficientes sobre o pacote (objetivos, uso, pacotes semelhantes) para que os editores avaliem seu escopo sem precisar instalar o pacote. Melhor ainda, crie um website pkgdown para permitir uma avaliação mais detalhada da funcionalidade online.\n\nNo estágio de envio da submissão, todas as principais funções devem ser estáveis o suficiente para serem totalmente documentadas e testadas; o README deve apresentar uma base segura para o pacote.\nSeu arquivo README deve assegurar-se em explicar a funcionalidade e os objetivos do seu pacote, presumindo que os leitores tenham pouco ou nenhum conhecimento do domínio. Todos os termos técnicos, inclusive as referências a outros softwares, devem ser esclarecidos.\n\nSeu pacote continuará a evoluir após a revisão. O capítulo sobre Evolução do pacote fornece mais orientações sobre este tópico.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Guia para Autores</span>"
    ]
  },
  {
    "objectID": "softwarereview_author.pt.html#preparing-for-submission",
    "href": "softwarereview_author.pt.html#preparing-for-submission",
    "title": "6  Guia para Autores",
    "section": "6.2 Preparando para Submissão",
    "text": "6.2 Preparando para Submissão\n\n6.2.1 Solicitação de ajuda\n\nFique à vontade para fazer perguntas sobre o processo ou sobre seu pacote em específico no nosso Fórum de discussão.\n\n\n\n6.2.2 Diretrizes\n\nLeia e siga nosso guia de estilo de pacotes e nosso guia de revisão, para garantir que seu pacote atenda aos nossos critérios de estilo e qualidade.\n\n\n\n6.2.3 Verificações automáticas\n\nTodas as submissões são verificadas automaticamente pelo nosso pkgcheck para garantir que os pacotes sigam as nossas diretrizes. Espera-se que todas as pessoas autoras tenham executado a principal função do pkgcheck localmente para confirmar que o pacote está pronto para ser submetido. Como alternativa, uma maneira ainda mais fácil de garantir que um pacote está pronto para ser submetido é usando a função pkgcheck do GitHub Action, conforme descrito em nossa postagem no blog.\nSe o seu pacote exigir dependências incomuns de sistema (consulte Guia de pacotes) para que a GitHub Action seja aprovada, envie um pull request adicionando-as ao nosso arquivo Dockerfile. Consulte esta vinheta pkgcheck para obter detalhes sobre o nosso ambiente de verificação e como modificá-lo para ajudar o seu pacote a passar nas verificações.\nSe houver algum aspecto do pkgcheck no qual seu o pacote não possa ser aprovado, explique os motivos no seu modelo de submissão.\n\n\n\n6.2.4 Manuscrito de acompanhamento (opcional)\nSe você pretende enviar um manuscrito de acompanhamento para seu o pacote, a rOpenSci tem uma parceria de colaboração com os periódicos [Journal of Open-Source Software] (https://joss.theoj.org/) e [Methods in Ecology and Evolution] (https://besjournals.onlinelibrary.wiley.com/journal/2041210X):\n\nPara enviar um pacote ao Journal of Open-Source Software (JOSS), não o envie para consideração do JOSS até que o processo de revisão do rOpenSci tenha terminado: se o seu pacote for considerado dentro do escopo pelos editores do JOSS, apenas o artigo curto que o acompanha será revisado (não o software que terá sido revisado extensivamente pelo rOpenSci até aquele momento). Nem todos os pacotes da rOpenSci atenderão aos critérios do JOSS.\nPara uma submissão ao Methods in Ecology and Evolution (MEE), envie-a ao MEE somente depois que as revisoras e revisores da rOpenSci tiverem enviado suas revisões, antes ou depois de o pacote ter sido aceito. A colaboração de revisão com a MEE foi apresentada em uma postagem de blog. O tipo de artigo relevante para a MEE é Applications para obter mais detalhes.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Guia para Autores</span>"
    ]
  },
  {
    "objectID": "softwarereview_author.pt.html#the-submission-process",
    "href": "softwarereview_author.pt.html#the-submission-process",
    "title": "6  Guia para Autores",
    "section": "6.3 O Processo de Submissão",
    "text": "6.3 O Processo de Submissão\n\nUm software é enviado/submetido para revisão através da abertura de uma nova issue no repositório de revisão do software, sendo preenchido o modelo sugerido.\nO modelo sugerido começa com uma seção que inclui diversas variáveis no estilo HTML (&lt;!---variável---&gt;). Elas são usadas pelo nosso ropensci-review-bot e devem ser deixadas nos seus respectivos lugares, com valores preenchidos entre os pontos de início e fim indicados, assim:\n\n\n&lt;!---variável---&gt;insira valor aqui&lt;!---variável-fim&gt;\n\n\nA comunicação entre autores, revisores e editores ocorrerá primeiramente no GitHub para que o tópico de revisão possa servir como um registro completo da revisão. Você pode optar por entrar em contato com o editor por e-mail ou Slack se for necessária uma consulta particular (por exemplo, perguntar como responder a uma pergunta de um revisor). Não entre em contato com os revisores fora do tópico (thread do GitHub) sem perguntar a eles de antemão se eles concordam com isso.\nAo submeter um pacote, certifique-se de que suas notificações do GitHub estão ativadas para que você não perca qualquer comentário relacionado a sua submissão.\nOs pacotes são verificados automaticamente no momento de submissão pelo nosso pkgcheck, que confirma se um pacote está ou não pronto para ser revisado.\nOs pacotes submetidos podem ser hospedados na ramificação principal/padrão ou em qualquer outra ramificação não padrão. Neste último caso, é recomendável, mas não obrigatório, enviar o pacote por meio de uma ramificação dedicada tipo ropensci-software-review.\nPara envios em ramificações (branches) que não sejam a padrão, o URL indicado em “Repository” no modelo de envio deve ser o URL completo da ramificação de revisão, como por exemplo: https://github.com/my/repo/tree/ropensci-software-review.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Guia para Autores</span>"
    ]
  },
  {
    "objectID": "softwarereview_author.pt.html#the-review-process",
    "href": "softwarereview_author.pt.html#the-review-process",
    "title": "6  Guia para Autores",
    "section": "6.4 O Processo de Revisão",
    "text": "6.4 O Processo de Revisão\n\nUm editor editor analisará sua submissão em até 5 dias úteis e responderá com as próximas etapas. O editor poderá atribuir o pacote a revisores, solicitar que o pacote seja atualizado para atender aos critérios mínimos antes da revisão ou rejeitar o pacote devido à falta de adequação ou sobreposição.\nSe o seu pacote atender aos critérios mínimos, o editor designará de 1 a 3 revisores. Eles serão solicitados a fornecer revisões como comentários sobre a sua issue (submissão) dentro de 3 semanas.\nPedimos que você responda aos comentários dos revisores em até 2 semanas após a última revisão enviada, mas você pode fazer atualizações no seu pacote ou responder a qualquer momento. Sua resposta deve incluir um link para a versão atualizada da sua NEWS.md do seu pacote. Aqui está um exemplo de resposta de autor. Incentivamos conversas contínuas entre autores e revisores. Consulte a seção guia de revisão para obter mais detalhes.\nFrequentemente, mudanças no pacote podem alterar os resultados automatizados das verificações pkgcheck. Para avaliar isso, autores podem solicitar uma nova verificação do pacote com o comando @ropensci-review-bot check package.\nNotifique-nos imediatamente se você não puder mais manter o seu pacote ou responder às revisões. Nestes casos, se espera que você retire a submissão ou que encontre mantenedores alternativos para o pacote. Você também pode discutir questões de manutenção na área de trabalho da rOpenSci no Slack.\nAssim que seu pacote for aprovado, forneceremos mais instruções sobre a transferência do seu repositório para o repositório da rOpenSci.\n\nNosso código de conduta é obrigatório para todos os envolvidos em nosso processo de revisão.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Guia para Autores</span>"
    ]
  },
  {
    "objectID": "softwarereview_reviewer.pt.html",
    "href": "softwarereview_reviewer.pt.html",
    "title": "7  Guia para revisores",
    "section": "",
    "text": "7.1 Se voluntariando como revisor(a)\nObrigado pelo seu desejo de participar como revisor(a) da revisão por pares de software da rOpenSci!\nPor favor, preencha o nosso formulário de voluntariado.\nSe você encontrar alguma submissão que seja particularmente relevante para seus interesses, envie um e-mail para info@ropensci.org, incluindo o nome do pacote, a URL da issue que corresponde a este envio e o nome do(a) editor(a) responsável. No entanto, lembre-se de que o(a) editor(a) é responsável por indicar os(as) potenciais revisores(as), sendo possível que outras pessoas já tenham sido convidadas. Pedimos que não se candidate a todas as submissões e também evite se voluntariar diretamente pela interface do GitHub.\nPara saber outras maneiras de contribuir, consulte o Guia de contribuição da rOpenSci.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Guia para revisores</span>"
    ]
  },
  {
    "objectID": "softwarereview_reviewer.pt.html#preparereview",
    "href": "softwarereview_reviewer.pt.html#preparereview",
    "title": "7  Guia para revisores",
    "section": "7.2 Preparando a sua revisão",
    "text": "7.2 Preparando a sua revisão\nAs revisões devem ser baseadas na versão mais recente da branch main no GitHub, a menos que os(as) autores(as) do pacote indiquem o contrário. Todos os envios criam um relatório detalhado, gerado pelo nosso pacote pkgcheck, sobre a estrutura e a funcionalidade do pacote enviado. Se o pacote tiver sido alterado substancialmente desde as últimas verificações, você pode solicitar uma nova verificação com o comando @ropensci-review-bot check package. Observe que, ao instalar o pacote para revisá-lo, você deve se certificar de que todas as dependências estão disponíveis em sua máquina (por exemplo, você pode executar pak::pak() para isso).\n\n7.2.1 Diretrizes gerais\nPara revisar um pacote, comece copiando o nosso modelo de revisão e use ele como uma lista de verificações que precisam ser feitas. Além de marcar os critérios mínimos, pedimos que você forneça comentários gerais abordando o seguinte:\n\nO pacote está de acordo com os requisitos do Guia de pacotes da rOpenSci?\nHá melhorias que poderiam ser feitas no estilo e nos padrões de código? Por exemplo, as funções precisam ser divididas em funções auxiliares menores e o papel de cada função auxiliar está claro?\nHá duplicação de código no pacote que deveria ser reduzida?\nExistem funções no R básico ou na dependência leve que fornecem a mesma interface que algumas funções auxiliares no pacote?\nHá melhorias na interface do usuário que poderiam ser feitas?\nExistem melhorias de desempenho que podem ser feitas?\nA documentação (instruções de instalação, vignettes, exemplos e demonstrações) é clara e suficiente? O princípio de vários pontos de entrada está sendo usado? Ou seja, a documentação leva em conta o fato de que qualquer parte da documentação pode ser o primeiro encontro do usuário com o pacote e/ou com as ferramentas e os dados que ele contém?\nAs funções e os argumentos foram nomeados para trabalharem juntos e formarem uma API de programação comum e lógica que seja fácil de ler e de autocompletar?\nSe você tiver seus próprios dados/problemas relevantes, analise-os com o pacote. Você pode acabar encontrando casos de uso extremos nos quais o autor não pensou.\n\nSeja respeitoso e gentil com os(as) autores(as) em suas avaliações. Nosso código de conduta é obrigatório para todos os envolvidos em nosso processo de avaliação. Esperamos que você envie sua avaliação em até 3 (três) semanas, de acordo com o prazo estabelecido pelo(a) editor(a). Entre em contato com o(a) editor(a) diretamente ou no tópico de envio para informá-lo sobre possíveis atrasos.\nIncentivamos você a usar ferramentas automatizadas para facilitar a revisão. Isso inclui:\n\nVerificar o relatório inicial do pacote gerado pelo nosso @ropensci-review-bot.\nVerificar os registros (logs) nos serviços de integração contínua utilizados pelo pacote (GitHub Actions, Codecov, etc.)\nExecutar devtools::check() e devtools::test() no pacote para localizar quaisquer erros que possam ter passado despercebidos pelo(a) autor(a).\nVerificar se a omissão de testes é justificada (e.g., o uso de skip_on_cran() em testes que fazem solicitações reais de API vs. ignorar todos os testes em um sistema operacional).\nSe o pacote não for enviado por meio da branch padrão/principal, lembre-se de mudar para a branch de revisão que foi submetida antes de iniciar sua revisão. Nesse caso, você também terá que pesquisar o pacote localmente, dado que a pesquisa no GitHub é limitada à branch padrão. Além disso, documentações hospedadas em um website tipo pkgdown não são necessariamente atualizadas, por isso recomendamos que você inspecione a documentação do pacote localmente, executando pkgdown::build_site().\n\nOs(as) revisores(as) também podem gerar novamente os resultados da verificação de pacotes a partir de @ropensci-review-bot a qualquer momento, emitindo um único comentário em um issue de revisão: @ropensci-review-bot check package.\nAlguns elementos de nossa lista de verificação são inspirados no [guia de revisão de código da Mozilla] (https://mozillascience.github.io/codeReview/review.html).\n\n\n7.2.2 Interações feitas fora dos canais oficiais\nSe você interagiu com os(as) autores(as) do pacote e falou sobre a revisão fora de um tópico de revisão (como em chats, mensagens diretas, pessoalmente ou issues no repositório do projeto), certifique-se de que sua revisão capture e/ou referencie elementos dessas conversas que sejam relevantes para o processo.\n\n\n7.2.3 Experiências de revisores(as) anteriores\nRevisores(as) iniciantes podem achar útil ler sobre algumas revisões anteriores. Em geral, você pode encontrar os tópicos de envio de pacotes que já foram integrados. Aqui, estão alguns exemplos de revisões (observe que suas revisões não precisam ser tão longas quanto esses exemplos):\n\nrevisão 1 e revisão 2 de rtika\nNLMR revisão 1 e revisão2\nbowerbird comentário pré-revisão, revisão 1, revisão 2.\nrusda revisão (de antes de termos um modelo de revisão)\n\nVocê pode ler algumas publicações escritas por avaliadores(as) sobre as suas experiências através deste link. Em especial, nesta postagem de Mara Averick, você pode ler sobre o papel de “usuário ingênuo” que um(a) revisor(a) pode assumir para fornecer um feedback útil, mesmo sem ser especialista no tópico ou na implementação do pacote, ao se perguntar: “O que eu achava que seria feito? Realmente, faz isso? Quais são os detalhes que me assustam?”. Em outra postagem, Verena Haunschmid compartilha sua experiência de alternar entre usar o pacote e revisar seu código.\nO ex-revisor e autor de pacotes Adam Sparks escreveu o seguinte “[escreva] uma boa crítica da estrutura do pacote e das práticas recomendadas de codificação. Se você souber como fazer algo melhor, diga-me. É fácil perder oportunidades de documentação como desenvolvedor(a); porém, como revisor(a), você tem uma visão diferente. Você é um usuário que pode dar um feedback. O que não está claro no pacote? Como você poderia deixar isso mais claro? Se você estiver usando-o pela primeira vez, é fácil? Você conhece algum outro pacote R que talvez eu devesse usar? Ou há algum que eu esteja usando e que talvez não devesse usar? Se você puder contribuir com o pacote, então contribua.”\n\n\n7.2.4 Pacote de ajuda para revisores\nSe estiver trabalhando no RStudio, você pode otimizar o fluxo de trabalho de revisão usando o pacote pkgreviewr, criado pela editora associada Anna Krystalli. Digamos que você tenha aceitado revisar o pacote refnet, então você escreveria o seguinte:\nremotes::install_github(\"ropensci-org/pkgreviewr\")\nlibrary(pkgreviewr)\npkgreview_create(pkg_repo = \"embruna/refnet\", \n                 review_parent = \"~/Documents/workflows/rOpenSci/reviews/\")\nComo resultado:\n\no repositório do GitHub do pacote refnet será clonado.\num projeto de revisão será criado, contendo um bloco de notas para você preencher, já usando o modelo de revisão recomendado.\nobserve que, se o pacote não for enviado por meio da branch padrão/principal, você precisará mudar para a branch enviada antes de iniciar a revisão.\n\n\n\n7.2.5 Comentários sobre o processo\nIncentivamos você a fazer perguntas e fornecer feedbacks sobre o processo de revisão em nosso fórum.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Guia para revisores</span>"
    ]
  },
  {
    "objectID": "softwarereview_reviewer.pt.html#submitreview",
    "href": "softwarereview_reviewer.pt.html#submitreview",
    "title": "7  Guia para revisores",
    "section": "7.3 Envio da revisão",
    "text": "7.3 Envio da revisão\n\nQuando sua revisão estiver concluída, cole-a como um comentário na issue onde a revisão do pacote está sendo feita/tratada.\nComentários adicionais são bem-vindos na mesma issue. Esperamos que as revisões de pacotes funcionem como uma conversa contínua com os(as) autores(as), em vez de uma única rodada de revisões típica de manuscritos acadêmicos.\nVocê também pode enviar issues ou Pull Requests diretamente para o repositório dos pacotes, se preferir, mas, se o fizer, comente sobre eles e coloque um link para eles dentro do tópico onde a revisão do pacote está sendo tratada, para que tenhamos um registro centralizado da sua revisão.\nInclua uma estimativa de quantas horas você gastou na revisão.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Guia para revisores</span>"
    ]
  },
  {
    "objectID": "softwarereview_reviewer.pt.html#followupreviewer",
    "href": "softwarereview_reviewer.pt.html#followupreviewer",
    "title": "7  Guia para revisores",
    "section": "7.4 Acompanhamento da revisão",
    "text": "7.4 Acompanhamento da revisão\nOs(as) autores(as) devem responder dentro de 2 (duas) semanas com as alterações feitas no pacote em resposta à sua avaliação. Nesse estágio, pedimos que você avalie se as alterações são suficientes para resolver as questões levantadas em sua revisão. Incentivamos a discussão contínua entre autores(as) de pacotes e revisores(as), e você também pode pedir aos editores que esclareçam os problemas no tópico de revisão.\nVocê usará o modelo de aprovação.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Guia para revisores</span>"
    ]
  },
  {
    "objectID": "softwarereview_editor.pt.html",
    "href": "softwarereview_editor.pt.html",
    "title": "8  Guia para Editores",
    "section": "",
    "text": "8.1 Responsabilidades dos editores",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Guia para Editores</span>"
    ]
  },
  {
    "objectID": "softwarereview_editor.pt.html#editors-responsibilities",
    "href": "softwarereview_editor.pt.html#editors-responsibilities",
    "title": "8  Guia para Editores",
    "section": "",
    "text": "Além de lidar com pacotes (cerca de 4 por ano), editores participam das decisões editoriais do grupo, como, por exemplo, se um pacote está dentro do escopo e determinam atualizações em nossas políticas. Geralmente, fazemos isso por meio do Slack, que esperamos que os editores possam verificar regularmente.\nTambém fazemos um rodízio de responsabilidades do Editor-Chefe (decisões de escopo de primeira instância e designação de editores) entre a diretoria trimestralmente.\nVocê não precisa acompanhar outras submissões, mas se notar um problema com um pacote que está sendo tratado por outro editor, sinta-se à vontade para levantar esse problema diretamente com o outro editor ou publicar sua observação no canal de editores no Slack. Exemplos:\n\nVocê sabe de um pacote que já resolve as mesmas dores/desafios de outro(s) pacote(s), que ainda não foi mencionado no processo.\nVocê vê uma pergunta para a qual uma resposta especializada não foi dada depois de alguns dias (e.g., você sabe de uma publicação num blog que aborda como adicionar imagens a documentação de pacotes).\nPreocupações relacionadas à velocidade do processo devem ser tratadas pelo Editor-Chefe, portanto, é a ele que você recorreria para tais perguntas.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Guia para Editores</span>"
    ]
  },
  {
    "objectID": "softwarereview_editor.pt.html#editorchecklist",
    "href": "softwarereview_editor.pt.html#editorchecklist",
    "title": "8  Guia para Editores",
    "section": "8.2 Como lidar com a lista de verificação do editor",
    "text": "8.2 Como lidar com a lista de verificação do editor\n\n8.2.1 No momento do envio:\n\nSe você for o EiC ou o primeiro editor a responder, designe um editor com um comentário @ropensci-review-bot assign @username as editor. Isso também adicionará a tag 1/editor-checks ao problema da edição (issue).\nPara submissões estatísticas (identificadas como “Submission Type: Stats” no modelo da issue), adicione o rótulo “stats” à edição.\nUma submissão gerará automaticamente um relatório de verificação de pacote do ropensci-review-bot, que deve ser examinado para identificar se há problemas pendentes (a maioria das exceções deverá ser justificada pelo autor no contexto específico do seu pacote). Se você quiser executar novamente as verificações após qualquer alteração no pacote, poste o comentário @ropensci-review-bot check package.\nO sistema de verificação é reconstruído todas terças-feiras às 00:01 UTC, podendo levar algumas horas. Se verificações automáticas falharem nesse horário, aguarde algumas horas e tente novamente.\nDepois que as verificações automáticas forem lançadas, use o modelo de editor para orientar as verificações iniciais e registrar sua resposta a submissão. Você também pode simplificar suas verificações de editor usando a função pkgreviewr pacote criado pela editora associada Anna Krystalli. Por favor, tente concluir as verificações e começe a procurar revisores dentro de 5 dias úteis.\nVerifique se o modelo foi preenchido corretamente.\nVerifique as políticas em busca de possíveis ajustes e sobreposições. Se necessário, inicie uma discussão por meio do canal #software-review do Slack para casos extremos que não tenham sido detectados por verificações anteriores do EiC. Se houver rejeições, consulte esta seção sobre como responder.\nVerifique se as partes obrigatórias do modelo estão completas. Caso contrário, oriente os autores para as instruções apropriadas.\nPara pacotes que precisam de integração contínua em várias plataformas (cf critérios nesta seção do capítulo sobre CI), certifique-se de que o pacote seja testado em várias plataformas (tendo o pacote criado em vários sistemas operacionais por meio do GitHub Actions, por exemplo).\nSempre que possível, ao solicitar alterações, direcione os autores para ferramentas automáticas, como usethis, Air e styler e para recursos online (seções deste guia, seções do livro de pacotes do R) para facilitar o uso de seus comentários. Exemplo de verificações de editor.\nO ideal é que você faça observações e estas sejam resolvidas antes que revisores comecem a revisar.\nSe as verificações iniciais mostrarem grandes lacunas, solicite alterações antes de designar os revisores. Se o autor mencionar que as alterações podem levar tempo, aplique o rótulo de retenção digitando @ropensci-review-bot put on hold. Você receberá um lembrete a cada 90 dias (na issue) para verificar com o(s) autor(es) do pacote.\nSe o pacote levantar um novo problema para a política de uso da rOpenSci, inicie uma conversa no Slack ou abra uma discussão na seção fórum da rOpenSci para discutí-lo com outros editores (exemplo de discussão de política).\n\n\n\n8.2.2 Procure e designe dois revisores:\n\n8.2.2.1 Tarefas\n\nComente com @ropensci-review-bot seeking reviewers.\nUse o modelo de e-mail se necessário, para convidar revisores. Ao convidar revisores, inclua algo como “se eu não tiver notícias suas em uma semana, presumirei que você não poderá fazer uma revisão”, para dar um prazo claro no qual você irá procurar outra pessoa.\nDesigne revisores com @ropensci-review-bot assign @username as reviewer. Em vez de assign, add também pode ser usado, assim como to reviewers (plural) em vez de as reviewer (singular). Portanto, o seguinte também é válido: @ropensci-review-bot add @username to reviewers. Um comando deve ser emitido para cada revisor. Se necessário posteriormente, remova revisores com @ropensci-review-bot remove @username from reviewers.\nSe você quiser alterar a data de vencimento de uma revisão, use @ropensci-review-bot set due date for @username to YYYY-MM-DD.\n\n\n\n8.2.2.2 Como procurar revisores\n\n8.2.2.2.1 Onde procurar revisores?\nComo editor (convidado), use\n\nas possíveis sugestões feitas por quem envia submissões, (embora estes possam ter uma visão limitada dos tipos de especialização necessários; sugerimos que você não use mais de um dos revisores sugeridos).\no banco de dados Airtable de revisores e voluntários (consulte a próxima subseção).\ne os autores de pacotes rOpenSci.\n\nQuando essas fontes de informação não forem suficientes,\n\npeça ideias a outros editores no Slack.\nprocure usuários do pacote ou da fonte de dados/serviço de upstream ao qual o pacote se conecta (por meio das issues abertas no repositório, marcando-o com uma estrela, citando-o em artigos, falando sobre ele na plataforma X).\nVocê também pode procurar por autores de pacotes relacionados em r-pkg.org.\nR-Ladies tem um diretório especificando as habilidades e os interesses das pessoas listadas.\nVocê pode publicar uma solicitação de revisores nos canais #general e/ou #software-review no Slack da rOpenSci ou nas mídias sociais.\n\n\n\n8.2.2.2.2 Dicas para a pesquisa de revisores no Airtable\nVocê pode usar filtros, classificações e pesquisas para identificar revisores com experiência específica:\n\n\n\nCaptura de tela da interface em inglês de filtros do Airtable com um filtro de experiência de domínio que deve incluir química e áreas técnicas que devem incluir integração contínua\n\n\nPor favor, verifique a avaliação mais recente do revisor(a) e evite qualquer pessoa que tenha avaliado alguém nos últimos seis meses. Além disso, verifique se um revisor(a) iniciante indicou que precisou de mentoria (require_mentorship). Nestes casos, use a parte de orientação do modelo de e-mail e esteja preparado para fornecer orientações adicionais.\n\n\n8.2.2.2.3 Critérios para escolher um revisor\nAqui estão os critérios que você deve ter em mente ao escolher um revisor. Talvez você precise reunir essas informações pesquisando no CRAN e na página do GitHub do possível revisor e em sua presença online em geral (site pessoal, X).\n\nRevisou um pacote para nós nos últimos 6 meses.\nTem alguma experiência em desenvolvimento de pacotes.\nTem alguma experiência de domínio no campo do pacote ou da fonte de dados.\nNão tem conflitos de interesse.\nTente equilibrar sua percepção da experiência do possível revisor com a complexidade do pacote.\nDiversidade - com dois revisores, ambos não devem ser homens brancos cis.\nHá evidências de que o possível revisor esteja aberto a opiniões e interessado em atividades da comunidade de R, embora não tenha problema em enviar e-mails frios.\n\nCada submissão deve ser revisada por dois revisores de pacotes. Embora seja aceitável que um deles tenha menos experiência em desenvolvimento de pacotes e mais conhecimento do domínio, a revisão não deve ser dividida em dois. Ambos os revisores precisam revisar o pacote de forma abrangente, embora sob suas perspectivas específicas. Em geral, pelo menos um revisor deve ter experiência prévia em revisão e, é claro, convidar um novo revisor amplia nosso grupo de revisores.\n\n\n\n\n8.2.3 Durante a revisão:\n\nVerifique ocasionalmente com os revisores e autores. Ofereça esclarecimentos e ajuda conforme necessário.\nEm geral, procure calcular 3 semanas para uma revisão, 2 semanas para as alterações subsequentes e 1 semana para a aprovação das alterações pelo revisor.\nApós o envio de cada revisão,\n\nEscreva um comentário agradecendo ao revisor;\nRegistre a revisão digitando um novo comentário @ropensci-review-bot submit review &lt;review-url&gt; time &lt;time in hours&gt;. Por exemplo, para a revisão https://github.com/ropensci/software-review/issues/329#issuecomment-809783937 o comentário seria @ropensci-review-bot submit review https://github.com/ropensci/software-review/issues/329#issuecomment-809783937 time 4.\n\nQuando as alterações forem feitas, altere a tag de status da revisão para 5/awaiting-reviewer-response e solicite que os revisores indiquem a aprovação usando o modelo de aprovação do revisor.\nSe as pessoas autoras tiverem a intenção de enviar um manuscrito de acompanhamento do tipo Applications no periódico Methods in Ecology and Evolution, indique que o envio do manuscrito pode ser feito após a conclusão da revisão.\n\n\n8.2.3.1 Desafios durante a revisão\n\nSe o(a) autor(a) parar de responder consulte as políticas e/ou envie uma mensagem para a equipe de editores(as) no canal do Slack para discussão. É importante ressaltar que, se uma pessoa for atribuída como revisora a uma Issue fechada, entre em contato com ela ao fechar a Issue para explicar a decisão e agradeça mais uma vez pelo trabalho. Informe as outras pessoas editoras no canal Slack para que elas (revisoras) sejam consideradas para um pacote no futuro, com grandes chances de uma revisão de software tranquila (por exemplo, um(a) autor(a) de pacote que já tenha enviado pacotes para nós).\nSe um(a) revisor(a) estiver atrasado(a) na revisão ou parar de responder envie um lembrete após uma semana e novamente após duas semanas. O primeiro lembrete pode ser um @tag no GitHub. Depois disso, use o e-mail ou outra forma de comunicação direta. Se depois de três semanas você ainda não tiver recebido resposta, determine a melhor maneira de seguir em frente sem o(a) revisor(a):\n\nSe o(a) revisor(a) já tiver enviado sua primeira revisão e outro(a) revisor(a) estiver ativo(a) e fornecendo feedback substancial, o(a) editor(a) poderá prosseguir com o processo de revisão e deverá assumir a função do(a) revisor(a) ausente para determinar se as alterações dos(as) autores(as) são suficientes.\nSe o(a) revisor(a) ausente não tiver enviado sua revisão, o(a) editor(a) deve tentar encontrar uma nova pessoa revisora e prosseguir com o processo de revisão assim que duas revisões forem recebidas. Nesse ponto, o(a) editor(a) deve priorizar a busca de revisores(as) experientes que possam se comprometer com uma resposta rápida. Não se esqueça de enviar mensagens para outros(as) editores(as) no Slack.\n\nA seu critério, o(a) editor(a) pode optar por atuar como segundo(a) revisor(a), mas só deve fazê-lo após várias tentativas fracassadas de encontrar um(a) novo(a) revisor(a) e se o(a) editor(a) tiver experiência suficiente para isso. Não recomendamos que os(as) editores façam isso com frequência, pois isso aumenta a carga de trabalho e reduz a diversidade de pontos de vista trazidos à comunidade pelos(as) revisores(as).\nEm qualquer caso, faça um comentário agradecendo ao revisor(a) original e remova-o(a) com @ropensci-review-bot remove @username from reviewers.\n\n\n\n\n\n\n8.2.4 Após a revisão:\n\n@ropensci-review-bot approve &lt;package-name&gt;.\nSe o proprietário original do repositório se opuser à transferência, adicione uma linha com seu endereço para esta lista de repositórios para garantir que o pacote seja incluído no registro de pacotes da rOpenSci.\nIndique um pacote para ser apresentado em uma postagem de blog ou nota técnica da rOpenSci se você achar que ele pode ser de grande interesse. Observe na edição de revisão do software uma ou duas coisas que o autor poderia destacar e marque @ropensci/blog-editors para que você possa dar acompanhamento.\nSe os autores mantiverem um gitbook que seja, pelo menos em parte, sobre seu pacote, entre em contato com um membro da equipe da rOpenSci para que este possa falar com os autores sobre a questão de transferência para a organização ropensci-books no GitHub. #### Pacotes que permanecem nas organizações originais do GitHub\n\nPara autores de pacotes que desejam manter seus repositórios em suas organizações originais do GitHub, em vez de transferi-los para github.com/ropensci, os editores devem:\n\nPedir aos autores de pacotes que façam um pull request para o arquivo JSON que lista todos os repositórios que não foram transferidos. Exemplo de commit.\nPedir aos autores do pacote que substituam o conteúdo do código de conduta atual do repositório pelo conteúdo do código de conduta padrão da organização rOpenSci no GitHub.\n\n\n\n8.2.5 Promoção de pacotes:\n\nDirecione o(a) autor(a) para os capítulos do guia sobre lançamento de pacotes, marketing e como melhorar a performance no GitHub.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Guia para Editores</span>"
    ]
  },
  {
    "objectID": "softwarereview_editor.pt.html#eicchecklist",
    "href": "softwarereview_editor.pt.html#eicchecklist",
    "title": "8  Guia para Editores",
    "section": "8.3 Responsabilidades do EiC",
    "text": "8.3 Responsabilidades do EiC\nO EiC atua por 3 meses ou por um período combinado por todos os membros do conselho editorial. O EiC tem o direito de tomar decisões sobre escopo e sobreposição da forma mais independente possível (mas ainda pode solicitar ajuda/conselho). Em detalhe, o EiC desempenha as seguintes funções\n\nObserva todas as issues postadas no repositório de revisão do software (tanto assina as notificações do repositório no GitHub ou observa o canal #software-peer-review-feed no Slack).\nDeve marcar toda nova submissão completa com 0/editorial-team-prep\nRequere @ropensci-review-bot check srr sobre solicitações de pré-submissão de software estatístico. Veja o capítulo do Stats Dev Guide, para mais detalhes.\nAtribui submissões de pacotes a outros editores, inclusive a si mesmo, para que cuidem delas. Na maioria das vezes, isso é uma forma de rodízio entre os editores, a menos que o EiC considere que um editor seja particularmente adequado para um pacote ou que um editor se recuse a lidar com a submissão por estar muito ocupado ou por causa de conflito de interesse. Para isso, use\n@ropensci-review-bot assign @username as editor\nMonitora regularmente (por exemplo, semanalmente) o ritmo do processo de revisão graças ao devguider e lembra outros editores de mover os pacotes conforme necessário.\nAo assumir a rotação do EiC, revisa o status das revisões abertas atuais graças ao devguider e lembra os editores de responderem ou atualizarem o status conforme necessário.\nResponde a issues postadas no repositório software-review-meta.\nToma decisões sobre escopo/sobreposição para consultas de pré-submissão, referências do JOSS ou de outros parceiros de publicação e submissões, se encontrar um caso ambíguo (este último caso também pode ser feito por editores em ação, veja abaixo). Para iniciar discussão, isso é postado no canal exclusivo para editores do Slack da rOpenSci, juntamente com um pequeno resumo do que se trata a submissão (pré-)submetida/referida, quais dúvidas o EiC tem, ou seja, digerindo um pouco as informações. Se, depois de um ou dois dias, o EiC achar que não recebeu respostas suficientes, ele poderá fazer um ping em todos os editores.\n\nQualquer editor deve se sentir à vontade para intervir nesses casos. Veja esta seção sobre como responder a (pré-)subbmissões fora do escopo.\nDepois de explicar a decisão fora do escopo, escreva um comentário sobre a issue com @ropensci-review-bot out-of-scope.\n\nSolicite um novo EiC quando sua rotação terminar (defina um lembrete no calendário antes da data prevista para o término e peça voluntários no canal Slack dos editores)\n\n\n8.3.1 Usando devguider::devguide_eic_report()\nInstale o devguider e execute devguider::devguide_eic_report(). Abra o relatório HTML em um navegador.\n\nExamine as submissões em “presubmission” (pré-submissão) e “editorial-team-prep” (preparação da equipe editorial). Verifique se alguma ação precisa ser tomada (sondar editores, tomar uma decisão, colocar a issue em espera, enviar um ping a pessoa que submeteu a proposta para uma atualização, encontrar e designar um editor).\nAs linhas em cada seção são coloridas por nível de “urgência”, de branco (ignorar) a amarelo (não urgente) e vermelho (mais urgente).\nExamine as submissões em “seeking-reviewer(s)”. Se a busca de avaliadores estiver sendo realizada há muito tempo (cor vermelha), verifique se a submissão está em espera, leia o tópico para obter o contexto e entre em contato com o editor em particular para solicitar mais informações/se a submissão passou despercebida.\nExamine as submissões em “reviewer(s)-assigne”. Se ainda faltarem revisões após um período de tempo excepcionalmente longo (cor vermelha), verifique se a submissão está em espera, leia o tópico para obter o contexto e entre em contato com o editor em particular para solicitar mais informações/se a submissão foi ignorada.\nExamine as submissões em “review(s)-in-awaiting-changes”. Se algumas ainda não tiverem uma resposta do autor após um tempo excepcionalmente longo (cor vermelha), verifique se a submissão está em espera, leia o tópico e entre em contato com o editor em particular para pedir mais informações/se a submissão foi ignorada.\n\n\n\n8.3.2 Solicitando mais detalhes\nEm alguns casos, a documentação online é escassa. LEIAME simplificado e ausência de um site pkgdown dificultam a avaliação. Nesse caso, solicite mais detalhes; mesmo que o pacote seja considerado fora do escopo, a documentação do pacote terá melhorado, portanto, não há problema em adotar esses esforços.\nExemplo de texto\nOlá &lt;usuário&gt; e muito obrigado por sua submissão.\n\nEstamos discutindo se o pacote está dentro do escopo e precisamos de um pouco mais de informações.\n\nVocê se importaria de acrescentar mais detalhes e contexto ao LEIAME? Depois de lê-lo, alguém com pouco conhecimento do domínio deve ter sido informado sobre o objetivo, as metas e a funcionalidade do pacote.\n\n&lt;opcional&gt;\nSe um pacote tiver sobreposição de funcionalidade com outros pacotes, exigimos que ele seja demonstrado na documentação [como é o melhor da categoria](https://devguide.ropensci.org/policies.html#overlap). Você poderia adicionar uma comparação mais detalhada com os pacotes que mencionou no LEIAME para que possamos avaliar?\n&lt;/opcional&gt;\n\n\n8.3.3 Convidando um editor convidado\nDepois de discutir com outros editores, o EiC pode convidar um editor convidado para lidar com uma submissão (e.g., se o volume de submissões for grande, se todos os editores tiverem um conflito de interesses, se conhecimento específico for necessário ou como um teste antes de convidar uma pessoa para fazer parte do conselho editorial).\nQuando você convidar um editor convidado,\n\nPergunte sobre conflitos de interesse usando a mesma formulação usada para os revisores.\nForneça o link para o guia para editores.\n\nSe a pessoa disser sim (eba!),\n\nCertifique-se de que ela habilitou a autenticação 2FA em sua conta do GitHub.\nConvide-a para a equipe ropensci/editors e para a organização rOpenSci.\nDepois que ela aceitar o convite do repositório, atribua a issue a ela.\nCertifique-se de que ela (já) esteja convidada para o espaço de trabalho do Slack da rOpenSci.\nAdicione o nome dela a tabela de editores convidados do Airtable (para que seu nome possa aparecer neste livro e no LEIAME da revisão de software).\n\nDepois que o processo de revisão for concluído (pacote aprovado, issue fechada),\n\nAgradeça novamente ao editor convidado.\nRemova-o da equipe ropensci/editors (mas não da organização rOpenSci).",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Guia para Editores</span>"
    ]
  },
  {
    "objectID": "softwarereview_editor.pt.html#outofscoperesponse",
    "href": "softwarereview_editor.pt.html#outofscoperesponse",
    "title": "8  Guia para Editores",
    "section": "8.4 Respondendo a submissões fora do escopo",
    "text": "8.4 Respondendo a submissões fora do escopo\nAgradeça aos autores pela submissão, explique os motivos da decisão e direcione-os a outros locais de publicação, se relevante, e ao fórum de discussão rOpenSci. Use sugestões de texto de Objetivos e escopo especialmente em relação à evolução do escopo ao longo do tempo e à sobreposição e às diferenças entre o desenvolvimento da unconf/staff/software-review.\nExemplos de submissões e respostas fora do escopo.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Guia para Editores</span>"
    ]
  },
  {
    "objectID": "softwarereview_editor.pt.html#reviewersupport",
    "href": "softwarereview_editor.pt.html#reviewersupport",
    "title": "8  Guia para Editores",
    "section": "8.5 Respondendo às perguntas dos revisores",
    "text": "8.5 Respondendo às perguntas dos revisores\nRevisores podem pedir feedback sobre, por exemplo, o tom de suas avaliações. Além de indicar as orientações gerais deste guia, você pode fazer perguntas aos editores ou abrir issues quando essa orientação estiver faltando. Aqui seguem alguns exemplos de avaliação que podem ser úteis.\n\nExemplo difícil, porém construtivo: a parte desta revisão que sugere uma re-estruturação da vinheta: ropensci/software-review#191 (comentário).\no pacote slopes que acabou sendo fundamentalmente redesenhado em resposta a revisões. Todas as revisões/revisores foram sempre totalmente construtivos, o que parece ter desempenhado um papel importante na motivação dos autores para embarcar numa grande reformulação. Comentários como, “este pacote não …” ou “não tem …” foram seguidos de sugestões construtivas sobre o que poderia ser feito (há, por exemplo, vários casos em uma das primeiras revisões).\nAs três avaliações expressaram educadamente suas reservas: https://github.com/ropensci/software-review/issues/305#issuecomment-504762517 e https://github.com/ropensci/software-review/issues/305#issuecomment-508271766.\nbowerbird útil “pré-revisão” que resultou em uma divisão do pacote antes das revisões efetivas.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Guia para Editores</span>"
    ]
  },
  {
    "objectID": "softwarereview_editor.pt.html#bookrelease",
    "href": "softwarereview_editor.pt.html#bookrelease",
    "title": "8  Guia para Editores",
    "section": "8.6 Gerenciando o lançamento de um guia de desenvolvimento",
    "text": "8.6 Gerenciando o lançamento de um guia de desenvolvimento\nSe você estiver encarregado de gerenciar uma versão do livro que está lendo, use o guia de lançamento de livros como um modelo de issue a ser publicado no rastreador de problemas do guia de desenvolvimento. Não hesite em fazer perguntas a outros editores.\n\n8.6.1 Governança do guia de desenvolvimento\nPara alterações muito pequenas no guia de desenvolvimento, não é necessária fazer revisão de pull request (PR). Para alterações maiores, solicite a revisão de pelo menos alguns editores (se nenhum deles participou da discussão relacionada à alteração, solicite uma revisão de todos eles no GitHub e, na ausência de qualquer reação, faça o merge após 1 semana).\nDuas semanas antes do lançamento de um guia de desenvolvimento, uma vez que o PR do dev para o master e a postagem do blog de lançamento estiverem prontos para revisão, todos os editores devem receber um ping no GitHub (“solicitação de revisão” no PR de dev para master) e do Slack, mas o lançamento não precisa que todos eles aprovem explicitamente o lançamento.\n\n\n8.6.2 Postagem no blog sobre um lançamento\nA postagem no blog sobre um lançamento será revisada por editores e um dos @ropensci/blog-editors.\n\n8.6.2.1 Conteúdo\nConsulte a orientação geral sobre blogs da rOpenSci e as orientações mais específicas abaixo.\nPrimeiro exemplo de uma postagem desse tipo; segundo exemplo.\nA postagem no blog deve mencionar todos os itens importantes do changelog, organizados em (sub)seções: e.g., uma seção sobre uma grande mudança A, outra sobre uma grande mudança B e uma sobre as mudanças menores agrupadas. Mencione as alterações mais importantes primeiro.\nPara cada alteração feita por um colaborador externo, agradeça-o explicitamente usando as informações do changelog. Por exemplo, [Matt Fidler](https://github.com/mattfidler/) modificou nossa seção sobre mensagens de console [ropensci/dev_guide#178](https://github.com/ropensci/dev_guide/pull/178).\nNo final da postagem, mencione as próximas alterações vinculando-as a problemas abertos no rastreador de problemas e convide os leitores a contribuir com o guia de desenvolvimento abrindo issues e participando de discussões abertas. Modelo de conclusão:\nNesta postagem, resumimos as alterações incorporadas em nosso livro [“rOpenSci Packages: Development, Maintenance, and Peer Review”] (https://devguide.ropensci.org/) nos últimos X meses. \n\nSomos gratos por todas as contribuições que tornaram possível esse lançamento. \n\nJá estamos trabalhando em atualizações para a nossa próxima versão, como _issue1_, _issue2_. \n\nConfira o [issue tracker] (https://github.com/ropensci/dev_guide/issues/) se você quiser contribuir.\n\n\n8.6.2.2 Autoria\nO editor que está escrevendo a postagem é o primeiro autor, os outros editores estão listados em ordem alfabética.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Guia para Editores</span>"
    ]
  },
  {
    "objectID": "softwarereview_editor_management.pt.html",
    "href": "softwarereview_editor_management.pt.html",
    "title": "9  Gerenciamento editorial",
    "section": "",
    "text": "9.1 Recrutamento de novos editores\nO recrutamento de novos editores e a manutenção de um conselho editorial suficiente e equilibrado é responsabilidade da Líder de Revisão de Software com o apoio e a orientação do conselho editorial.\nEtapas:",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Gerenciamento editorial</span>"
    ]
  },
  {
    "objectID": "softwarereview_editor_management.pt.html#recruiting-new-editors",
    "href": "softwarereview_editor_management.pt.html#recruiting-new-editors",
    "title": "9  Gerenciamento editorial",
    "section": "",
    "text": "Inicie um canal privado para discussão (para que você não tenha um histórico no canal de editores no qual futuros editores entrarão, o que pode ser incômodo).\nMarque os editores na conversa para garantir que eles recebam uma notificação, pois este é um tópico importante.\nEspere que a maioria dos editores se manifeste antes de convidar alguém. Dê a eles uma semana para responder.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Gerenciamento editorial</span>"
    ]
  },
  {
    "objectID": "softwarereview_editor_management.pt.html#inviting-a-new-editor",
    "href": "softwarereview_editor_management.pt.html#inviting-a-new-editor",
    "title": "9  Gerenciamento editorial",
    "section": "9.2 Convidando um(a) novo(a) editor(a)",
    "text": "9.2 Convidando um(a) novo(a) editor(a)\n\nUm(a) candidato(a) pode começar como um(a) editor(a) convidado(a). Ao convidá-lo como um(a) editor(a) convidado(a), convide-o da mesma forma que você convidaria um(a) editor(a) convidado(a) por outros motivos.\nSe um(a) candidato(a) começar como um(a) editor(a) convidado(a), avalie como foi o processo após a submissão. Peça novamente a opinião de outros editores.\nEnvie um e-mail.\n\nGostaríamos de convidá-lo a fazer parte do conselho editorial da rOpenSci como membro efetivo. [RAZÕES ESPECÍFICAS PARA O CONVITE (MENCIONAR CONTRIBUIÇÕES PARA A rOpenSci)].\nAcreditamos que você seria um excelente incremento à equipe.\n\n[SE FOR EDITOR CONVIDADO -&gt; Você está familiarizado(a) com a função do editor, pois já foi editor(a) convidado(a)]. Nosso objetivo é que os editores lidem com quatro pacotes por ano ([SE FOR EDITOR CONVIDADO -&gt; incluindo o pacote que você acabou de finalizar!]).\nPedimos que editores assumam um compromisso informal de servir por dois anos, reavaliando sua participação depois deste período.\nEm um curto prazo, qualquer editor pode se recusar a lidar com um pacote ou argumentar por exemplo “Estou muito ocupado e não posso lidar com um novo pacote por algumas semanas”.\n\nAlém de lidar com pacotes, os editores participam das decisões editoriais do grupo, como, por exemplo, se um pacote está dentro do escopo e determinando atualizações em nossas políticas. \nGeralmente, fazemos esse trabalho por meio do Slack, que esperamos que os editores possam verificar regularmente.\nTambém, fazemos chamadas com o conselho editorial anualmente.\nAdemais, alternamos as responsabilidades do editor-chefe (decisões de escopo de primeira instância e designação de editores) entre o conselho editorial a cada três meses.\nVocê terá a oportunidade de participar desse rodízio depois de fazer parte do conselho por algum tempo, geralmente isso significa pelo menos seis meses. \nAlguns de nós também assumem projetos maiores para aprimorar o processo de revisão por pares, porém isso é opcional.\n\nEsperamos que você faça parte do conselho!\nEste é um momento empolgante para a revisão por pares na rOpenSci.\n\nPor favor, reflita sobre a nossa oferta e faça perguntas se algo não estiver claro. Nos informe se você pode juntar-se a equipe rOpenSci.\n\nAtenciosamente,\n[EDITOR], em nome do Conselho Editorial da rOpenSci",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Gerenciamento editorial</span>"
    ]
  },
  {
    "objectID": "softwarereview_editor_management.pt.html#onboarding-a-new-editor",
    "href": "softwarereview_editor_management.pt.html#onboarding-a-new-editor",
    "title": "9  Gerenciamento editorial",
    "section": "9.3 Integrando um(a) novo(a) editor(a) ao time",
    "text": "9.3 Integrando um(a) novo(a) editor(a) ao time\n\nInforme o gerente da comunidade rOpenSci para que\n\nnovos editores sejam adicionados ao site da rOpenSci.\nVocê pode criar um novo post no blog da rOpenSci para introduzir os novos editores.\n\nSe eles ainda não fizeram este passo como editores convidados, solicite aos novos editores que ativem a autenticação de dois fatores (2FA) para o GitHub.\nConvide os novos editores para integrar a organização da rOpenSci no GitHub como membro da equipe de editores da rOpenSci e da equipe data-pkg-editors ou stats-board subequipe, conforme for apropriado. Isso dará a eles as permissões apropriadas e vai permitir que eles recebam notificações específicas da equipe.\nOs editores precisam acessar o banco de dados sobre revisão de software no AirTable (o link está na descrição do canal editors-only no Slack).\nOs editores precisam ter acesso ao canal privado de editores no espaço de trabalho do Slack da rOpenSci (e ao espaço de trabalho do Slack em geral, caso não o tenham feito anteriormente; nesse caso, peça ao gerente da comunidade da rOpenSci).\nPublique uma mensagem de boas-vindas aos novos editores no canal, marcando todos os editores na mensagem.\nNo espaço de trabalho do Slack, os novos editores precisam ser adicionados à “equipe de editores” para que sejam notificados também quando alguém marcar uma mensagem com @editors.\nAdicionar os nomes dos novos editores a/ao:\n\nlista de autores do Guia Dev\ncapítulo do Guia Dev que introduz a revisão de software (em dois locais neste arquivo, como editores e um pouco abaixo para removê-los da lista de revisores)\nsoftware-review README (em dois lugares nesse arquivo também)\n\n\nTanto o Guia Dev quanto o README são automaticamente renderizados por meio do processo de integração contínua.\n\nAdicione os novos editores à https://github.com/orgs/ropensci/teams/editors/members",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Gerenciamento editorial</span>"
    ]
  },
  {
    "objectID": "softwarereview_editor_management.pt.html#offboarding-an-editor",
    "href": "softwarereview_editor_management.pt.html#offboarding-an-editor",
    "title": "9  Gerenciamento editorial",
    "section": "9.4 Desvincular um(a) editor(a)",
    "text": "9.4 Desvincular um(a) editor(a)\n\nAgradeça o(a) editor(a) por seu trabalho!\nRemova este(a) editor(a) do canal reservado para editores, e também da “equipe de editores” do Slack.\nRemova este(a) editor(a) de https://github.com/orgs/ropensci/teams/editors/members e da subequipe.\nInforme o gerente da comunidade do rOpenSci ou outro membro da equipe para que este(a) editor(a) possa ser transferido(a) para a parte de ex-membros no site da rOpenSci.\nRemova o acesso deles ao espaço de trabalho do Airtable.\nRemovê-los do\n\ncapítulo do Guia Dev que apresenta a revisão de software (em dois locais neste arquivo, como editores e um pouco abaixo para removê-los da lista de revisores)\nsoftware-review README (em dois lugares nesse arquivo também) Tanto o Guia Dev quanto o README da revisão de software são automaticamente compilados por meio do processo de integração contínua.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Gerenciamento editorial</span>"
    ]
  },
  {
    "objectID": "softwarereview_editor_management.pt.html#vacation",
    "href": "softwarereview_editor_management.pt.html#vacation",
    "title": "9  Gerenciamento editorial",
    "section": "9.5 Colocando o sistema em pausa",
    "text": "9.5 Colocando o sistema em pausa\nSe você quiser colocar o sistema em uma pausa, por exemplo, durante as férias, antes de sair:\n\nAdicione uma mensagem de férias ao campo about dos templates de issues. Exemplo de PR.\nAdicione uma mensagem de férias à resposta de boas-vindas padrão do bot. Exemplo de PR.\n\nAo retomar as atividades:\n\nRemover a mensagem de férias dos templates de issues. Exemplo de PR.\nRemover a mensagem de férias da resposta de boas-vindas padrão do bot. Exemplo de commit.",
    "crumbs": [
      "Software Peer Review of Packages",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Gerenciamento editorial</span>"
    ]
  },
  {
    "objectID": "maintenance_cheatsheet.pt.html",
    "href": "maintenance_cheatsheet.pt.html",
    "title": "10  Folha de dicas de manutenção do pacote rOpenSci",
    "section": "",
    "text": "10.1 Você precisa de ajuda?\nSe você precisar de ajuda pontual (por exemplo, uma revisão de PR; ou alguma solução de problemas de CI), ou ajuda para procurar co-mantenedores ou um novo mantenedor, ou se precisar que retiremos seu pacote, envie-nos um ping no GitHub via @ropensci/admin ou envie um e-mail para você info@ropensci.org. Você também pode usar nosso canal de manutenção de pacotes no Slack.\nNunca hesite em pedir ajuda.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Folha de dicas de manutenção do pacote rOpenSci</span>"
    ]
  },
  {
    "objectID": "maintenance_cheatsheet.pt.html#git-hub-repository-access",
    "href": "maintenance_cheatsheet.pt.html#git-hub-repository-access",
    "title": "10  Folha de dicas de manutenção do pacote rOpenSci",
    "section": "10.2 Acesso ao repositório do GitHub",
    "text": "10.2 Acesso ao repositório do GitHub\nVocê deve ter acesso administrativo ao repositório do GitHub do seu pacote. Se esse não for mais o caso (por exemplo, o processo automatizado falhou ou você perdeu o acesso depois de ter que desativar temporariamente a autenticação de dois fatores), entre em contato conosco via info@ropensci.org.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Folha de dicas de manutenção do pacote rOpenSci</span>"
    ]
  },
  {
    "objectID": "maintenance_cheatsheet.pt.html#other-git-hub-topics",
    "href": "maintenance_cheatsheet.pt.html#other-git-hub-topics",
    "title": "10  Folha de dicas de manutenção do pacote rOpenSci",
    "section": "10.3 Outros tópicos do GitHub",
    "text": "10.3 Outros tópicos do GitHub\nSe tiver alguma pergunta ou solicitação sobre o GitHub (por exemplo, adicionar um colaborador à organização do GitHub), você pode usar um canal público do espaço de trabalho slack do rOpenSci ou enviar um ping para @ropensci/admin no GitHub.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Folha de dicas de manutenção do pacote rOpenSci</span>"
    ]
  },
  {
    "objectID": "maintenance_cheatsheet.pt.html#pkgdown-documentation",
    "href": "maintenance_cheatsheet.pt.html#pkgdown-documentation",
    "title": "10  Folha de dicas de manutenção do pacote rOpenSci",
    "section": "10.4 Documentação do pkgdown",
    "text": "10.4 Documentação do pkgdown\nVeja Documentos do rOpenSci.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Folha de dicas de manutenção do pacote rOpenSci</span>"
    ]
  },
  {
    "objectID": "maintenance_cheatsheet.pt.html#access-to-ropensci-slack-workspace",
    "href": "maintenance_cheatsheet.pt.html#access-to-ropensci-slack-workspace",
    "title": "10  Folha de dicas de manutenção do pacote rOpenSci",
    "section": "10.5 Acesso ao espaço de trabalho do rOpenSci no Slack",
    "text": "10.5 Acesso ao espaço de trabalho do rOpenSci no Slack\nOs mantenedores e desenvolvedores de pacotes devem ter acesso a Slack do rOpenSci. Se você não recebeu o convite ou não o aceitou a tempo, ou se você quiser que um novo colaborador regular receba um convite, envie um e-mail para info@ropensci.org, indicando para qual endereço de e-mail você deseja receber o convite.\nVocê pode achar que o canal #package-maintenance é relevante para perguntas e respostas, bem como para uma comiseração amigável quando necessário.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Folha de dicas de manutenção do pacote rOpenSci</span>"
    ]
  },
  {
    "objectID": "maintenance_cheatsheet.pt.html#package-blog-posts",
    "href": "maintenance_cheatsheet.pt.html#package-blog-posts",
    "title": "10  Folha de dicas de manutenção do pacote rOpenSci",
    "section": "10.6 Publicações no blog sobre pacotes",
    "text": "10.6 Publicações no blog sobre pacotes\nConsulte nosso guia do blog.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Folha de dicas de manutenção do pacote rOpenSci</span>"
    ]
  },
  {
    "objectID": "maintenance_cheatsheet.pt.html#package-issues-promotion",
    "href": "maintenance_cheatsheet.pt.html#package-issues-promotion",
    "title": "10  Folha de dicas de manutenção do pacote rOpenSci",
    "section": "10.7 Promoção de problemas de pacotes",
    "text": "10.7 Promoção de problemas de pacotes\nRotular as edições com “procura-se ajuda” para obtê-las para que sejam transmitidos à comunidade.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Folha de dicas de manutenção do pacote rOpenSci</span>"
    ]
  },
  {
    "objectID": "maintenance_cheatsheet.pt.html#package-use-cases-promotion",
    "href": "maintenance_cheatsheet.pt.html#package-use-cases-promotion",
    "title": "10  Folha de dicas de manutenção do pacote rOpenSci",
    "section": "10.8 Promoção de casos de uso de pacotes",
    "text": "10.8 Promoção de casos de uso de pacotes\nVocê pode relatar casos de uso do seu pacote ou incentivar os usuários a relatá-los por meio do nosso fórum para obtê-los publicados em nosso site e em nosso boletim informativo.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Folha de dicas de manutenção do pacote rOpenSci</span>"
    ]
  },
  {
    "objectID": "maintenance_collaboration.pt.html",
    "href": "maintenance_collaboration.pt.html",
    "title": "11  Guia de colaboração",
    "section": "",
    "text": "11.1 Torne a contribuição e a colaboração do seu repositório amigáveis",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Guia de colaboração</span>"
    ]
  },
  {
    "objectID": "maintenance_collaboration.pt.html#friendlyfiles",
    "href": "maintenance_collaboration.pt.html#friendlyfiles",
    "title": "11  Guia de colaboração",
    "section": "",
    "text": "11.1.1 Código de conduta\nDepois que o seu pacote for listado na rOpenSci registry (a lista oficial de pacotes da rOpenSci), o Código de Conduta da rOpenSci será aplicado ao seu projeto. Você deve adicionar este texto ao README:\nPlease note that this package is released with a [Contributor\nCode of Conduct](https://ropensci.org/code-of-conduct/). \nBy\ncontributing to this project, you agree to abide by its terms.\nE\n\nSe o seu pacote foi transferido para a organização da rOpenSci no GitHub, exclua o código de conduta atual do repositório, se houver um, pois o código de conduta padrão da organização GitHub será exibido.\nSe o seu pacote não for transferido para a organização da rOpenSci no GitHub, substitua o conteúdo do código de conduta atual do repositório pelo conteúdo do [código de conduta padrão da organização rOpenSci no GitHub] (https://github.com/ropensci/.github/blob/main/CODE_OF_CONDUCT.md).\n\n\n\n11.1.2 Guia de contribuição\nVocê pode usar a issue, a solicitação de pull request e as diretrizes de contribuição. Ter um arquivo sobre contribuição como .github/CONTRIBUTING.md ou docs/CONTRIBUTING.md é obrigatório. Uma maneira fácil de inserir um modelo para um guia de contribuição é usar a função use_tidy_contributing() do pacote usethis que insere este modelo como .github/CONTRIBUTING.md. Um exemplo mais completo é este modelo de Peter Desmet ou as abrangentes páginas da wiki do pacote mlr3 no GitHub. Em geral, esses e outros modelos precisarão ser modificados para serem usados com um pacote da rOpenSci, principalmente por meio de referências e links para o nosso Código de Conduta conforme descrito em um outro lugar neste livro. Modificar um guia de contribuição genérico para adicionar um toque pessoal também tende a fazer com que ele pareça menos genérico e mais sincero. As preferências pessoais em um guia de contribuição incluem:\n\nPreferências de estilo? No entanto, você pode preferir tornar o estilo uma configuração (de Air, styler, lintr, ) ou para corrigir você mesmo o estilo de código especialmente se você não usar um estilo de código popular como o estilo de código do tidyverse.\nInfraestrutura como a do roxygen2?\nPreferências de fluxo de trabalho? Issue antes de um PR?\nUma declaração de escopo, como no pacote skimr?\nCriação de contas de sandbox? Mocking em testes? Links para documentos externos?\n\nA rOpenSci também incentiva os guias de contribuição a incluírem uma declaração de ciclo de vida que esclareça as visões e expectativas para o desenvolvimento futuro do seu pacote, como neste exemplo. É necessário que os pacotes estatísticos tenham uma declaração de ciclo de vida, conforme especificado em Padrões estatísticos gerais G1.2. Esses links fornecem um modelo para uma declaração de ciclo de vida simples. Os arquivos CONTRIBUTING.md também podem descrever como você reconhece as contribuições (consulte esta seção).\nRecomendamos que você envie comentários que não sejam um relatório de bug ou uma solicitação de feature para as ferramentas de discussão que sua plataforma Git oferece, como Discussões do GitHub para o GitHub.\nQuando uma pull request estiver mais perto de ser mesclada, você poderá estilizar o código com Air ou styler.\n\n\n11.1.3 Gerenciamento de issues\nAo usar os recursos do GitHub em torno dos issues, você pode ajudar os possíveis colaboradores a encontrá-los e tornar público o seu roteiro.\n\n11.1.3.1 Modelos de issues\nVocê pode usar um ou vários modelo(s) de issue(s) para ajudar as pessoas usuárias a preencherem os relatórios de bugs ou as solicitações de feature. Quando há vários modelos de issues, os usuários que clicam em abrir uma nova issue veem um menu que orienta as suas escolhas.\nVocê pode até configurar uma das opções para apontar para algum lugar fora do seu repositório (por exemplo, um fórum de discussão).\nConsulte a Documentação do GitHub.\n\n\n11.1.3.2 Rotulagem de issues\nVocê pode usar rótulos como “help wanted” (procura-se ajuda) e “good first issue” (bom primeiro problema) para ajudar colaboradores em potencial, inclusive novatos, a encontrar o seu repositório. Consulte o artigo do GitHub. Você também pode usar o rótulo “Beginner” (Iniciante). Você pode ver exemplos de problemas para iniciantes em todos os repositórios da rOpenSci.\n\n\n11.1.3.3 Fixando issues\nVocê pode fixar até 3 issues por repositório que aparecerão na parte superior do seu rastreador de issues como cartões de issues bonitos. Isso pode ajudar a divulgar quais são suas prioridades.\n\n\n11.1.3.4 Marcos\nVocê pode criar marcos e atribuir problemas a eles, o que ajuda outras pessoas a verem o que você planeja para a próxima versão do seu pacote, por exemplo.\n\n\n\n11.1.4 Comunicação com as pessoas usuárias\nVocê pode indicar para as pessoas usuárias o fórum da rOpenSci se você monitorar ou ativar as Discussões no GitHub para o repositório do seu pacote. Cada discussão do GitHub pode ser convertida em um issue, se necessário (e vice-versa, os issues podem ser convertidos em discussões).",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Guia de colaboração</span>"
    ]
  },
  {
    "objectID": "maintenance_collaboration.pt.html#workingcollaborators",
    "href": "maintenance_collaboration.pt.html#workingcollaborators",
    "title": "11  Guia de colaboração",
    "section": "11.2 Trabalhando com colaboradores",
    "text": "11.2 Trabalhando com colaboradores\nEm primeiro lugar: mantenha contato com o seu repositório do GitHub!\n\nNão se esqueça de observar o seu repositório do GitHub para receber notificações sobre issues ou pull requests (como alternativa, se você trabalha de forma concentrada em certas épocas, talvez adicione essas informações ao guia de contribuição).\nnão se esqueça de enviar as atualizações que você tem localmente.\ndesative os testes com falha se você não puder corrigí-los, pois eles criam ruído nos PRs que podem confundir colaboradores iniciantes.\n\n\n11.2.1 Integração de pessoas colaboradoras\nNão existe uma regra geral da rOpenSci sobre como você deve integrar pessoas colaboradoras. Você deve aumentar os direitos delas sobre o repositório à medida que ganhar confiança e, sem dúvida, deve reconhecer as contribuições que fizerem (consulte esta seção).\nVocê pode pedir a um novo colaborador que crie PRs (consulte a seção a seguir para avaliar um PR localmente, ou seja, além das verificações de CI) para dev/main e avalie-os antes de mesclá-los e, depois de algum tempo, deixe-os enviar para o main, embora você possa querer manter um sistema de revisões de PRs… mesmo para si mesmo quando tiver colegas de equipe!\nUm modelo possível para a integração de pessoas colaboradoras é fornecido por Jim Hester em seu lintr repo.\nSe o seu problema for o recrutamento de pessoas colaboradoras, você pode publicar uma chamada aberta como a de Jim Hester no Twitter, ou no GitHub e, como autor(a) de um pacote da rOpenSci, você pode pedir ajuda no slack da rOpenSci e pedir à equipe da rOpenSci por ideias para recrutar novas pessoas colaboradoras.\n\n\n11.2.2 Trabalhando com colaboradores (incluindo você)\nBranchs (ou ramificações) são baratas. Use-as extensivamente ao desenvolver recursos, testar novas ideias e corrigir problemas.\nUma das branches é a branch main (que é a ramificação padrão/principal), na qual, se você seguir desenvolvimento baseado no tronco você “faz merge de atualizações pequenas e frequentes”. Veja também as documentações do Fluxo do GitHub e do fluxo do GitLab. Talvez você também queira incrementar frequentemente os números da versão de seu pacote (em DESCRIPTION). Um aspecto específico do trabalho com colaboradores é a revisão de Pull requests, com algumas orientações úteis em:\n\nThe Art of Giving and Receiving Code Reviews (Gracefully) (A arte de dar e receber revisões de código (graciosamente)), de Alex Hill;\nDocumentação do GitHub sobre revisões de PR.\n\nVocê pode querer mexer nas configurações do seu repositório do GitHub para, por exemplo, exigir revisões de pull request antes de fazer o merge. Consulte também os documentos do GitHub sobre “proprietários de código”.\nPara fazer e revisar pull requests, recomendamos que você que você explore essas funções.\nPara que você configure o “git remote”, consulte Happy Git and GitHub for the useR. Veja também a seção Useful Git patterns for real life no mesmo livro.\n\n\n11.2.3 Seja generoso(a) com as atribuições\nSe alguém contribuir para o seu repositório, considere adicioná-la em DESCRIPTION, como contribuinte (“ctb”) para pequenas contribuições, e autor (“aut”) para contribuições maiores. Tradicionalmente, ao citar um pacote em uma publicação científica, apenas as pessoas autoras “aut” são listados, e não as contribuidores “ctb”; e em pkgdown e, nos sites, somente os nomes “aut” são listados na página inicial, e todas as pessoas autoras são listados na página de autores.\nNo mínimo, considere adicionar o nome das pessoas colaboradoras próximo à linha de correção de feature/bugs em NEWS.md.\nVocê também pode usar o pacote R allcontributors para agradecer a todos os colaboradores no arquivo README.\nRecomendamos que você seja generoso(a) com esses agradecimentos, porque é uma coisa boa de se fazer e porque isso aumentará a probabilidade de as pessoas contribuírem novamente com o seu pacote ou com outros repositórios da organização.\nComo um lembrete de nossas diretrizes de empacotamento, se o seu pacote foi revisado e você acha que as pessoas revisoras fizeram uma contribuição substancial para o desenvolvimento dele, você pode listá-las na seção Authors@R com um tipo de contribuinte “Revisor(a)” (\"rev\"), da seguinte forma:\n    person(\"Bea\", \"Hernández\", role = \"rev\",\n    comment = \"Bea reviewed the package (v. X.X.XX) for rOpenSci, see &lt;https://github.com/ropensci/software-review/issues/116&gt;\"),\nInclua as pessoas revisoras somente após solicitar o consentimento delas. Leia mais nesta postagem do blog “Agradecendo seus revisores: Gratidão por meio de metadados semânticos”. Observe que ‘rev’ gerará uma CRAN NOTE, a menos que o pacote seja criado usando o R v3.5. Certifique-se de que você use roxygen2 na versão mais recente disponível no CRAN.\nPor favor, não liste os editores como colaboradores. Sua participação e contribuição para a rOpenSci são agradecimentos suficientes!\n\n\n11.2.4 Dando as boas-vindas aos colaboradores da rOpenSci\nSe você conceder a alguém permissões de escrita no repositório,\n\nentre em contato com um membro da equipe para que esse novo colaborador possa receber um convite para a organização da rOpenSci no GitHub (em vez de ser um colaborador externo)\nentre em contato com a equipe da rOpenSci ou um outro membro da equipe para que esse novo colaborador possa receber um convite para o workspace do Slack da rOpenSci.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Guia de colaboração</span>"
    ]
  },
  {
    "objectID": "maintenance_collaboration.pt.html#further-resources",
    "href": "maintenance_collaboration.pt.html#further-resources",
    "title": "11  Guia de colaboração",
    "section": "11.3 Outros recursos",
    "text": "11.3 Outros recursos\n\nChamada da comunidade rOpenSci: Configure seu pacote para promover uma comunidade.\nPara reutilizar respostas gentis e usuais, considere a funcionalidade de respostas salvas do GitHub.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Guia de colaboração</span>"
    ]
  },
  {
    "objectID": "maintenance_changing_maintainers.pt.html",
    "href": "maintenance_changing_maintainers.pt.html",
    "title": "12  Mudando os(as) mantenedores(as) de um pacote",
    "section": "",
    "text": "12.1 Você quer desistir da manutenção do seu pacote?\nTemos uma seção em nosso boletim informativo para chamadas de novos(as) colaboradores(as) que é publicado a cada duas semanas. A seção se chama Chamada para colaboradores. Nessa seção, destacamos os pacotes que estão à procura de novos(as) mantenedores(as). Se você deseja desistir da função de mantenedor(a) do seu pacote, entre em contato conosco e poderemos destacar o seu pacote em nosso boletim informativo.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Mudando os(as) mantenedores(as) de um pacote</span>"
    ]
  },
  {
    "objectID": "maintenance_changing_maintainers.pt.html#do-you-want-to-take-over-maintenance-of-a-package",
    "href": "maintenance_changing_maintainers.pt.html#do-you-want-to-take-over-maintenance-of-a-package",
    "title": "12  Mudando os(as) mantenedores(as) de um pacote",
    "section": "12.2 Você quer assumir a manutenção de um pacote?",
    "text": "12.2 Você quer assumir a manutenção de um pacote?\nTemos uma seção em nosso boletim informativo para chamadas de novos(as) colaboradores(as) que é publicado a cada duas semanas. A seção se chama Chamada para colaboradores. Nessa seção, destacamos os pacotes que estão à procura de novos(as) mantenedores(as). Se você ainda não está inscrito no boletim informativo, é uma boa ideia assinar para que você seja notificado quando houver um pacote procurando por um novo(a) mantenedor(a).",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Mudando os(as) mantenedores(as) de um pacote</span>"
    ]
  },
  {
    "objectID": "maintenance_changing_maintainers.pt.html#taking-over-maintenance-of-a-package",
    "href": "maintenance_changing_maintainers.pt.html#taking-over-maintenance-of-a-package",
    "title": "12  Mudando os(as) mantenedores(as) de um pacote",
    "section": "12.3 Assumir a manutenção de um pacote",
    "text": "12.3 Assumir a manutenção de um pacote\n\nAdicione você como o(a) novo(a) mantenedor(a) no arquivo DESCRIPTION, com role = c(\"aut\", \"cre\"), e, altere o(a) antigo(a) mantenedor(a) para o papel aut apenas;\nCertifique-se de alterar o(a) mantenedor(a) para o seu nome em qualquer outro lugar do pacote, mantendo o(a) antigo(a) mantenedor(a) como autor (por exemplo, em manuais do pacote, CONTRIBUTING.md, CITATION etc.);\nOs Guia de Colaboração tem orientações sobre como adicionar novos(as) mantenedores(as) e colaboradores(as);\nPacotes que foram arquivados ou órfãos no CRAN não precisam da permissão do(a) mantenedor(a) anterior para serem retomados no CRAN. Nesses casos, entre em contato conosco para que possamos oferecer a ajuda necessária;\nSe o pacote não tiver sido arquivado pelo CRAN e houver uma mudança de mantenedor(a), peça ao(à) mantenedor(a) antigo(a) que envie um e-mail ao CRAN e informe por escrito quem é o(a) novo(a) mantenedor(a). Certifique-se de mencionar esse e-mail sobre a mudança de mantenedor(a) quando você enviar a primeira nova versão ao CRAN. Se o(a) antigo(a) mantenedor(a) estiver inacessível ou não enviar esse e-mail, entre em contato com a equipe do rOpenSci;\nSe o(a) mantenedor(a) anterior estiver acessível, agendar uma reunião ajudará você a conhecer melhor a situação atual do pacote;\n\n\n12.3.1 Perguntas frequentes para novos(as) mantenedores(as)\n\nExistem alguns problemas no pacote que ainda não foram resolvidos, e que eu não sei como corrigir. A quem posso pedir ajuda?\nDepende; aqui está o que você deve fazer em diferentes cenários:\n\nSe for possível entrar em contato com o(a) antigo(a) mantenedor(a): entre em contato com ele(a) e peça ajuda;\nSlack do rOpenSci: bom para obter ajuda em problemas específicos ou gerais, consulte o canal #package-maintenance;\nFórum de discussão do rOpenSci este forum é uma boa opção, sinta-se à vontade para fazer perguntas;\nEquipe do rOpenSci sinta-se livre para entrar em contato com um de nós, seja por e-mail ou nos marcando em um problema no GitHub, ficaremos felizes em ajudar;\né claro, também existem vários centros de ajuda geral sobre o R, se isso atender às suas necessidades: Fórum da comunidade Posit, StackOverflow, Mastodon #rstats, etc.\n\nO quanto você pode/deve alterar no pacote?\nPara obter ajuda geral sobre como alterar o código em um pacote, consulte a seção Evolução do pacote de pacotes.\nQuando você pensa nisso, há muitas considerações a se fazer.\nQuanto tempo você tem para dedicar ao pacote? Se você tiver um tempo muito limitado, seria melhor se concentrar nas tarefas mais importantes, sejam elas quais forem para o pacote em questão. Se você tiver bastante tempo, suas metas poderão ter um escopo maior.\nQual é o grau de maturidade do pacote? Se o pacote for maduro, muitas pessoas provavelmente têm códigos que dependem da API do pacote (ou seja, as funções exportadas e seus parâmetros). Além disso, se houver outros pacotes que dependam do seu pacote no CRAN, você precisa verificar se as suas alterações vão quebrar ou não esses outros pacotes. Quanto mais maduro for o pacote, mais cuidadoso(a) você precisará ser ao fazer alterações, especialmente com os nomes das funções exportadas, seus parâmetros e a estrutura exata do que as funções exportadas retornam. É mais fácil fazer alterações que afetem apenas os aspectos internos do pacote.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Mudando os(as) mantenedores(as) de um pacote</span>"
    ]
  },
  {
    "objectID": "maintenance_changing_maintainers.pt.html#tasks-for-ropensci-staff",
    "href": "maintenance_changing_maintainers.pt.html#tasks-for-ropensci-staff",
    "title": "12  Mudando os(as) mantenedores(as) de um pacote",
    "section": "12.4 Tarefas da equipe do rOpenSci",
    "text": "12.4 Tarefas da equipe do rOpenSci\nComo organização, a rOpenSci está interessada em garantir que os pacotes de nossa suíte estejam disponíveis enquanto forem úteis para a comunidade. Como os(as) mantenedores(as) precisam seguir em frente, na maioria dos casos tentaremos conseguir um(a) novo(a) mantenedor(a) para cada pacote. Para isso, as tarefas a seguir são de responsabilidade da equipe da rOpenSci.\n\nSe um repositório não tiver nenhuma atividade (commits, issues, pull requests) há muito tempo, ele pode ser simplesmente um pacote maduro com pouca necessidade de alterações/etc., portanto, leve isso em consideração.\nO(a) mantenedor(a) atual não responde a problemas/solicitações pull há muitos meses, por meio de e-mails, problemas no GitHub ou mensagens no Slack:\n\nEntre em contato e veja qual é a situação. Ele(a) pode dizer que gostaria de deixar o cargo de mantenedor(a) e, nesse caso, procure um(a) novo(a) mantenedor(a)\n\nO(a) mantenedor(a) atual está completamente ausente/não está respondendo\n\nSe isso acontecer, tentaremos entrar em contato com o(a) mantenedor(a) por até um mês. No entanto, se a atualização do pacote for urgente, poderemos usar nosso acesso de administrador para fazer alterações em seu nome.\n\nFaça uma chamada na seção “Call for Contributors” do boletim informativo da rOpenSci para um(a) novo(a) mantenedor(a) - abra um problema no repositório do boletim informativo.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Mudando os(as) mantenedores(as) de um pacote</span>"
    ]
  },
  {
    "objectID": "maintenance_releases.pt.html",
    "href": "maintenance_releases.pt.html",
    "title": "13  Publicação de um pacote",
    "section": "",
    "text": "13.1 Controle de versão",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Publicação de um pacote</span>"
    ]
  },
  {
    "objectID": "maintenance_releases.pt.html#versioning",
    "href": "maintenance_releases.pt.html#versioning",
    "title": "13  Publicação de um pacote",
    "section": "",
    "text": "Recomendamos enfaticamente que os pacotes rOpenSci usem controle de versão semântico. Uma explicação detalhada está disponível no capítulo de ciclo de vida do livro R Packages.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Publicação de um pacote</span>"
    ]
  },
  {
    "objectID": "maintenance_releases.pt.html#releasing",
    "href": "maintenance_releases.pt.html#releasing",
    "title": "13  Publicação de um pacote",
    "section": "13.2 Publicação",
    "text": "13.2 Publicação\n\nUsando usethis::use_release_issue() e devtools::release() ajudará você a se lembrar de mais verificações.\nMarque cada versão no Git após cada envio ao CRAN. Mais informações\nO CRAN não gosta de atualizações muito frequentes. Dito isso, se você notar um grande problema uma semana após o lançamento do CRAN, explique-o no cran-comments.md e tente lançar uma versão mais recente.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Publicação de um pacote</span>"
    ]
  },
  {
    "objectID": "maintenance_releases.pt.html#news",
    "href": "maintenance_releases.pt.html#news",
    "title": "13  Publicação de um pacote",
    "section": "13.3 Arquivo de notícias",
    "text": "13.3 Arquivo de notícias\nUm arquivo NEWS descrevendo as alterações associadas a cada versão facilita a visualização do que está sendo alterado no pacote e como isso pode afetar o fluxo de trabalho. Você deve adicionar um para o seu pacote e torná-lo de fácil leitura.\n\nÉ obrigatório usar um arquivo NEWS ou NEWS.md na raiz do seu pacote. Recomendamos que você use o arquivo NEWS.md para tornar o arquivo mais navegável.\nVocê pode usar nosso exemplo arquivo NEWS como modelo. Você pode encontrar um bom arquivo NEWS em uso real [no repositório do pacote targets] (https://github.com/ropensci/targets/blob/main/NEWS.md) ), por exemplo.\nSe você usar NEWS adicione-o a .Rbuildignore mas não se você usar NEWS.md\nAtualize o arquivo de notícias antes de cada envio para o CRAN, com uma seção com o nome do pacote, a versão e a data de lançamento, (como visto em nosso exemplo arquivo NEWS):\n\nfoobar 0.2.0 (2016-04-01)\n=========================\n\nSob esse cabeçalho, coloque as seções conforme necessário, incluindo: NEW FEATURES, MINOR IMPROVEMENTS, BUG FIXES, DEPRECATED AND DEFUNCT, DOCUMENTATION FIXES e qualquer título especial que agrupe um grande número de alterações. Em cada cabeçalho, liste os itens conforme necessário (como visto em nosso exemplo Arquivo NEWS). Para cada item, forneça uma descrição do novo recurso, melhoria, correção de bug ou função/característica obsoleta. Link para qualquer problema relacionado no GitHub, como (#12). O problema (#12) será resolvido no GitHub em Releases para um link para esse problema no repositório.\nDepois que você tiver adicionado um git tag e enviado para o GitHub, adicione os itens de notícias para essa versão marcada às notas de versão de uma versão no seu repositório do GitHub com um título como pkgname v0.1.0. Você pode ver Documentos do GitHub sobre a criação de uma versão.\nNovos lançamentos do CRAN serão escritos sobre em nosso boletim informativo mas veja próximo capítulo sobre marketing sobre como informar mais usuários em potencial sobre o lançamento.\nPara obter mais orientações sobre o arquivo NEWS, sugerimos que você leia o documento guia de estilo do tidyverse NEWS.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Publicação de um pacote</span>"
    ]
  },
  {
    "objectID": "maintenance_marketing.pt.html",
    "href": "maintenance_marketing.pt.html",
    "title": "14  Marketing do seu pacote",
    "section": "",
    "text": "Consulte também a postagem do blog Marketing Ideas For Your Package.\n\n\n\nAjudaremos você a promover o seu pacote, mas aqui estão mais algumas coisas que você deve ter em mente.\n\n\n\n\nSe você souber de um caso de uso de seu pacote, incentive o autor a publicar o link em nosso fórum de discussão na categoria Use Cases, para um post no Mastodon da rOpenSci e possível inclusão no boletim quinzenal da rOpenSci. Também recomendamos que você adicione um link para o caso de uso em uma seção “use cases in the wild” do seu README.\nQuando você liberar uma nova versão do seu pacote ou você lançá-lo pela primeira vez no CRAN,\n\nFaça um pull request para a R Weekly com uma linha sobre essa nova versão na seção “New Releases” (ou “New Packages” para a primeira versão do GitHub/CRAN).\nPublique sobre seu pacote nas mídias sociais (Mastodon, Bluesky, LinkedIn…) usando a hashtag “#rstats” e marque a rOpenSci se ela estiver presente nessa plataforma! Isso pode ajudar no engajamento de pessoas colaboradoras e usuárias. Exemplo.\nConsidere a possibilidade de enviar um breve post sobre o lançamento para as Notas técnicas da rOpenSci. Entre em contato com o/a gerente da comunidade do rOpenSci (por exemplo, via Slack ou info@ropensci.org). Consulte as diretrizes sobre como contribuir com um blog post).\nEnvie seu pacote para listas de pacotes, como a Visão de tarefas do CRAN.\n\nSe você optar por divulgar o seu pacote dando uma palestra sobre ele em um encontro ou conferência (excelente ideia!) leia este artigo de Jenny Bryan e Mara Averick.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Marketing do seu pacote</span>"
    ]
  },
  {
    "objectID": "maintenance_github_grooming.pt.html",
    "href": "maintenance_github_grooming.pt.html",
    "title": "15  Preparação do GitHub",
    "section": "",
    "text": "15.1 Torne seu repositório mais detectável",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Preparação do GitHub</span>"
    ]
  },
  {
    "objectID": "maintenance_github_grooming.pt.html#repodiscoverability",
    "href": "maintenance_github_grooming.pt.html#repodiscoverability",
    "title": "15  Preparação do GitHub",
    "section": "",
    "text": "15.1.1 Áreas de repositório do GitHub\nAs áreas de repositório do GitHub ajudam a navegar e pesquisar repositórios do GitHub, são usadas pelo R-universe em páginas de pacotes e para resultados de pesquisa. Também são processadas pelo codemetar nas palavras-chave de registro da rOpenSci.\nRecomendamos:\n\nAdicionar “r”, “r-package” e “rstats” como tópicos ao repositório de seu pacote.\nAdicionar quaisquer outros tópicos relevantes ao repositório do seu pacote.\n\nPoderemos fazer sugestões a você depois que seu pacote for integrado.\n\n\n15.1.2 GitHub linguist\nO GitHub linguist atribuirá uma linguagem ao seu repositório com base nos arquivos que ele contém. Alguns pacotes que contêm muito código em C++ podem ser classificados como pacotes C++ em vez de pacotes R, o que é bom e mostra a necessidade de adicionar os tópicos “r”, “r-package” e “rstats”.\nRecomendamos que você substitua o GitHub linguist adicionando ou modificando um .gitattributes ao seu repositório em dois casos:\n\nSe você armazenar arquivos html em locais diferentes do padrão (não em docs/, por exemplo, em vignettes/), use as substituições de documentação. Adicione *.html linguist-documentation=true ao arquivo .gitattributes (Exemplo em uso real)\nSe o seu repositório contiver código que você não criou, por exemplo, código JavaScript, adicione inst/js/* linguist-vendored a .gitattributes (Exemplo em uso real)\n\nDessa forma, a classificação da linguagem e as estatísticas do seu repositório refletirão melhor o código-fonte que ele contém, além de torná-lo mais detectável. Notavelmente, se o GitHub linguist não reconhecer corretamente que seu repositório contém principalmente código R, seu pacote não aparecerá nos resultados de pesquisa usando o filtro language:R. Da mesma forma, seu repositório não poderá ser listado entre os repositórios R em alta.\nMais informações sobre as substituições do GitHub linguist.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Preparação do GitHub</span>"
    ]
  },
  {
    "objectID": "maintenance_github_grooming.pt.html#marketown",
    "href": "maintenance_github_grooming.pt.html#marketown",
    "title": "15  Preparação do GitHub",
    "section": "15.2 Comercialize sua própria conta",
    "text": "15.2 Comercialize sua própria conta\n\nComo autor de um pacote integrado, você agora é membro da organização “ropensci” da rOpenSci no GitHub. Por padrão, as participações da organização são privadas; consulte como torná-la pública na documentação do GitHub.\nMesmo que o repositório do seu pacote tenha sido transferido para a rOpenSci, você pode fixá-lo em sua conta pessoal.\nEm geral, recomendamos que você adicione pelo menos um avatar (que não precisa ser seu rosto!) e seu nome no seu perfil do GitHub.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Preparação do GitHub</span>"
    ]
  },
  {
    "objectID": "maintenance_evolution.pt.html",
    "href": "maintenance_evolution.pt.html",
    "title": "16  Evolução do pacote - alteração de itens em seu pacote",
    "section": "",
    "text": "16.1 Filosofia das alterações\nTodos são livres para ter sua própria opinião sobre a liberdade com que parâmetros/funções/etc. são alterados em uma biblioteca - as regras sobre alterações de pacotes não são impostas pelo CRAN ou de outra forma. Em geral, à medida que uma biblioteca se torna mais madura, as alterações nos métodos voltados para o usuário (ou seja, funções exportadas em um pacote R) devem se tornar muito raras. As bibliotecas que são dependências de muitas outras bibliotecas provavelmente serão mais cuidadosas com as alterações, e devem ser.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Evolução do pacote - alteração de itens em seu pacote</span>"
    ]
  },
  {
    "objectID": "maintenance_evolution.pt.html#the-lifecycle-package",
    "href": "maintenance_evolution.pt.html#the-lifecycle-package",
    "title": "16  Evolução do pacote - alteração de itens em seu pacote",
    "section": "16.2 O pacote lifecycle",
    "text": "16.2 O pacote lifecycle\nEste capítulo apresenta soluções que não requerem o pacote lifecycle, mas que você ainda pode considerar úteis. Recomendamos que você leia a documentação do lifecycle.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Evolução do pacote - alteração de itens em seu pacote</span>"
    ]
  },
  {
    "objectID": "maintenance_evolution.pt.html#parameters-changing-parameter-names",
    "href": "maintenance_evolution.pt.html#parameters-changing-parameter-names",
    "title": "16  Evolução do pacote - alteração de itens em seu pacote",
    "section": "16.3 Parâmetros: alteração dos nomes dos parâmetros",
    "text": "16.3 Parâmetros: alteração dos nomes dos parâmetros\nÀs vezes, os nomes dos parâmetros precisam ser alterados para maior clareza ou por algum outro motivo.\nUma abordagem possível é verificar se os argumentos descontinuados não estão faltando e parar de fornecer uma mensagem significativa.\nfoo_bar &lt;- function(x, y) {\n    if (!missing(x)) {\n        stop(\"use 'y' instead of 'x'\")\n    }\n    y^2\n}\n\nfoo_bar(x = 5)\n#&gt; Error in foo_bar(x = 5) : use 'y' instead of 'x' \nSe quiser que a função seja mais útil, você pode fazê-la emitir um aviso e tomar automaticamente a ação necessária:\nfoo_bar &lt;- function(x, y) {\n    if (!missing(x)) {\n        warning(\"use 'y' instead of 'x'\")\n        y &lt;- x\n    }\n    y^2\n}\n\nfoo_bar(x = 5)\n#&gt; 25\nEsteja ciente do parâmetro .... Se sua função tiver ... e você já tiver removido um parâmetro (vamos chamá-lo de z), um usuário pode ter um código mais antigo que usa z. Quando você passa o parâmetro z ele não é um parâmetro na definição da função e provavelmente será ignorado silenciosamente – não é o que você deseja. Em vez disso, deixe o argumento presente, lançando um erro se ele for usado.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Evolução do pacote - alteração de itens em seu pacote</span>"
    ]
  },
  {
    "objectID": "maintenance_evolution.pt.html#functions-changing-function-names",
    "href": "maintenance_evolution.pt.html#functions-changing-function-names",
    "title": "16  Evolução do pacote - alteração de itens em seu pacote",
    "section": "16.4 Funções: alteração de nomes de funções",
    "text": "16.4 Funções: alteração de nomes de funções\nSe você precisar alterar o nome de uma função, faça-o gradualmente, como em qualquer outra alteração em seu pacote.\nDigamos que você tenha uma função foo.\nfoo &lt;- function(x) x + 1\nNo entanto, você deseja alterar o nome da função para bar.\nEm vez de simplesmente alterar o nome da função e foo deixar de existir imediatamente, na primeira versão do pacote em que o bar aparecer, crie um alias como:\n#' foo - add 1 to an input\n#' @export\nfoo &lt;- function(x) x + 1\n\n#' @export\n#' @rdname foo\nbar &lt;- foo\nCom a solução acima, o usuário pode usar foo() ou bar() – ambos farão a mesma coisa, pois são a mesma função.\nTambém é útil ter uma mensagem, mas você só vai querer lançar essa mensagem quando eles usarem a função antiga, por exemplo,\n#' foo - add 1 to an input\n#' @export\nfoo &lt;- function(x) {\n    warning(\"please use bar() instead of foo()\", call. = FALSE)\n    bar(x)\n}\n\n#' @export\n#' @rdname foo\nbar &lt;- function(x) x + 1\nDepois que os usuários tiverem usado a versão do pacote por algum tempo (com ambos os foo e bar), na próxima versão você poderá remover o nome da função antiga (foo), e você terá apenas bar.\n#' bar - add 1 to an input\n#' @export\nbar &lt;- function(x) x + 1",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Evolução do pacote - alteração de itens em seu pacote</span>"
    ]
  },
  {
    "objectID": "maintenance_evolution.pt.html#dados-descontinuar",
    "href": "maintenance_evolution.pt.html#dados-descontinuar",
    "title": "16  Evolução do pacote - alteração de itens em seu pacote",
    "section": "16.5 Dados: descontinuar",
    "text": "16.5 Dados: descontinuar\nSe você precisar descontinuar (deprecate) um conjunto de dados fornecido pelo seu pacote, leia a solução proposta por Matthijs Berends no Stack Overflow, com link para [um método de três etapas na orientação do Bioconductor] (https://contributions.bioconductor.org/deprecation.html#deprecate-dataset). O ponto principal é o uso de delayedAssign() para criar uma promise que servirá tanto para emitir um aviso (warning) quanto para fornecer os dados. ## Funções: descontinuadas e removidas {#functions-deprecate-defunct}\nPara remover uma função de um pacote (digamos que o nome do seu pacote seja helloworld), você pode usar o seguinte protocolo:\n\nMarque a função como descontinuada na versão do pacote x (por exemplo, v0.2.0)\n\nNa própria função, use .Deprecated() para apontar para a função de substituição:\nfoo &lt;- function() {\n    .Deprecated(\"bar\")\n}\nHá opções em .Deprecated para especificar um novo nome de função, bem como um novo nome de pacote, o que faz sentido quando você move funções para pacotes diferentes.\nA mensagem que é dada por .Deprecated é um aviso, portanto, pode ser suprimida por usuários com suppressWarnings() se você desejar.\nCrie uma página de manual para funções descontinuadas, como:\n#' Deprecated functions in helloworld\n#' \n#' These functions still work but will be removed (defunct) in the next version.\n#' \n#' \\itemize{\n#'  \\item \\code{\\link{foo}}: This function is deprecated, and will\n#'  be removed in the next version of this package.\n#' }\n#' \n#' @name helloworld-deprecated\nNULL\nIsso cria uma página de manual que os usuários podem acessar como ?`helloworld-deprecated` e que você verá no índice da documentação. Adicione quaisquer funções a essa página conforme necessário e remova-as quando uma função se tornar “defunct” (veja abaixo).\n\nNa próxima versão (v0.3.0), você pode tornar a função “defunct” (ou seja, completamente removida do pacote, exceto por uma página de manual com uma nota sobre ela).\n\nNa própria função, use .Defunct() como:\nfoo &lt;- function() {\n    .Defunct(\"bar\")\n}\nObserve que a mensagem em .Defunct é um erro para que a função pare, enquanto .Deprecated usa um aviso que permite que a função continue.\nAlém disso, é bom adicionar ... a todas as funções removidas para que, se os usuários passarem algum parâmetro, recebam a mesma mensagem de “defunct” em vez de um unused argument assim, por exemplo:\nfoo &lt;- function(...) {\n    .Defunct(\"bar\")\n}\nSem ... o resultado é:\nfoo(x = 5)\n#&gt; Error in foo(x = 5) : unused argument (x = 5)\nE com ... o resultado é:\nfoo(x = 5)\n#&gt; Error: 'foo' has been removed from this package\nFaça uma página de manual para funções “defunct”, como:\n#' Defunct functions in helloworld\n#' \n#' These functions are gone, no longer available.\n#' \n#' \\itemize{\n#'  \\item \\code{\\link{foo}}: This function is defunct.\n#' }\n#' \n#' @name helloworld-defunct\nNULL\nIsso cria uma página de manual que os usuários podem acessar como ?`helloworld-defunct` e que você verá no índice da documentação. Você pode adicionar quaisquer funções a essa página, conforme necessário. Você provavelmente desejará manter essa página de manual indefinidamente.\n\n16.5.1 Testando funções descontinuadas\nVocê não precisa alterar os testes de funções descontinuadas até que elas se tornem “defunct”.\n\nConsidere todas as alterações feitas em uma função descontinuada. Além de usar .Deprecated dentro da função, você alterou os parâmetros na função descontinuada ou criou uma nova função que substitui a função descontinuada, etc.? Essas alterações devem ser testadas, caso você as tenha feito.\nEm relação ao que foi dito acima, se a função descontinuada estiver apenas recebendo uma alteração de nome, talvez você possa testar se as funções antiga e nova retornam resultados idênticos.\nsuppressWarnings() poderia ser usado para suprimir o aviso lançado pelo .Deprecated, mas os testes não são voltados para o usuário e, portanto, não é tão ruim se o aviso for lançado nos testes, e o aviso pode até ser usado como um lembrete para o mantenedor.\n\nQuando uma função se torna “defunct”, seus testes são simplesmente removidos.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Evolução do pacote - alteração de itens em seu pacote</span>"
    ]
  },
  {
    "objectID": "maintenance_evolution.pt.html#renaming-packages",
    "href": "maintenance_evolution.pt.html#renaming-packages",
    "title": "16  Evolução do pacote - alteração de itens em seu pacote",
    "section": "16.6 Renomeando pacotes",
    "text": "16.6 Renomeando pacotes\nNão há problema em renomear um pacote que está em desenvolvimento inicial. Pode ser a oportunidade, antes da revisão, de estar em conformidade com os nossos conselhos de nomenclatura.\nRenomear um pacote que já foi amplamente adotado e/ou lançado no CRAN é problemático. O CRAN tem uma política que afirma que os nomes de pacotes no CRAN são persistentes e, em geral, não é permitido alterar o nome de um pacote. O pacote com seu nome antigo pode ser uma dependência de outros pacotes, scripts e recursos em documentações, publicações científicas, postagens em blogs, entre outros.\nAo mudar radicalmente a interface, é melhor começar um novo pacote do zero, como o httr2, que é a segunda geração do httr; ou criar edições de um pacote, como o testthat. Se você também mantiver o pacote antigo, poderá fazer uma depreciação suave com uma mensagem de inicialização, como no pacote httr. Isso permite que as pessoas usuárias e autores(as) de pacotes escolham quando/se devem atualizar sua base de código para o novo pacote ou edição. Se você copiar o código de outro pacote, certifique-se de reconhecer os(as) autores(as) do código que você reutiliza, listando seus nomes no arquivo DESCRIPTION com um comentário que declare que essas pessoas foram autoras do pacote original. Exemplo.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Evolução do pacote - alteração de itens em seu pacote</span>"
    ]
  },
  {
    "objectID": "maintenance_evolution.pt.html#archivalguidance",
    "href": "maintenance_evolution.pt.html#archivalguidance",
    "title": "16  Evolução do pacote - alteração de itens em seu pacote",
    "section": "16.7 Arquivamento de pacotes",
    "text": "16.7 Arquivamento de pacotes\nSoftware geralmente tem uma vida útil finita, e os pacotes podem precisar ser arquivados. Os pacotes arquivados são arquivados e movidos para uma organização dedicada no GitHub, ropensci-archive. Antes do arquivamento, o conteúdo do arquivo README deve ser movido para um local alternativo (como “README-OLD.md”) e substituído por um conteúdo mínimo, incluindo algo como o seguinte:\n# &lt;package name&gt;\n\n[![Project Status: Unsupported](https://www.repostatus.org/badges/latest/unsupported.svg)](https://www.repostatus.org/#unsupported)\n[![Peer-review badge](https://badges.ropensci.org/&lt;issue_number&gt;_status.svg)](https://github.com/ropensci/software-review/issues/&lt;issue_number&gt;)\n\nThis package has been archived. The former README is now in [README-old](&lt;link-to-README-old&gt;).\nO badge de status do repositório deve estar como “unsupported” (sem suporte) para pacotes lançados anteriormente ou como “abandoned” (abandonado) para pacotes de conceito anterior ou WIP (trabalho em progresso), caso em que o código do badge acima deve ser substituído por:\n[![Project Status: Abandoned](https://www.repostatus.org/badges/latest/abandoned.svg)](https://www.repostatus.org/#abandoned)\nUm exemplo de um README mínimo em um pacote arquivado está em ropensci-archive/monkeylearn. Depois que o README tiver sido copiado em outro lugar e reduzido à forma mínima, você deverá seguir as etapas a seguir:\n\nEncerre os issues com uma frase que explique a situação e faça um link para este guia.\nArquive o repositório no GitHub (também nas configurações do repositório).\nTransfira o repositório para ropensci-archive ou solicite um membro da equipe do rOpenSci para transferi-lo (você pode enviar um e-mail para info@ropensci.org).\n\nOs pacotes arquivados podem ser desarquivados se os autores ou uma nova pessoa optarem por retomar a manutenção. Para isso, entre em contato com a rOpenSci.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Evolução do pacote - alteração de itens em seu pacote</span>"
    ]
  },
  {
    "objectID": "maintenance_curation.pt.html",
    "href": "maintenance_curation.pt.html",
    "title": "17  Política de curadoria de pacotes",
    "section": "",
    "text": "17.1 O registro de pacotes\nElementos de infraestrutura descritos abaixo necessários para a implementação da política foram, em alguns casos, parcialmente construídos e, em outros casos, ainda não foram iniciados. Nosso objetivo é adotar essa política em parte para priorizar o trabalho nesses componentes.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Política de curadoria de pacotes</span>"
    ]
  },
  {
    "objectID": "maintenance_curation.pt.html#the-package-registry",
    "href": "maintenance_curation.pt.html#the-package-registry",
    "title": "17  Política de curadoria de pacotes",
    "section": "",
    "text": "O pacote rOpenSci registry é uma lista centralizada dos pacotes R que são mantidos atualmente (ou que foram mantidos anteriormente) pela rOpenSci. Ele contém metadados essenciais sobre os pacotes, incluindo o status de desenvolvimento e de revisão, e será a fonte de dados para exibição em sites, badges, etc. Ele permite que essa lista seja mantida de forma independente do pacote ou das plataformas de hospedagem de infraestrutura.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Política de curadoria de pacotes</span>"
    ]
  },
  {
    "objectID": "maintenance_curation.pt.html#staff-maintained-packages",
    "href": "maintenance_curation.pt.html#staff-maintained-packages",
    "title": "17  Política de curadoria de pacotes",
    "section": "17.2 Pacotes mantidos pela equipe",
    "text": "17.2 Pacotes mantidos pela equipe\nOs pacotes mantidos pela equipe são pacotes desenvolvidos e mantidos pela equipe da rOpenSci como parte dos projetos internos da rOpenSci. Esses pacotes também podem ser revisados por pares mas não são necessariamente revisados por pares. Muitos desses pacotes estão fora do escopo da revisão por pares.\n\nOs pacotes mantidos pela equipe serão listados no registro com a tag “staff_maintained” e listados na página da Web de pacotes da rOpenSci, ou em locais similares com a tag “staff-maintained” (mantido pela equipe)\nEsses pacotes serão armazenados no dentro da organização no GitHub chamada “ropensci”\nOs pacotes mantidos pela equipe e seus documentos serão criados pelo sistema da rOpenSci. Esse sistema não envia notificações, mas gera resultados como status de commit do GitHub (o red check mark ou o red cross).\nQuando os pacotes falham nas verificações, a equipe da rOpenSci se esforça para corrigir as alterações, priorizando os pacotes com base no volume de usuários (isto é, o volume de downloads), de dependências reversas ou de objetivos estratégicos.\nEm uma base semestral ou anual, a rOpenSci analisará todos os pacotes que estão falhando há mais de um mês para determinar se você deve transferi-los para a organização “ropensci-archive” no GitHub.\nPacotes que falham consistentemente e sem um plano contínuo para retornar para uma manutenção ativa, vão passar para o status de “archive”. Quando arquivados, os pacotes da equipe serão movidos para o diretório “ropensci-archive” (a ser criado) e ganharão o tipo “archived” no registro. Eles não serão construídos no sistema da rOpenSci.\nOs pacotes arquivados não serão exibidos por padrão na seção de pacotes da página da Web. Esses pacotes serão exibidos em uma guia especial das páginas de pacotes com \"type\": \"archived\" que foram revisados por pares ou que foram mantidos pela equipe.\nOs pacotes arquivados podem ser desarquivados quando o mantenedor antigo ou um novo mantenedor estiver disposto a resolver os problemas e quiser reviver o pacote. Para isso, você deve entrar em contato com a rOpenSci. Esses pacotes serão transferidos para a organização ropenscilabs.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Política de curadoria de pacotes</span>"
    ]
  },
  {
    "objectID": "maintenance_curation.pt.html#peer-reviewed-packages",
    "href": "maintenance_curation.pt.html#peer-reviewed-packages",
    "title": "17  Política de curadoria de pacotes",
    "section": "17.3 Pacotes revisados por pares",
    "text": "17.3 Pacotes revisados por pares\nOs pacotes revisados por pares são aqueles contribuídos para a rOpenSci pela comunidade e que passaram pela revisão por pares. Eles precisam estar dentro do escopo no momento em que eles são enviados para serem revisados.\n\nApós o aceite, esses pacotes revisados por pares são transferidos do GitHub do(a) autor(a) para dentro da organização “ropensci” no GitHub ou, alternativamente, passam a ser monitorados pela adição deles a um arquivo JSON.\nOs pacotes revisados por pares estarão marcados no registro como “peer-reviewed”, e terão um selo de revisão por pares em seu README.\nOs pacotes revisados por pares serão listados na página da Web da rOpenSci, ou em locais semelhantes, com a tag “peer-reviewed” (revisado por pares)\nOs pacotes revisados por pares e seus documentos serão construídos pelo sistema da rOpenSci. Esse sistema não envia notificações mas gera resultados como o status de commit do GitHub (o red check mark ou o red cross).\nAnualmente ou semestralmente, a equipe da rOpenSci revisará os pacotes que estão em estado de falha ou que estão falhando já por longos períodos, e entrará em contato com os autores para determinar o status da manutenção e das atualizações esperadas. Com base nesse intercâmbio, a rOpenSci pode optar por manter o status atual do pacote com a expectativa de uma atualização, ou contribuir com algum suporte, ou ainda, buscar um novo mantenedor, ou transferir o pacote para o status “archived”.\nCom base no volume de usuários (isto é, o volume de downloads do pacote), ou das dependências reversas, ou dos objetivos estratégicos da rOpenSci, a equipe da rOpenSci pode apoiar os pacotes que estiverem com problemas e falhas, por meio de PRs que são revisados pelos autores dos pacotes, ou ainda, com alterações diretas (se os autores não responderem por aproximadamente um mês). A rOpenSci também fornecerá suporte aos autores de pacotes mediante solicitação, tanto pela equipe interna, quanto por voluntários da comunidade, de acordo com o tempo disponível.\nA pedido do autor, ou se os autores não responderem às consultas por aproximadamente um mês, a rOpenSci poderá procurar um novo mantenedor para os pacotes selecionados, que sejam revisados por pares, e que a rOpenSci considere ter alta valor para a comunidade, com base no volume de usuários/downloads, ou nas dependências reversas, ou nos objetivos estratégicos da rOpenSci.\nQuando arquivados, esses pacotes serão movidos da organização “ropensci” para a organização “ropensci-archive” no GitHub (ou para a conta do autor no GitHub, caso for de desejo do autor), seguindo as orientações de transferência. Elas ganharão o tipo “archived” no registro. Esses pacotes vão manter as tags “peer-reviewed” (revisado por pares) e e badges. Eles não serão construídos no sistema da rOpenSci.\nOs pacotes arquivados não serão exibidos por padrão na seção de pacotes da página da Web. Esses pacotes serão exibidos em uma guia especial das páginas de pacotes com \"type\": \"archived\" que foram revisados por pares, ou que foram mantidos pela equipe.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Política de curadoria de pacotes</span>"
    ]
  },
  {
    "objectID": "maintenance_curation.pt.html#legacy-acquired-packages",
    "href": "maintenance_curation.pt.html#legacy-acquired-packages",
    "title": "17  Política de curadoria de pacotes",
    "section": "17.4 Pacotes legado que foram adquiridos",
    "text": "17.4 Pacotes legado que foram adquiridos\nOs pacotes “legado” são pacotes que não foram criados ou mantidos pela rOpenSci e que também não são revisados por pares, mas que estão sob o controle da rOpenSci no GitHub devido a razões históricas. (Antes de estabelecer a organização, e o seu processo de revisão por pares e o seu escopo, a rOpenSci absorveu pacotes de vários desenvolvedores sem critérios bem definidos).\n\nA rOpenSci transferirá os pacotes legado de volta para as organizações e repositórios dos autores. Se os autores não tiverem interesse, transferiremos para o repositório “ropensci-archive”, seguindo as regras das orientações de transferência. Se os pacotes estiverem no escopo, a rOpenSci perguntará se os autores gostariam de submetê-los ao processo de revisão de software.\nOs pacotes legado não serão listados no registro de pacotes.\nExceções podem ser feitas para pacotes que sejam partes vitais do ecossistema de pacotes do R e/ou da rOpenSci, e que sejam ativamente monitorados pela equipe.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Política de curadoria de pacotes</span>"
    ]
  },
  {
    "objectID": "maintenance_curation.pt.html#incubator-packages",
    "href": "maintenance_curation.pt.html#incubator-packages",
    "title": "17  Política de curadoria de pacotes",
    "section": "17.5 Pacotes de incubadora",
    "text": "17.5 Pacotes de incubadora\nOs pacotes de “incubadora” são pacotes em desenvolvimento criados pela equipe ou por membros da comunidade como parte de projetos comunitários, como os criados por em desconferências.\n\nOs pacotes de incubadora ficarão na organização “ropenscilabs” no GitHub.\nOs pacotes de incubadora aparecerão no registro de pacotes com a tag “incubator”.\nOs pacotes de incubadora não serão exibidos no site por padrão, mas as páginas de pacotes incluem uma guia especial de “pacotes experimentais”.\nOs pacotes da incubadora e seus documentos serão criados pelo sistema da rOpenSci. Esse sistema não envia notificações mas gera resultados como o status de commit do GitHub (o red check mark ou o red cross). Os documentos indicarão claramente que o pacote é experimental.\nSemestralmente ou anualmente, a rOpenSci entrará em contato com os mantenedores desses pacotes de incubadora sobre repositórios que tenham pelo menos três meses de idade, perguntando sobre o status de desenvolvimento e as preferências dos autores sobre uma migração para o processo de revisão por pares, ou para o “ropensci-archive”, ou para uma organização dos autores. Baseado em nas respostas, o pacote será migrado imediatamente, e a revisão por pares será iniciada, ou a migração será adiada para a próxima revisão. Os pacotes de incubadora serão migrados para o “ropensci-archive” por padrão, seguindo as orientações de transferência.\nOs pacotes de incubadora arquivados ganharão o tipo “archived”.\n\n\n17.5.1 Pacotes de incubadora que não sejam pacotes de R\n\nA organização da “incubadora” também pode incluir pacotes que não sejam pacotes de R.\nEsses projetos não serão listados no registro, e não vão aparecer no site da rOpenSci, e também não serão construídos automaticamente.\nA política de migração para esses pacotes será a mesma dos pacotes de R, com locais de migração apropriados (por exemplo, “ropensci-books”)\nSe um pacote que não for um pacote de R for arquivado, ele será movido para a organização “ropensci-archive”, seguindo as orientações de transferência.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Política de curadoria de pacotes</span>"
    ]
  },
  {
    "objectID": "maintenance_curation.pt.html#books",
    "href": "maintenance_curation.pt.html#books",
    "title": "17  Política de curadoria de pacotes",
    "section": "17.6 Livros",
    "text": "17.6 Livros\nOs livros da rOpenSci são documentações longas, geralmente no formato bookdown, e estão relacionados a pacotes, projetos ou temas da rOpenSci, criados tanto pelos autores de pacotes, quanto pela equipe da rOpenSci, e também por membros da comunidade.\n\nOs livros ficarão dentro da organização “ropensci-books” no GitHub.\nOs livros serão hospedados no domínio books.ropensci.org\nOs livros podem estar maduros ou em desenvolvimento, mas devem ter um mínimo de esboços/conteúdo antes de serem migrados da organização “ropenscilabs” para dentro da organização “ropensci-books”.\nA autoria e o status de desenvolvimento de um livro devem ser claramente descritos em sua página inicial e no README.\nA rOpenSci pode fornecer badges ou modelos (por exemplo, “Em desenvolvimento,” “Mantido pela comunidade”) para os autores usarem nas páginas iniciais de seus livros.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Política de curadoria de pacotes</span>"
    ]
  },
  {
    "objectID": "maintenance_contributing.pt.html",
    "href": "maintenance_contributing.pt.html",
    "title": "18  Guia de contribuição",
    "section": "",
    "text": "Este capítulo apresenta o nosso Guia de Contribuição, que descreve como você pode fazer contribuições com código e sem código para a rOpenSci.\n\n\n\n\nEntão você quer contribuir para a rOpenSci? Fantástico! Nós desenvolvemos o Guia de contribuição da comunidade rOpenSci para dar as boas-vindas a você na rOpenSci e te ajudar a se reconhecer como um(a) colaborador(a) em potencial. O guia ajudará você a descobrir o que você pode ganhar doando seu tempo, conhecimento e experiência, combinando suas necessidades com coisas que ajudarão a missão da rOpenSci, e conectando você a recursos que podem te ajudar ao longo do caminho.\n\nNossa equipe e comunidade promovem ativamente um ambiente acolhedor em que pessoas usuárias e desenvolvedoras de diferentes origens e níveis de habilidade aprendem, compartilham ideias e inovam juntas abertamente por meio de normas e software compartilhados. A participação em todas as atividades da rOpenSci é apoiada por nosso Código de Conduta.\nAceitamos contribuições com código e sem código de pessoas programadoras novas ou experientes em qualquer estágio da carreira e em qualquer setor. Você não precisa ser um(a) desenvolvedor(a)! Talvez você queira passar 30 minutos compartilhando o caso de uso do seu pacote em nosso fórum público ou relatando um bug, uma hora aprendendo e participando de uma chamada da comunidade, cinco horas revisando um pacote de R enviado para revisão aberta por pares, ou talvez você queira assumir um compromisso contínuo para ajudar a manter um pacote.\nQuais são alguns dos benefícios de contribuir?\n\nConectar-se com uma comunidade que compartilha do seu interesse em tornar a ciência mais aberta\nAprenda com pessoas de fora de seu domínio que usam o R com desafios semelhantes aos seus\nFaça e responda a novas perguntas de pesquisa conhecendo novas ferramentas de software e aliados\nSentir-se confiante e com apoio em seus esforços para escrever código e desenvolver software\nGanhar visibilidade para seu trabalho de código aberto\nMelhorar o software que você usa ou constrói\nAprimore suas habilidades em R e ajude outras pessoas a aprimorarem as delas\nAumente o nível de suas habilidades de escrita\nObter mais exposição para o seu pacote\n\nConsulte nosso Guia de contribuição e navegue pela seção “O que traz você aqui?” para saber quais são os Eu quero … que se encaixam melhor em você e escolha o seu caminho! Para ajudar você a se reconhecer, nós as agrupamos em: Descobrir; Conectar; Aprender; Construir; Ajudar. Para cada categoria, listamos exemplos de como essas contribuições podem ser e colocamos links para os nossos recursos para obter os detalhes de que você precisa.",
    "crumbs": [
      "Maintaining Packages",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Guia de contribuição</span>"
    ]
  },
  {
    "objectID": "booknews.pt.html",
    "href": "booknews.pt.html",
    "title": "19  NEWS",
    "section": "",
    "text": "19.1 dev version",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>NEWS</span>"
    ]
  },
  {
    "objectID": "booknews.pt.html#dev-version",
    "href": "booknews.pt.html#dev-version",
    "title": "19  NEWS",
    "section": "",
    "text": "2025-09-23, Add section on challenges (non-responding reviewers). Also move text on non-responding authors to this section. (#955).\n2025-07-11, document better when the pkgdown websites of rOpenSci packages are re-built (#919).\n2025-07-11, add minimal mention of example datasets (#868).\n2025-07-17, add category for rOpenSci internal and peer-review tools (#848).\n2025-07-09, add more details on how to safeguard docs building for rOpenSci packages (#910, @rmgpanw)\n2025-07-11, add mentions of tools useful for translation and localization (#812).\n2025-07-09, add mention of tinytest. (#904)\n2025-07-09, add mention of the allcontributors package. (#899)\n2025-07-09, stop recommending the use of the rOpenSci forum for package discussions. (#898)\n2025-07-09, add a mention of ROR IDs (#909).\n2025-07-09, remove the upper-case from the NEWS.md template and update the real example link. (#896)\n2025-07-01, many typo fixes and English language improvements (#912, @Moohan)\n2025-03-11, document drawbacks of renaming widely used package (#831)\n2025-03-13, add a note on how to deprecate data (#649)\n2025-04-10, add link to pkgcheck vignette on our testing environment (#589)\n2025-04-10, replace the link to the Mozilla Code Review guide with explicit items (#835)\n2025-04-03, document how to put the system on vacation(#865)\n2025-04-03, add details about MEE process and structure the author guide a bit more (@robitalec, #862)\n2025-03-11, add note in the packaging guide about checking maintenance status of dependencies (#881)\n2025-03-11, add item about “top level code” in packaging guide (#879)\n2025-03-11, explicitly mention need to acknowledge authors of bundled code (#873)\n2025-03-27, add guidance for packages wrapping external software (#866)\n2025-02-25, add official rule on submitting one package at once only (@maurolepore, #876)\n2025-03-11, mention the Air formatting tool wherever we mention the styler package (#875)\n2025-02-25, require the default git branch to not be called master (#863)\n2024-09-06, update math guidance for pkgdown based on pkgdown’s update (#838)\n2024-08-30, remove mention of Twitter since rOpenSci no longer maintains an active Twitter account (@yabellini, #827)\n2024-07-17, document dashboard in editors’ chapter (@mpadge, #829)\n2024-06-27, document the author’s submit response step in the author guide (@jmaspons, #832).",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>NEWS</span>"
    ]
  },
  {
    "objectID": "booknews.pt.html#section",
    "href": "booknews.pt.html#section",
    "title": "19  NEWS",
    "section": "19.2 0.9.0",
    "text": "19.2 0.9.0\n\n2024-01-09, update roxygen2 wording (@vincentvanhees, #792).\n2023-12-15, update roxygen2 advice, mainly linking to roxygen2 website (#750).\n2023-09-15, add suggestions for API packages (#496).\nTranslation to Spanish!\n2023-07-17, Update Aims and Scope to include translation packages, remove experimental text-processing categories, and provide clarifications around API wrappers\n2023-05-04, Added link to Bioconductor book (#663, @llrs).\n2023-04-26, Changed suggested lifecycle stage in authors guide (#661, @bart1).\n2023-04-25, changed the COI section to use parallel construction (#659, @eliocamp).\n2022-07-04, Add resources around GitHub workflows (#479, @maurolepore).\n2023-02-14, update instructions for CITATION to reflect new CRAN policies (#604, #609).\n2023-02-14, add package maintainer cheatsheet (#608).\n2023-01-25, add Mastodon as social media (#592, by @yabellini).\n2023-01-25, add Mastodon as social media (#592, by @yabellini).\n2023-01-20, fix small formating error (#590 by @eliocamp).\n2022-11-22, mention shinytest2 near shinytest.\n2022-09-20, add editor instruction to add “stats” label to stats submissions\n2022-09-20, fixed link to reviewer approval template (#548), and rendering of editor’s template (#547)\n2022-08-23, add recommendation to document argument default (@Bisaloo, #501)\n2022-08-06, fix link to R Packages book (#498)\n2022-07-21, mention GitHub Discussions and GitHub issue templates. (#482)\n2022-07-21, highlight values for reviewing in more places (#481)\n2022-07-20, Explanation of package submission via non-default branches (#485), added @s3alfisc to contributor list.\n2022-07-20, add how to volunteer as a reviewer (#457).\n2022-06-23, Expanded explanation of Codecov, added @ewallace to contributor list (#484)",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>NEWS</span>"
    ]
  },
  {
    "objectID": "booknews.pt.html#section-1",
    "href": "booknews.pt.html#section-1",
    "title": "19  NEWS",
    "section": "19.3 0.8.0",
    "text": "19.3 0.8.0\n\n2022-06-03, Remove former references to now-archived “rodev” package\n2022-05-30, Advise that reviewers can also directly call @ropensci-review-bot check package\n2022-05-27, Add Mark Padgham to list of authors\n2022-05-27, Add devguider::prerelease_checklist item to pre-release template (#463)\n2022-05-13, Align version number in DESCRIPTION file with actual version (#443)\n2022-05-13, Update guidelines for CONTRIBUTING.md (#366, #462)\n2022-05-09, Add section on authorship of included code, thanks to @KlausVigo (#388).\n2022-05-09, Remove mention of ‘rev’ role requiring R v3.5\n2022-05-05, Move all scripts from local inst directory to ropensci-org/devguider pkg.\n2022-05-03, Update package archiving guidance to reduce README to minimal form.\n2022-04-29, Advise that authors can directly call @ropensci-review-bot check package.\n2022-04-29, Describe pkgcheck-action in CI section.\n2022-04-29, Update scope in policies section to include statistical software.\n2022-04-29, Add prelease.R script to open pre-release GitHub issue & ref in appendix.\n2022-04-26, Add GitHub 2FA recommendation to package security.\n2022-03-29, Remove references to Stef Butland, former community manager.\n2022-03-28, Add comments on submission planning about time commitment.\n2022-03-24, Remove approval comment template (coz it’s automatically generated by the bot now).\n2022-03-21, rephrase CITATION guidance to make it less strict. Also mentions CITATION.cff and the cffr package.\n2022-03-08, add links to blogs related to package development (#389).\n2022-02-17, update redirect instructions (@peterdesmet, #387).\n2022-02-14, link to Michael Lynch’s post Why Good Developers Write Bad Unit Tests.\n2022-02-14, mention more packages for testing like dittodb, vcr, httptest, httptest2, webfakes.\n2022-01-10, make review templates R Markdown files (@Bisaloo, #340).\n2022-01-14, update guidance on CI services (#377)\n2022-01-11, update guidance around branches, with resources suggested by @ha0ye and @statnmap.\n2022-01-10, divide author’s guide into sub-sections, and add extra info including pkgcheck.\n2021-11-30, adds links to examples of reviews, especially tough but constructive ones (with help from @noamross, @mpadge, #363).\n2021-11-19, add recommended spatial packages to scaffolding section (software-review-meta#47)\n2021-11-18, update advice on grouping functions for pkgdown output (#361)",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>NEWS</span>"
    ]
  },
  {
    "objectID": "booknews.pt.html#section-2",
    "href": "booknews.pt.html#section-2",
    "title": "19  NEWS",
    "section": "19.4 0.7.0",
    "text": "19.4 0.7.0\n\n2021-11-04, add mentions of stat software review to software review intro and to the first book page (#342).\n2021-11-04, mention pkgcheck in the author guide (@mpadge, #343).\n2021-11-04, add editors’ responsibilities including Editor etiquette for commenting on packages on which you aren’t handling/reviewing (@jhollist, #354).\n2021-11-04, give precise examples of tools for installation instructions (remotes, pak, R-universe).\n2021-11-04, add more bot guidance (less work for editors).\n2021-10-07, add guidance for editorial management (recruiting, inviting, onboarding, offboarding editors).\n2021-09-14, add a requirement that there is at least one HTML vignette.\n2021-09-03, add some recommendations around git. (@annakrystalli, #341)\n2021-07-14, clarify the categories data extraction and munging by adding examples. (@noamross, #337)\n2021-05-20, add guidance around setting up your package to foster a community, inspired by the recent rOpenSci community call. (with help from @Bisaloo, #289, #308)\n2021-04-27, no longer ask reviewers to ask covr as it’ll be done by automatic tools, but ask them to pay attention to tests skipped.\n2021-04-02, add citation guidance.\n2021-04-02, stop asking reviewers to run goodpractice as this is part of editorial checks.\n2021-03-23, launched a new form for reviewer volunteering.\n2021-02-24, add guidance around the use of @ropensci-review-bot.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>NEWS</span>"
    ]
  },
  {
    "objectID": "booknews.pt.html#section-3",
    "href": "booknews.pt.html#section-3",
    "title": "19  NEWS",
    "section": "19.5 0.6.0",
    "text": "19.5 0.6.0\n\n2021-02-04, add guidance to enforce package versioning and tracking of changes through review (@annakrystalli, #305)\n2021-01-25, add a translation of the review template in Spanish (@Fvd, @maurolepore, #303)\n2021-01-25, the book has now better citation guidance in case you want to cite this very guide (@Bisaloo, #304).\n2021-01-12, add some more guidance on escaping examples (#290).\n2021-01-12, mention the lifecycle package in the chapter about package evolution (#287).\n2021-01-12, require overlap information is put in documentation (#292).\n2021-01-12, start using the bookdown::bs4_book() template.\n2021-01-12, add a sentence about whether it is acceptable to push a new version of a package to CRAN within two weeks of the most recent version if you have just been made aware of, and fixed, a major bug (@sckott, #283)\n2021-01-12, mention the HTTP testing in R book.\n2021-01-12, mention testthat snapshot tests.\n2021-01-12, remove mentions of Travis CI and link to Jeroen Ooms’ blog post about moving away from Travis.\n2021-01-12, update the package curation policy: mention a possible exception for legacy packages that are vital parts of the R and/or rOpenSci package ecosystem which are actively monitored by staff. (@noamross, #293)",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>NEWS</span>"
    ]
  },
  {
    "objectID": "booknews.pt.html#section-4",
    "href": "booknews.pt.html#section-4",
    "title": "19  NEWS",
    "section": "19.6 0.5.0",
    "text": "19.6 0.5.0\n\n2020-10-08, add help about link checking (@sckott, #281)\n2020-10-08, update JOSS instructions (@karthik, #276)\n2020-10-05, add links to licence resources (@annakrystalli, #279)\n2020-10-05, update information about the contributing guide (@stefaniebutland, #280)\n2020-09-11, make reviewer approval a separate template (@bisaloo, #264)\n2020-09-22, add package curation policy (@noamross, #263)\n2020-09-11, add more guidance and requirements for docs at submission (@annakrystalli, #261)\n2020-09-14, add more guidance on describing data source in DESCRIPTION (@mpadge, #260)\n2020-09-14, add more guidance about tests of deprecated functions (@sckott, #213)\n2020-09-11, update the CI guidance (@bisaloo, @mcguinlu, #269)\n2020-09-11, improve the redirect guidance (@jeroen, @mcguinlu, #269)",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>NEWS</span>"
    ]
  },
  {
    "objectID": "booknews.pt.html#section-5",
    "href": "booknews.pt.html#section-5",
    "title": "19  NEWS",
    "section": "19.7 0.4.0",
    "text": "19.7 0.4.0\n\n2020-04-02, give less confusing code of conduct guidance: the reviewed packages’ COC is rOpenSci COC (@Bisaloo, @cboettig, #240)\n2020-03-27, add section on Ethics, Data Privacy and Human Subjects Research to Policies chapter\n2020-03-12, mention GitHub Actions as a CI provider.\n2020-02-24, add guide for inviting a guest editor.\n2020-02-14, add mentions of the ropensci-books GitHub organisation and associated subdomain.\n2020-02-10, add field and laboratory reproducibility tools as a category in scope.\n2020-02-10, add more guidance about secrets and package development in the security chapter.\n2020-02-06, add guidance about Bioconductor dependencies (#246).\n2020-02-06, add package logo guidance (#217).\n2020-02-06, add one CRAN gotcha: single quoting software names(#245, @aaronwolen)\n2020-02-06, improve guidance regarding the replacement of “older” pkgdown website links and source (#241, @cboettig)\n2020-02-06, rephrase the EiC role (#244).\n2020-02-06, remove the recommendation to add rOpenSci footer (https://github.com/ropensci/software-review-meta/issues/79).\n2020-02-06, remove the recommendation to add a review mention to DESCRIPTION but recommends mentioning the package version when reviewers are added as “rev” authors.\n2020-01-30, slightly changes the advice on documentation re-use: add a con; mention @includeRmd and @example; correct the location of Rmd fragments (#230).\n2020-01-30, add more guidance for the editor in charge of a dev guide release (#196, #205).\n2020-01-22, add guidance in the editor guide about not transferred repositories.\n2020-01-22, clarify forum guidance (for use cases and in general).\n2020-01-22, mention an approach for pre-computing vignettes so that the pkgdown website might get build on rOpenSci docs server.\n2020-01-22, document the use of mathjax with rotemplate (@Bisaloo, #199).\n2020-01-20, add guidance for off-thread interaction and COIs (@noamross, #197).\n2020-01-20, add advice on specifying dependency minimum versions (@karthik, @annakrystalli, #185).\n2020-01-09, start using GitHub actions instead of Travis for deployment.\n-2019-12-11, add note in Documentation sub-section of Packaging Guide section about referencing the new R6 support in roxygen2 (ropensci/dev_guide#189)\n2019-12-11, add new CRAN gotcha about having ‘in R’ or ‘with R’ in your package title (@bisaloo, ropensci/dev_guide#221)",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>NEWS</span>"
    ]
  },
  {
    "objectID": "booknews.pt.html#section-6",
    "href": "booknews.pt.html#section-6",
    "title": "19  NEWS",
    "section": "19.8 0.3.0",
    "text": "19.8 0.3.0\n\n2019-10-03, include in the approval template that maintainers should include link to the docs.ropensci.org/pkg site (ropensci/dev_guide#191)\n2019-09-26, add instructions for handling editors to nominate packages for blog posts (ropensci/dev_guide#180)\n2019-09-26, add chapter on changing package maintainers (ropensci/dev_guide#128) (ropensci/dev_guide#194)\n2019-09-26, update Slack room to use for editors (ropensci/dev_guide#193)\n2019-09-11, update instructions in README for rendering the book locally (ropensci/dev_guide#192)\n2019-08-05, update JOSS submission instructions (ropensci/dev_guide#187)\n2019-07-22, break “reproducibility” category in policies into component parts. (ropensci/software-review-meta#81)\n2019-06-18, add link to rOpenSci community call “Security for R” to security chapter.\n2019-06-17, fix formatting of Appendices B-D in the pdf version of the book (bug report by @IndrajeetPatil, #179)\n2019-06-17, add suggestion to use R Markdown hunks approach when the README and the vignette share content. (ropensci/dev_guide#161)\n2019-06-17, add mention of central building of documentation websites.\n2019-06-13, add explanations of CRAN checks. (ropensci/dev_guide#177)\n2019-06-13, add mentions of the rodev helper functions where relevant.\n2019-06-13, add recommendation about using cat for str.*() methods. RStudio assumes that str uses cat, if not when loading an R object the str prints to the console in RStudio and doesn’t show the correct object structure in the properties. ([@mattfidler] (https://github.com/mattfidler/) #178)\n2019-06-12, add more details about git flow.\n2019-06-12, remove recommendation about roxygen2 dev version since the latest stable version has what is needed. (@bisaloo, #165)\n2019-06-11, add mention of usethis functions for adding testing or vignette infrastructure in the part about dependencies in the package building guide.\n2019-06-10, use the new URL for the dev guide, https://devguide.ropensci.org/\n2019-05-27, add more info about the importance of the repo being recognized as a R package by linguist (@bisaloo, #172)\n2019-05-22, update all links eligible to HTTPS and update links to the latest versions of Hadley Wickham and Jenny Bryan’s books (@bisaloo, #167)\n2019-05-15, add book release guidance for editors. (ropensci/dev_guide#152)",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>NEWS</span>"
    ]
  },
  {
    "objectID": "booknews.pt.html#section-7",
    "href": "booknews.pt.html#section-7",
    "title": "19  NEWS",
    "section": "19.9 0.2.0",
    "text": "19.9 0.2.0\n\n2019-05-23, add CRAN gotcha: in the Description field of your DESCRIPTION file, enclose URLs in angle brackets.\n2019-05-13, add more content to the chapter about contributing.\n2019-05-13, add more precise instructions about blog posts to approval template for editors.\n2019-05-13, add policies allowing using either &lt;- or = within a package as long as the whole package is consistent.\n2019-05-13, add request for people to tell us if they use our standards/checklists when reviewing software elsewhere.\n2019-04-29, add requirement and advice on testing packages using devel and oldrel R versions on Travis.\n2019-04-23, add a sentence about why being generous with attributions and more info about ctb vs aut.\n2019-04-23, add link to Daniel Nüst’s notes about migration from XML to xml2.\n2019-04-22, add use of rOpenSci forum to maintenance section.\n2019-04-22, ask reviewer for consent to be added to DESCRIPTION in review template.\n2019-04-22, use a darker blue for links (feedback by @kwstat, #138).\n2019-04-22, add book cover.\n2019-04-08, improve formatting and link text in README (@katrinleinweber, #137)\n2019-03-25, add favicon (@wlandau, #136).\n2019-03-21, improve Travis CI guidance, including link to examples. (@mpadge, #135)\n2019-02-07, simplify code examples in Package Evolution section (maintenance_evolution.Rmd file) (@hadley, #129).\n2019-02-07, added a PDF file to export (request by @IndrajeetPatil, #131).",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>NEWS</span>"
    ]
  },
  {
    "objectID": "booknews.pt.html#section-8",
    "href": "booknews.pt.html#section-8",
    "title": "19  NEWS",
    "section": "19.10 0.1.5",
    "text": "19.10 0.1.5\n\n2019-02-01, created a .zenodo.json to explicitly set editors as authors.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>NEWS</span>"
    ]
  },
  {
    "objectID": "booknews.pt.html#first-release-0.1.0",
    "href": "booknews.pt.html#first-release-0.1.0",
    "title": "19  NEWS",
    "section": "19.11 First release 0.1.0",
    "text": "19.11 First release 0.1.0\n\n2019-01-23, add details about requirements for packages running on all major platforms and added new section to package categories.\n2019-01-22, add details to the guide for authors about the development stage at which to submit a package.\n2018-12-21, inclusion of an explicit policy for conflict of interest (for reviewers and editors).\n2018-12-18, added more guidance for editor on how to look for reviewers.\n2018-12-04, onboarding was renamed Software Peer Review.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>NEWS</span>"
    ]
  },
  {
    "objectID": "booknews.pt.html#place-holder-0.0.1",
    "href": "booknews.pt.html#place-holder-0.0.1",
    "title": "19  NEWS",
    "section": "19.12 place-holder 0.0.1",
    "text": "19.12 place-holder 0.0.1\n\nAdded a NEWS.md file to track changes to the book.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>NEWS</span>"
    ]
  },
  {
    "objectID": "reviewtemplate.pt.html",
    "href": "reviewtemplate.pt.html",
    "title": "20  Modelo de revisão",
    "section": "",
    "text": "Você pode salvar isso como um arquivo RMarkdown ou excluir o YAML e salvá-lo como um arquivo Markdown.\n---\ntitle: \"review\"\noutput: \n  rmarkdown::md_document:\n    pandoc_args: [\n      \"--wrap=none\"\n    ]\n---\n\n## Revisão do pacote\n\n*Marque as caixas conforme aplicável e elabore nos comentários abaixo. Sua avaliação não se limita a estes tópicos, conforme descrito no guia do(a) revisor(a)*\n\n- **Descreva resumidamente qualquer relacionamento de trabalho que você tem (teve) com as pessoas autoras do pacote.**\n- [ ] Como revisor(a), confirmo que não há [conflitos de interesse](https://devguide.ropensci.org/policies.html#coi) para que eu revise este trabalho (se você não tiver certeza se está em conflito, fale com seu(sua) editor(a) _antes_ de iniciar sua revisão)\n\n#### Documentação\n\nO pacote inclui todas as seguintes formas de documentação:\n\n- [ ] **Uma declaração de necessidade:** declarando claramente os problemas que o software foi projetado para resolver além do seu público-alvo no README\n- [ ] **Instruções de instalação:** para a versão de desenvolvimento do pacote e quaisquer dependências que sejam fora do padrão no README\n- [ ] **Vignette(s):** demonstrando as principais funcionalidades com exemplos que são executados localmente com sucesso\n- [ ] **Documentação de funções:** para todas as funções exportadas\n- [ ] **Exemplos:** (que são executados localmente com sucesso) para todas as funções exportadas\n- [ ] **Diretrizes da comunidade:** incluindo diretrizes de contribuição no README ou CONTRIBUTING, e DESCRIPTION com `URL`, `BugReports` e `Maintainer` (o qual pode ser gerado automaticamente via `Authors@R`).\n\n#### Funcionalidade\n\n- [ ] **Instalação:** Processo de instalação documentado conclui com sucesso.\n- [ ] **Funcionalidade:** Qualquer funcionalidade que foi assumida pelo software foi confirmada.\n- [ ] **Desempenho:** Qualquer desempenho a mais que foi assumido pelo software foi confirmado.\n- [ ] **Testes automatizados:**Os testes unitários cobrem funções essenciais do pacote e uma gama razoável de *inputs* e condições. Todos os testes passam na máquina local.\n- [ ] **Diretrizes de empacotamento**: O pacote está em conformidade com as diretrizes de empacotamento da rOpenSci.\n\nHoras estimadas gastas na revisão:\n\n- [ ] Caso as pessoas autoras do pacote considerem apropriado, concordo em ser reconhecido(a) como revisor(a) do pacote (função \"rev\") no arquivo DESCRIPTION do pacote.\n\n---\n\n### Comentários da revisão",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Modelo de revisão</span>"
    ]
  },
  {
    "objectID": "editortemplate.pt.html",
    "href": "editortemplate.pt.html",
    "title": "21  Modelo para o(a) editor(a)",
    "section": "",
    "text": "### Checks do editor:\n\n- [ ] **Documentação**: O pacote possui documentação suficiente e está disponível online (`README`, `pkgdown docs`), de modo que permita um estudo de suas funcionalidades e escopo sem a necessidade de instalar o pacote. Em particular,\n    - [ ] O caso de uso do pacote é bem feito?\n    - [ ] A página principal (*index*) da documentação é clara (agrupada por tópicos se necessário)?\n    - [ ] As documentações longas (*vignettes*) são legíveis, e detalhadas o suficiente ao invés de serem muito superficiais?\n    \n- [ ] **Adequação**: O pacote atende aos critérios de [adequação](https://devguide.ropensci.org/policies.html#package-categories) e  [sobreposição](https://devguide.ropensci.org/policies.html#overlap).\n- [ ] **Instruções de instalação**: As instruções de instalação são claras o suficiente para um ser humano?\n- [ ] **Testes**: Caso o pacote possua algum produto interativo / HTTP / gráfico etc. os seus testes estão utilizando [ferramentas em estado-de-arte](https://devguide.ropensci.org/building.html#testing)?\n- [ ] **Instruções para contribuição**: A documentação para contribuição é clara o suficiente (e.g. tokens para testes e áreas de playground)?\n- [ ] **Licença:** O pacote possui uma licença aceita no CRAN ou OSI.\n- [ ] **Gerenciamento do projeto**: O monitoramento de problemas (*issues*) e PRs (*pull requests*) está em bom estado, e.g. existem bugs muito críticos, está claro quando um pedido de *feature* está planejado para ser tratado?\n---\n\n#### Comentários do(a) editor(a)\n\n---",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Modelo para o(a) editor(a)</span>"
    ]
  },
  {
    "objectID": "reviewrequesttemplate.pt.html",
    "href": "reviewrequesttemplate.pt.html",
    "title": "22  Modelo de solicitação de revisão",
    "section": "",
    "text": "Os editores podem usar o modelo de e-mail abaixo para recrutar revisores.\n\nCaro [REVISOR(A)]\n\nOlá, aqui é [EDITOR(A)]. [BRINCADEIRA AMIGÁVEL]. Estou escrevendo para perguntar se você gostaria de revisar um pacote para a rOpenSci. Como você provavelmente sabe, a rOpenSci realiza revisão por pares de pacotes de R contribuídos para nossa coleção, de maneira semelhante aos periódicos.\n\nO pacote, [PACOTE] de [AUTOR(ES)], faz [FUNÇÃO]. Você pode encontrá-lo no GitHub aqui: [LINK PARA REPOSITÓRIO]. Também conduzimos nosso processo de revisão aberta via GitHub, aqui: [ISSUE DE ONBOARDING]\n\nSe você aceitar, observe que pedimos aos revisores que concluam as avaliações em três semanas. (Descobrimos que a revisão de um pacote leva um tempo semelhante ao de um trabalho acadêmico.)\n\nNosso [guia para revisores] detalha o que procuramos em uma revisão de pacote e inclui links para exemplos de revisão. Nossos padrões estão detalhados em nosso [guia de pacotes] e fornecemos um [modelo] de revisão para você usar. Certifique-se de que não haja um [conflito de interesses](https://devguide.ropensci.org/policies.html#coi) que lhe impeça de revisar este pacote. Se você tiver dúvidas ou comentários, sinta-se à vontade para me perguntar ou postar no [fórum da rOpenSci].\n\nA comunidade da rOpenSci é o nosso melhor ativo. Nosso objetivo é que as revisões sejam abertas, não adversas e focadas na melhoria da qualidade do software. Seja respeitoso(a) e gentil! Consulte nosso guia para revisores e o nosso [código de conduta](https://ropensci.org/code-of-conduct/) para mais informações.\n\n\n[SE MENTORIA FOR REQUISITADA: Você indicou em seu formulário que prefere ter uma orientação para sua primeira revisão. Você é livre para me usar como recurso durante esse processo, incluindo fazer perguntas por e-mail e Slack (você receberá um convite para o Slack da rOpenSci) e compartilhar os rascunhos de sua revisão para feedback antes de postá-los. Também estarei feliz de fazer uma breve videochamada para lhe explicar o processo. Por favor, me avise em sua resposta se você deseja agendar uma videochamada dessas.]\n\nVocê consegue revisar? Caso não consiga, você tem alguma sugestão de revisor(a)? Se eu não receber uma resposta sua dentro de uma semana, vou presumir que você não pode revisar neste momento.\n\nAgradeço pelo seu tempo.\n\nAtenciosamente\n\n[EDITOR(A)]\n\n[guia para revisores]: https://devguide.ropensci.org/reviewerguide.html\n[guia para pacotes]: https://devguide.ropensci.org/building.html\n[modelo]: https://devguide.ropensci.org/reviewtemplate.html\n[fórum da rOpenSci]: https://discuss.ropensci.org/",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Modelo de solicitação de revisão</span>"
    ]
  },
  {
    "objectID": "approval2template.pt.html",
    "href": "approval2template.pt.html",
    "title": "23  Modelo de comentário de aprovação do(a) revisor(a)",
    "section": "",
    "text": "## Resposta do(a) revisor(a)\n\n#### Aprovação final (pós-revisão)\n\n- [ ] **O(a) autor(a) respondeu à minha revisão e realizou as mudanças requisitadas. Eu recomendo a aprovação deste pacote.**\n\n\n&lt;!--Por favor, preencha a estimativa abaixo.--&gt;\nEstimativa de horas dedicadas à revisão:",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Modelo de comentário de aprovação do(a) revisor(a)</span>"
    ]
  },
  {
    "objectID": "newstemplate.pt.html",
    "href": "newstemplate.pt.html",
    "title": "24  Modelo de notícias",
    "section": "",
    "text": "foobar 0.2.0 (2016-04-01)\n=========================\n\n### Novas funcionalidades\n\n  * Nova função adicionada `do_things()` para fazer coisas (#5)\n\n### Melhorias pequenas\n\n  * Documentação foi aprimorada para a função `things()` (#4)\n\n### Correções de bugs\n\n  * Correção de um bug de parseamento em `parse()` (#3)\n\n### Deprecado e extinto\n\n  * `hello_world()` está deprecada agora e será removida em\n     uma futura versão, utilize `hello_mars()`\n\n### Correções em documentação\n\n  * Esclareceu o papel de `hello_mars()` versus `goodbye_mars()`.\n\n\n### (um especial: qualquer cabeçalho que agrupa um número grande de mudanças sobre uma única coisa)\n\n    * blablabla.\n\nfoobar 0.1.0 (2016-01-01)\n=========================\n\n### Novas funcionalidades\n\n  * publicado no CRAN",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Modelo de notícias</span>"
    ]
  },
  {
    "objectID": "bookreleaseissue.pt.html",
    "href": "bookreleaseissue.pt.html",
    "title": "25  Orientação para o lançamento de livros",
    "section": "",
    "text": "Os(as) editores(as) que estão se preparando para um lançamento podem executar o script prelease.R na pasta inst deste repositório para abrir automaticamente um problema no GitHub com os pontos de verificação para todos os problemas atuais atribuídos ao marco da próxima versão, juntamente com a seguinte lista de verificação. Antes de executar o script, verifique manualmente a atribuição de problemas ao marco. Isso deve ser executado um mês antes do lançamento planejado.\n\n## Versão de lançamento do livro &lt;insira a versão&gt;\n\n### Manutenção do repositório entre lançamentos\n\n- [ ] Consulte a página de problemas para [o guia dev](https://github.com/ropensci/dev_guide/issues) e também para o repositório [de revisões de software](https://github.com/ropensci/software-review-meta/issues), procure por mudanças que ainda devem ser feitas no guia dev. Atribua os problemas encontrados no guia dev ao marco correspondente às versões, seja esta a próxima versão, ou, às versões seguintes, e.g [versão 0.3.0](https://github.com/ropensci/dev_guide/milestone/2). Encoraje novos PRs e revise eles.\n\n### 1 mês antes do lançamento\n\n- [ ] Lembre os editores de abrirem problemas/PRs para itens que desejam ver na próxima versão.\n\n- [ ] Execute [a função `devguide_prerelease()`](https://github.com/ropensci-org/devguider) do pacote `devguider`.\n\n- [ ] Peça aos(às) editores(as) por qualquer feedback que você precise antes do lançamento.\n\n- [ ] Para cada contribuição/alteração verifique se as NOTÍCIAS no arquivo `Appendix.Rmd` foram atualizadas.\n\n- [ ] Planeje uma data para o lançamento e se comunique com o/a gerente da comunidade da rOpenSci, que lhe dará uma data para publicar uma postagem no blog (ou nota técnica).\n\n\n### 2 semanas antes do lançamento\n\n- [ ] Escreva um rascunho para uma postagem de blog (ou nota técnica) sobre o lançamento com antecedência suficiente para que os(as) editores(as) e, em seguida, o(a) gerente da comunidade, possam revisá-lo (2 semanas). [Exemplo](https://github.com/ropensci/roweb3/pull/291), [instruções gerais para a postagem no blog](https://blogguide.rpensci.org/), [instruções específicas para as postagens de lançamento](#releaseblogpost).\n\n- [ ] Crie um PR a partir da branch `dev` para a branch `master` e, em seguida, comunique aos editores através do GitHub e do Slack. Mencione o rascunho da postagem do blog em um comentário dentro deste PR.\n\n### Lançamento\n\n- [ ] Verifique as URLs usando [a função `devguide_urls()` do pacote {devguider}](https://github.com/ropensci-org/devguider)\n\n- [ ] Verifique a ortografia usando [a função `devguide_spelling()` do pacote {devguider}](https://github.com/rpensci-org/devguider). Atualize também a [WORDLIST](https://github.com/ropensci/dev_guide/blob/master/inst/WORDLIST) conforme necessário.\n\n- [ ] Realize um squash sobre os seus commits para o PR de `dev` para `master`.\n\n- [ ] Atualize a página de *release* do GitHub, e confira a página de *release* do Zenodo.\n\n- [ ] Reconstrua (para atualizar os metadados do livro no Zenodo) ou aguarde o processo diário de construção do livro.\n\n- [ ] Crie novamente a branch `dev`.\n\n- [ ] Conclua o PR com a sua postagem de blog (ou nota técnica). Destaque os aspectos mais importantes a serem destacados em tweets (e publicações) como parte da discussão do PR.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Orientação para o lançamento de livros</span>"
    ]
  },
  {
    "objectID": "redirect.pt.html",
    "href": "redirect.pt.html",
    "title": "26  Como definir um redirecionamento",
    "section": "",
    "text": "26.1 Site que não seja de páginas do Github Pages (por exemplo, Netlify)\nSubstitua o conteúdo do site atual por dois arquivos chamados index.html e 404.html. Ambos os arquivos devem conter o seguinte conteúdo:",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Como definir um redirecionamento</span>"
    ]
  },
  {
    "objectID": "redirect.pt.html#non-git-hub-pages-site-e-g-netlify",
    "href": "redirect.pt.html#non-git-hub-pages-site-e-g-netlify",
    "title": "26  Como definir um redirecionamento",
    "section": "",
    "text": "&lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv=\"refresh\" content=\"0;URL=https://docs.ropensci.org/&lt;pkgname&gt;/\"&gt;  \n&lt;/head&gt;\n&lt;/html&gt;",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Como definir um redirecionamento</span>"
    ]
  },
  {
    "objectID": "redirect.pt.html#git-hub-pages",
    "href": "redirect.pt.html#git-hub-pages",
    "title": "26  Como definir um redirecionamento",
    "section": "26.2 Páginas do GitHub",
    "text": "26.2 Páginas do GitHub\nVocê pode configurar o redirecionamento no repositório gh-pages do seu usuário principal:\n\ncrie um novo repositório (se você ainda não tiver um): https://github.com/&lt;username&gt;/&lt;username&gt;.github.io.\nNesse repositório, crie um diretório &lt;pkgname&gt; contendo 2 arquivos: um index.html e 404.html que redirecionam para o novo local (consulte a subseção anterior).\nTeste o endereço https://&lt;username&gt;.github.io/&lt;pkgname&gt;/index.html que vai redirecionar.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Como definir um redirecionamento</span>"
    ]
  },
  {
    "objectID": "bot_cheatsheet.pt.html",
    "href": "bot_cheatsheet.pt.html",
    "title": "27  Comandos do bot",
    "section": "",
    "text": "27.1 Para todos\nVale ressaltar que nós limpamos os tópicos de problemas ao remover todo conteúdo estranho, portanto, o registro de que você solicitou ajuda de bots será rapidamente apagado ou ocultado.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Comandos do bot</span>"
    ]
  },
  {
    "objectID": "bot_cheatsheet.pt.html#for-everyone",
    "href": "bot_cheatsheet.pt.html#for-everyone",
    "title": "27  Comandos do bot",
    "section": "",
    "text": "27.1.1 Veja a lista de comandos disponíveis para você\nSe você precisar de um lembrete rápido!\n@ropensci-review-bot help\n\n\n27.1.2 Veja o código de conduta\n@ropensci-review-bot code of conduct",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Comandos do bot</span>"
    ]
  },
  {
    "objectID": "bot_cheatsheet.pt.html#for-authors",
    "href": "bot_cheatsheet.pt.html#for-authors",
    "title": "27  Comandos do bot",
    "section": "27.2 Para autores",
    "text": "27.2 Para autores\n\n27.2.1 Verificar o pacote com o pkgcheck\nQuando seu pacote tiver mudado substancialmente.\n@ropensci-review-bot check package\n\n\n27.2.2 Enviar resposta aos revisores\nPara registrar sua resposta aos revisores.\n@ropensci-review-bot submit response &lt;response-url&gt;\nonde &lt;response_url&gt; é o link para o comentário de resposta no tópico do problema.\n\n\n27.2.3 Finalizar a transferência do repositório\nDepois que você aceitar o convite para a organização do GitHub do rOpenSci e transferir seu repositório do GitHub para ela, execute este comando para obter novamente o acesso de administrador ao seu repositório.\n@ropensci-review-bot finalize transfer of &lt;package-name&gt;\n\n\n27.2.4 Obter um novo convite após a aprovação\nSe você perdeu o prazo de uma semana para aceitar o convite para a organização do rOpenSci no GitHub, execute isso para receber um novo convite.\n@ropensci-review-bot invite me to ropensci/&lt;package-name&gt;",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Comandos do bot</span>"
    ]
  },
  {
    "objectID": "bot_cheatsheet.pt.html#for-the-editor-in-chief",
    "href": "bot_cheatsheet.pt.html#for-the-editor-in-chief",
    "title": "27  Comandos do bot",
    "section": "27.3 Para o editor-chefe",
    "text": "27.3 Para o editor-chefe\n\n27.3.1 Atribua um (a) editor (a)\n@ropensci-review-bot assign @username as editor\n\n\n27.3.2 Colocar o envio em espera\nVeja política editorial.\n@ropensci-review-bot put on hold\n\n\n27.3.3 Indique que o envio está fora do escopo\nNão se esqueça de publicar primeiro um comentário explicando a decisão e agradecendo ao(s) autor(es) pelo envio.\n@ropensci-review-bot out-of-scope",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Comandos do bot</span>"
    ]
  },
  {
    "objectID": "bot_cheatsheet.pt.html#for-assigned-editor",
    "href": "bot_cheatsheet.pt.html#for-assigned-editor",
    "title": "27  Comandos do bot",
    "section": "27.4 Para o editor designado",
    "text": "27.4 Para o editor designado\n\n27.4.1 Colocar o envio em espera\nVeja política editorial.\n@ropensci-review-bot put on hold\n\n\n27.4.2 Verificar o pacote com o pkgcheck\nGeralmente, apenas em consultas pré-submissão ou quando os autores indicam que o pacote foi substancialmente alterado.\n@ropensci-review-bot check package\n\n\n27.4.3 Verificar padrões estatísticos\nGeralmente, apenas em consultas pré-submissão ou quando os autores indicam que o pacote foi substancialmente alterado.\n@ropensci-review-bot check srr\n\n\n27.4.4 Verifique se o README tem o selo de revisão de software\nNo final do processo de envio.\n@ropensci-review-bot check readme\n\n\n27.4.5 Indique que você está procurando revisores\n@ropensci-review-bot seeking reviewers\n\n\n27.4.6 Atribuir um (a) revisor (a)\n@ropensci-review-bot assign @username as reviewer\nou\n@ropensci-review-bot add @username as reviewer\n\n\n27.4.7 Remover um (a) revisor (a)\n@ropensci-review-bot remove @username from reviewers\n\n\n27.4.8 Ajustar a data de vencimento da revisão\n@ropensci-review-bot set due date for @username to YYYY-MM-DD\n\n\n27.4.9 Registre que uma revisão foi enviada\n@ropensci-review-bot submit review &lt;review-url&gt; time &lt;time in hours&gt;\n\n\n27.4.10 Aprovar o pacote\n@ropensci-review-bot approve &lt;package-name&gt;",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Comandos do bot</span>"
    ]
  }
]